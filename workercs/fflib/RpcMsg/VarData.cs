/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class VarData : TBase
{
  private Dictionary<int, long> _intData;
  private Dictionary<int, string> _strData;
  private Dictionary<int, Dictionary<int, long>> _mapData;

  public Dictionary<int, long> IntData
  {
    get
    {
      return _intData;
    }
    set
    {
      __isset.intData = true;
      this._intData = value;
    }
  }

  public Dictionary<int, string> StrData
  {
    get
    {
      return _strData;
    }
    set
    {
      __isset.strData = true;
      this._strData = value;
    }
  }

  public Dictionary<int, Dictionary<int, long>> MapData
  {
    get
    {
      return _mapData;
    }
    set
    {
      __isset.mapData = true;
      this._mapData = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool intData;
    public bool strData;
    public bool mapData;
  }

  public VarData() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.Map) {
            {
              IntData = new Dictionary<int, long>();
              TMap _map9 = iprot.ReadMapBegin();
              for( int _i10 = 0; _i10 < _map9.Count; ++_i10)
              {
                int _key11;
                long _val12;
                _key11 = iprot.ReadI32();
                _val12 = iprot.ReadI64();
                IntData[_key11] = _val12;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.Map) {
            {
              StrData = new Dictionary<int, string>();
              TMap _map13 = iprot.ReadMapBegin();
              for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
              {
                int _key15;
                string _val16;
                _key15 = iprot.ReadI32();
                _val16 = iprot.ReadString();
                StrData[_key15] = _val16;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Map) {
            {
              MapData = new Dictionary<int, Dictionary<int, long>>();
              TMap _map17 = iprot.ReadMapBegin();
              for( int _i18 = 0; _i18 < _map17.Count; ++_i18)
              {
                int _key19;
                Dictionary<int, long> _val20;
                _key19 = iprot.ReadI32();
                {
                  _val20 = new Dictionary<int, long>();
                  TMap _map21 = iprot.ReadMapBegin();
                  for( int _i22 = 0; _i22 < _map21.Count; ++_i22)
                  {
                    int _key23;
                    long _val24;
                    _key23 = iprot.ReadI32();
                    _val24 = iprot.ReadI64();
                    _val20[_key23] = _val24;
                  }
                  iprot.ReadMapEnd();
                }
                MapData[_key19] = _val20;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("VarData");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (IntData != null && __isset.intData) {
      field.Name = "intData";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.I32, TType.I64, IntData.Count));
        foreach (int _iter25 in IntData.Keys)
        {
          oprot.WriteI32(_iter25);
          oprot.WriteI64(IntData[_iter25]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (StrData != null && __isset.strData) {
      field.Name = "strData";
      field.Type = TType.Map;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.I32, TType.String, StrData.Count));
        foreach (int _iter26 in StrData.Keys)
        {
          oprot.WriteI32(_iter26);
          oprot.WriteString(StrData[_iter26]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (MapData != null && __isset.mapData) {
      field.Name = "mapData";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, MapData.Count));
        foreach (int _iter27 in MapData.Keys)
        {
          oprot.WriteI32(_iter27);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.I64, MapData[_iter27].Count));
            foreach (int _iter28 in MapData[_iter27].Keys)
            {
              oprot.WriteI32(_iter28);
              oprot.WriteI64(MapData[_iter27][_iter28]);
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("VarData(");
    sb.Append("IntData: ");
    sb.Append(IntData);
    sb.Append(",StrData: ");
    sb.Append(StrData);
    sb.Append(",MapData: ");
    sb.Append(MapData);
    sb.Append(")");
    return sb.ToString();
  }

}

