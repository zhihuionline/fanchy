/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SessionEnterWorkerReq : TBase
{
  private long _sessionId;
  private string _sessionIp;
  private string _fromGate;
  private string _fromWorker;
  private string _toWorker;
  private byte[] _extraData;

  public long SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public string SessionIp
  {
    get
    {
      return _sessionIp;
    }
    set
    {
      __isset.sessionIp = true;
      this._sessionIp = value;
    }
  }

  public string FromGate
  {
    get
    {
      return _fromGate;
    }
    set
    {
      __isset.fromGate = true;
      this._fromGate = value;
    }
  }

  public string FromWorker
  {
    get
    {
      return _fromWorker;
    }
    set
    {
      __isset.fromWorker = true;
      this._fromWorker = value;
    }
  }

  public string ToWorker
  {
    get
    {
      return _toWorker;
    }
    set
    {
      __isset.toWorker = true;
      this._toWorker = value;
    }
  }

  public byte[] ExtraData
  {
    get
    {
      return _extraData;
    }
    set
    {
      __isset.extraData = true;
      this._extraData = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sessionId;
    public bool sessionIp;
    public bool fromGate;
    public bool fromWorker;
    public bool toWorker;
    public bool extraData;
  }

  public SessionEnterWorkerReq() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I64) {
            SessionId = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            SessionIp = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            FromGate = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.String) {
            FromWorker = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            ToWorker = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.String) {
            ExtraData = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("SessionEnterWorkerReq");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.sessionId) {
      field.Name = "sessionId";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SessionId);
      oprot.WriteFieldEnd();
    }
    if (SessionIp != null && __isset.sessionIp) {
      field.Name = "sessionIp";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SessionIp);
      oprot.WriteFieldEnd();
    }
    if (FromGate != null && __isset.fromGate) {
      field.Name = "fromGate";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FromGate);
      oprot.WriteFieldEnd();
    }
    if (FromWorker != null && __isset.fromWorker) {
      field.Name = "fromWorker";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FromWorker);
      oprot.WriteFieldEnd();
    }
    if (ToWorker != null && __isset.toWorker) {
      field.Name = "toWorker";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ToWorker);
      oprot.WriteFieldEnd();
    }
    if (ExtraData != null && __isset.extraData) {
      field.Name = "extraData";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(ExtraData);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("SessionEnterWorkerReq(");
    sb.Append("SessionId: ");
    sb.Append(SessionId);
    sb.Append(",SessionIp: ");
    sb.Append(SessionIp);
    sb.Append(",FromGate: ");
    sb.Append(FromGate);
    sb.Append(",FromWorker: ");
    sb.Append(FromWorker);
    sb.Append(",ToWorker: ");
    sb.Append(ToWorker);
    sb.Append(",ExtraData: ");
    sb.Append(ExtraData);
    sb.Append(")");
    return sb.ToString();
  }

}

