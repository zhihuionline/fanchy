/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef msgTypeS_H
#define msgTypeS_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace msgtype {

struct PropTypeDef {
  enum type {
    HP = 1,
    MP = 2,
    HP_MAX = 3,
    MP_MAX = 4,
    PHYSIC_ATTACK_MIN = 5,
    PHYSIC_ATTACK_MAX = 6,
    MAGIC_ATTACK_MIN = 7,
    MAGIC_ATTACK_MAX = 8,
    PHYSIC_DEFEND_MIN = 9,
    PHYSIC_DEFEND_MAX = 10,
    MAGIC_DEFEND_MIN = 11,
    MAGIC_DEFEND_MAX = 12,
    CRIT = 13,
    HIT = 14,
    AVOID = 15,
    ATTACK_SPEED = 16,
    ATTACK_SING = 17,
    ATTACK_INTERVAL = 18,
    ATTACK_DISTANCE = 19,
    MOVE_SPEED = 20,
    HURT_ABSORB = 21,
    HP_ABSORB = 22
  };
};

extern const std::map<int, const char*> _PropTypeDef_VALUES_TO_NAMES;

struct ClientCmd {
  enum type {
    LOGIN = 1,
    RAND_NAME = 8,
    DEL_ROLE = 9,
    CREATE_ROLE = 10,
    SELECT_ROLE = 11,
    ENTER_MAP = 12,
    MOVE = 13,
    QUERY_SKILL = 14,
    LEARN_SKILL = 15,
    USE_SKILL = 16,
    QUERY_TASK_LIST = 17,
    UPDATE_TASK_STATUS = 18,
    QUERY_PKG = 19,
    ARRANGE_PKG = 20,
    QUERY_EQUIP = 21,
    EQUIP_ITEM = 22,
    UNEQUIP_ITEM = 23,
    THROW_ITEM = 24,
    PICKUP_ITEM = 25,
    STRENGTHEN_ITEM = 26,
    CLICK_NPC = 27,
    GET_FRIENDLIST = 28,
    FRIENDLIST_OPS = 29,
    CHAT_OPS = 30,
    SERVER_CALLBACK = 50,
    USE_ITEM = 51,
    DIEJIA_ITEM = 52,
    UPDATE_SKILL_POS = 53,
    MAKE_ITEM = 54,
    INHERIT_ITEM = 55,
    REPO_ITEM_OPS = 56,
    EXCHANGE_OPS = 57,
    MONEY_BANK_QUERY = 58,
    MONEY_BANK_OPS = 59,
    ITEM_EXTRA_OPS = 60,
    AUCTION_OPS = 61,
    GET_TEAMLIST = 70,
    TEAMLIST_OPS = 71,
    GET_GUILDINFO = 80,
    GET_USER_GUILD_INFO = 81,
    GUILD_OPS = 82,
    GUILD_INFO_OPS = 83,
    GUILD_LEVEL_OPS = 84,
    GUILD_WAR_OPS = 85,
    GUILD_CITYWAR_OPS = 86,
    COLLECT_OPS = 90,
    TRANSFER_POINT_OPS = 91,
    PET_QUERY = 100,
    PET_EGG_START = 101,
    PET_EGG_COMPLETE = 102,
    PET_FEED = 103,
    PET_OUT = 104,
    PET_IN = 105,
    BROTHER_QUERY = 110,
    BROTHER_OPS = 111,
    MARRIAGE_OPS = 120,
    ARENA_OPS = 130,
    QIECUO_OPS = 131,
    ATTACK_MODE_OPS = 132,
    HELP_ATTACK_OPS = 133,
    XIBAI_OPS = 134,
    MAIL_OPS = 140,
    RANK_OPS = 150,
    HEART_BEAT = 160,
    DAILY_LOGIN_OPS = 170
  };
};

extern const std::map<int, const char*> _ClientCmd_VALUES_TO_NAMES;

struct ServerCmd {
  enum type {
    USER_INFO = 1,
    FRIENDLIST = 2,
    LOGOUT = 3,
    ERROR_MSG = 4,
    RELOGIN = 5,
    RAND_NAME = 8,
    DEL_ROLE = 9,
    CREATE_ROLE_RET = 10,
    ENTER_MAP = 11,
    LEAVE_MAP = 12,
    MOVE = 13,
    UPDATE_EXP = 14,
    QUERY_SKILL = 15,
    LEARN_SKILL = 16,
    USE_SKILL = 17,
    HURT_RESULT = 18,
    MONSTER_ENTER_MAP = 19,
    QUERY_TASK_LIST = 20,
    UPDATE_TASK_STATUS = 21,
    UPDATE_PROP = 22,
    SYNC_HPMP = 23,
    QUERY_PKG = 24,
    QUERY_EQUIP = 25,
    EQUIP_ITEM = 26,
    UNEQUIP_ITEM = 27,
    ITEM_ENTER_MAP = 28,
    THROW_ITEM = 29,
    PICKUP_ITEM = 30,
    STRENGTHEN_ITEM = 31,
    NPC_ENTER_MAP = 32,
    CLICK_NPC = 33,
    FRIENDLIST_MSG = 34,
    FRIEHND_MSG = 35,
    CHAT_MSG = 36,
    TEAMLIST_MSG = 37,
    TEAM_MSG = 38,
    GUILDINFO_MSG = 39,
    GUILD_INFO_LIST_MSG = 40,
    GUILD_OPS_MSG = 41,
    GUILD_INFO_MSG = 42,
    GUILD_LEVEL_MSG = 43,
    GUILD_WAR_OPS = 44,
    CHANGE_APPR = 45,
    GUILD_CITYWAR_MSG = 46,
    SHOW_TASK_PANEL = 50,
    USE_ITEM = 51,
    DIEJIA_ITEM = 52,
    UPDATE_SKILL_POS = 53,
    MAKE_ITEM = 54,
    INHERIT_ITEM = 55,
    UPDATE_BUFF = 56,
    MONSTER_BURST_ITEMS = 57,
    REPO_ITEM_OPS = 58,
    EXCHANGE_OPS = 59,
    MONEY_BANK_QUERY = 60,
    MONEY_BANK_OPS = 61,
    ITEM_EXTRA_OPS = 62,
    AUCTION_OPS = 63,
    UPDATE_PET_EXP = 100,
    PET_QUERY = 101,
    PET_OUT = 102,
    PET_IN = 103,
    SHOW_PLAY = 110,
    SHOW_UI = 111,
    COLLECT_OPS = 120,
    COPYMAP_START = 130,
    COPYMAP_END = 131,
    BROTHER_OPS_MSG = 132,
    MARRIAGE_OPS_MSG = 150,
    MAIL_OPS_MSG = 160,
    ARENA_OPS = 170,
    QIECUO_OPS = 171,
    ATTACK_MODE_OPS = 172,
    PK_SIN_UPDATE_OPS = 173,
    HELP_ATTACK_OPS = 174,
    REBORN = 175,
    XIBAI_OPS = 176,
    RANK_OPS_MSG = 177,
    SHOW_EFFECT = 180,
    HEART_BEAT = 190,
    DAILY_LOGIN_OPS_MSG = 200
  };
};

extern const std::map<int, const char*> _ServerCmd_VALUES_TO_NAMES;

struct GuildLevelClientCmd {
  enum type {
    UP_GUILD_LEVEL = 0,
    UP_GUILD_EXP = 1
  };
};

extern const std::map<int, const char*> _GuildLevelClientCmd_VALUES_TO_NAMES;

struct GuildInfoClientCmd {
  enum type {
    GET_GUILD_ALL = 0,
    GET_GUILD_BY_NAME = 1
  };
};

extern const std::map<int, const char*> _GuildInfoClientCmd_VALUES_TO_NAMES;

struct GuildOpsClientCmd {
  enum type {
    CREATE_GUILD = 0,
    REQUEST_ADD_GUILD = 1,
    VERIFY_REQUEST_ADD_GUILD = 2,
    REFUSE_REQUEST_ADD_GUILD = 3,
    INVITE_ADD_GUILD = 4,
    VERIFY_INVIT_ADD_GUILD = 5,
    REFUSE_INVITT_ADD_GUILD = 6,
    EXIT_GUILD = 7,
    DEL_GUILD_MEMBER = 8,
    UP_GUILD_LEADER = 9,
    UP_GUILD_SECOND_LEADER = 10,
    UP_MEMBER = 11,
    OPEN_COPY_MAP = 12,
    ENTER_COPY_MAP = 13
  };
};

extern const std::map<int, const char*> _GuildOpsClientCmd_VALUES_TO_NAMES;

struct GuildPostCmd {
  enum type {
    MEMBER = 0,
    GUILD_LEADER = 1,
    GUILD_SECOND_LEADER = 2
  };
};

extern const std::map<int, const char*> _GuildPostCmd_VALUES_TO_NAMES;

struct GuildLevelCmd {
  enum type {
    GUILD_LEVRL_1 = 0,
    GUILD_LEVRL_2 = 1,
    GUILD_LEVRL_3 = 2,
    GUILD_LEVRL_4 = 3,
    GUILD_LEVRL_5 = 4,
    GUILD_LEVRL_6 = 5,
    GUILD_LEVRL_7 = 6
  };
};

extern const std::map<int, const char*> _GuildLevelCmd_VALUES_TO_NAMES;

struct TaskStatus {
  enum type {
    INIT = 0,
    ACCEPT = 1,
    DONE = 2,
    FINISH = 3
  };
};

extern const std::map<int, const char*> _TaskStatus_VALUES_TO_NAMES;

struct TaskTypeDef {
  enum type {
    MAIN_TASK = 0,
    DAILY_TASK = 1,
    BRANCH_TASK = 2
  };
};

extern const std::map<int, const char*> _TaskTypeDef_VALUES_TO_NAMES;

struct TaskActionDef {
  enum type {
    NONE_ACTION = 0,
    CHAT_NPC = 1,
    KILL_MONSTER = 2,
    EXPLORE = 3,
    COLLECT = 4
  };
};

extern const std::map<int, const char*> _TaskActionDef_VALUES_TO_NAMES;

struct ECOLOR {
  enum type {
    BLUE = 1,
    YELLOW = 2
  };
};

extern const std::map<int, const char*> _ECOLOR_VALUES_TO_NAMES;

struct FriendOpsClientCmd {
  enum type {
    INVITE_ADD_LISTFRIEND = 0,
    VERIFY_ADD_LISTFRIEND = 1,
    REFUSE_ADD_LISTFRIEND = 2,
    DEL_LISTFRIEND = 3,
    ADD_ENEMY = 4,
    DEL_ENEMY = 5,
    ADD_SHIELD = 6,
    DEL_SHIELD = 7
  };
};

extern const std::map<int, const char*> _FriendOpsClientCmd_VALUES_TO_NAMES;

struct FriendListClientCmd {
  enum type {
    GET_FRIENDLIST = 0,
    GET_FRIENDLIST_TEMP = 1,
    GET_ENEMY = 2,
    JUMP_ENEMY = 3
  };
};

extern const std::map<int, const char*> _FriendListClientCmd_VALUES_TO_NAMES;

struct ChatMsgCmd {
  enum type {
    MapCHAT = 0,
    PERSONCHAT = 1,
    WORLDCHAT = 2,
    TEAMCHAT = 3,
    GUILDCHAT = 4,
    SYSTEMCHAT = 5
  };
};

extern const std::map<int, const char*> _ChatMsgCmd_VALUES_TO_NAMES;

struct TeamClientCmd {
  enum type {
    INVITE_ADD_TEAM = 0,
    VERIFY_INVIT_ADD_TEAM = 1,
    REFUSE_INVITT_ADD_TEAM = 2,
    DEL_TEAMPLAYER = 3,
    QUIT_TEAM = 4,
    REPLACE_TEAMLEADER = 5
  };
};

extern const std::map<int, const char*> _TeamClientCmd_VALUES_TO_NAMES;

struct TeamListClientCmd {
  enum type {
    GET_TEAMLIST = 0
  };
};

extern const std::map<int, const char*> _TeamListClientCmd_VALUES_TO_NAMES;

struct BrotherClientCmd {
  enum type {
    INVITE_ADD_BROTHER = 0,
    VERIFY_INVIT_ADD_BROTHER = 1,
    REFUSE_INVITT_ADD_BROTHER = 2,
    CONFIRM_INVIT_ADD_BROTHER = 3,
    QUIT_BROTHER = 4,
    GET_BROTHERLIST = 5,
    CONSULT_QUIT_BROTHER = 6,
    CANCLE_QUIT_BROTHER = 7,
    DOWN_LINE_BROTHER = 8,
    LEARN_BRO_SKILL = 9
  };
};

extern const std::map<int, const char*> _BrotherClientCmd_VALUES_TO_NAMES;

struct BuffType {
  enum type {
    XUAN_YUN = 1,
    JIAN_SU = 2,
    SHEN_MING_HU_TI = 3,
    GUWU_SHIQI = 4,
    ZHIYUSHU = 5,
    DEFEND = 6
  };
};

extern const std::map<int, const char*> _BuffType_VALUES_TO_NAMES;

struct EffectType {
  enum type {
    EFFECT_ZHUO_SHAO = 1
  };
};

extern const std::map<int, const char*> _EffectType_VALUES_TO_NAMES;

struct EUIType {
  enum type {
    UI_JIEYI = 1,
    UI_JIEHUN = 2,
    UI_DANBAOJIN = 3,
    UI_QIANGHUA = 4,
    UI_HAHGHUI = 5,
    UI_PAIMAI = 6,
    UI_CANGKU = 7,
    UI_QIANZHUANG = 8
  };
};

extern const std::map<int, const char*> _EUIType_VALUES_TO_NAMES;

struct MarriageHousePos {
  enum type {
    MARRY_HOUSE_POS_1 = 0,
    MARRY_HOUSE_POS_2 = 1,
    MARRY_HOUSE_POS_3 = 2,
    MARRY_HOUSE_POS_4 = 3,
    MARRY_HOUSE_POS_5 = 4,
    MARRY_HOUSE_POS_6 = 5,
    MARRY_HOUSE_POS_MAX = 6
  };
};

extern const std::map<int, const char*> _MarriageHousePos_VALUES_TO_NAMES;

struct MarriageClientCmd {
  enum type {
    MARRY_APPLY_TASK = 0,
    MARRY_COMMIT_TASK = 1,
    MARRY_SEND = 2,
    MARRY_ATTEND_WEEDING = 3,
    MARRY_NEW_LIST = 4,
    MARRY_VISIT_HOUSE = 5,
    MARRY_SET_HOUSE_ITEM = 6,
    MARRY_LEARN_COUPLE_SKILL = 7,
    MARRY_DIVORCE_NORMAL = 8,
    MARRY_DIVORCE_FORCE = 9,
    MARRY_QUERY_STATUS = 10,
    MARRY_QUERY_ALL_MARRIAGE = 12,
    MARRY_GIVEUP_TASK = 13,
    MARRY_APPLY_WEDDING = 14,
    MARRY_WEDDING_START = 15,
    MARRY_DIVORCE_QUIT = 16,
    MARRY_OFFLINE = 17
  };
};

extern const std::map<int, const char*> _MarriageClientCmd_VALUES_TO_NAMES;

struct MarryStatusCmd {
  enum type {
    MARRY_STATUS_NOT = 0,
    MARRY_STATUS_TASK_GO = 1,
    MARRY_STATUS_MARRIED = 2,
    MARRY_STATUS_DIVORCING = 3,
    MARRY_STATUS_TASK_FINISH = 4
  };
};

extern const std::map<int, const char*> _MarryStatusCmd_VALUES_TO_NAMES;

struct WeddingFlagCmd {
  enum type {
    WEDDING_NOT_APPLY = 0,
    WEDDING_APPLYED = 1,
    WEDDING_FINISH = 2,
    WEDDING_FAIL = 3
  };
};

extern const std::map<int, const char*> _WeddingFlagCmd_VALUES_TO_NAMES;

struct MailMsgType {
  enum type {
    MAIL_MSG_FRIEND = 0,
    MAIL_MSG_GUILD = 1,
    MAIL_MSG_SYSTEM = 2
  };
};

extern const std::map<int, const char*> _MailMsgType_VALUES_TO_NAMES;

struct MailOpsCmd {
  enum type {
    MAIL_OP_ALL = 0,
    MAIL_OP_SEND = 1,
    MAIL_OP_DEL = 2,
    MAIL_OP_BACK = 3,
    MAIL_OP_TAKE_ATTACH = 4,
    MAIL_OP_GET_NEW = 5,
    MAIL_OP_MARK_READ = 6
  };
};

extern const std::map<int, const char*> _MailOpsCmd_VALUES_TO_NAMES;

struct MailStatusType {
  enum type {
    MAIL_STATUS_UNREAD = 0,
    MAIL_STATUS_READ = 1,
    MAIL_STATUS_BACKED = 2
  };
};

extern const std::map<int, const char*> _MailStatusType_VALUES_TO_NAMES;

struct MailAttachType {
  enum type {
    MAIL_ATTACH_ITEM = 0,
    MAIL_ATTACH_EXP = 1,
    MAIL_ATTACH_GOLD = 2
  };
};

extern const std::map<int, const char*> _MailAttachType_VALUES_TO_NAMES;

struct EATTACK_MODE {
  enum type {
    PEACE = 0,
    ALL_ATTACK = 1,
    GUILD = 2,
    TEAM = 3
  };
};

extern const std::map<int, const char*> _EATTACK_MODE_VALUES_TO_NAMES;

struct RankOpsCmd {
  enum type {
    GET_RANK_INFO = 0
  };
};

extern const std::map<int, const char*> _RankOpsCmd_VALUES_TO_NAMES;

struct RankRefreshType {
  enum type {
    NONE_VALUE = 0,
    DAILY = 1
  };
};

extern const std::map<int, const char*> _RankRefreshType_VALUES_TO_NAMES;

struct RankType {
  enum type {
    NONE_VALUE = 0,
    FULL_FIGHTPOWER = 1,
    LEVEL = 2,
    GOLD = 3,
    WUJIANG_FIGHTPOWER = 4,
    CESHI_FIGHTPOWER = 5,
    GONGJIAN_FIGHTPOWER = 6,
    SHUSHI_FIGHTPOER = 7,
    JUNTUAN_FIGHTPOWER = 8,
    JUNTUAN_LEVEL = 9,
    ZHANLING_COUNT = 10,
    BROTHER_FIGHTPOWER = 11,
    MARRY_FIGHTPOWER = 12,
    MAX_VALUE = 13
  };
};

extern const std::map<int, const char*> _RankType_VALUES_TO_NAMES;

struct GuildWarOpsCmd {
  enum type {
    APPLY_WAR = 0,
    WAR_START = 1,
    WAR_END = 2,
    WAR_LIST = 3,
    WAR_CANCEL_APPLY = 4
  };
};

extern const std::map<int, const char*> _GuildWarOpsCmd_VALUES_TO_NAMES;

struct GuildCityWarOpsCmd {
  enum type {
    APPLY_CITYWAR = 0,
    CITYWAR_START = 1,
    CITYWAR_END = 2,
    CITYWAR_LIST = 3,
    CITYWAR_INFO = 4,
    CITYWAR_CANCEL = 5
  };
};

extern const std::map<int, const char*> _GuildCityWarOpsCmd_VALUES_TO_NAMES;

struct DailyLoginRewardType {
  enum type {
    DAILY_REWARD_SEVEN = 0,
    DAILY_REWARD_ONLINE = 1,
    DAILY_REWARD_INVITE = 2
  };
};

extern const std::map<int, const char*> _DailyLoginRewardType_VALUES_TO_NAMES;

struct DailyLoginOpsCmd {
  enum type {
    DAILY_OP_ALL_INFO = 0,
    DAILY_OP_SEVEN_REWARD = 1,
    DAILY_OP_ONLINE_REWARD = 2,
    DAILY_OP_INVITE_REWARD = 3
  };
};

extern const std::map<int, const char*> _DailyLoginOpsCmd_VALUES_TO_NAMES;

typedef struct _GuildLevelOpsMsgReq__isset {
  _GuildLevelOpsMsgReq__isset() : opstype(true), gold(true) {}
  bool opstype;
  bool gold;
} _GuildLevelOpsMsgReq__isset;

class GuildLevelOpsMsgReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  GuildLevelOpsMsgReq() : opstype(0), gold(0LL) {
  }

  virtual ~GuildLevelOpsMsgReq() throw() {}

  int16_t opstype;
  int64_t gold;

  _GuildLevelOpsMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_gold(const int64_t val) {
    gold = val;
  }

  bool operator == (const GuildLevelOpsMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(gold == rhs.gold))
      return false;
    return true;
  }
  bool operator != (const GuildLevelOpsMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildLevelOpsMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildLevelOpsMsgReq &a, GuildLevelOpsMsgReq &b);

typedef struct _UserGuildInfoMsg__isset {
  _UserGuildInfoMsg__isset() : uid(true), name(true), post(true), contribute(true), ranking(true), level(true), job(true) {}
  bool uid;
  bool name;
  bool post;
  bool contribute;
  bool ranking;
  bool level;
  bool job;
} _UserGuildInfoMsg__isset;

class UserGuildInfoMsg {
 public:

  static const char* ascii_fingerprint; // = "2B9A2F494ACEFED4382427C582FDC550";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x9A,0x2F,0x49,0x4A,0xCE,0xFE,0xD4,0x38,0x24,0x27,0xC5,0x82,0xFD,0xC5,0x50};

  UserGuildInfoMsg() : uid(0LL), name(""), post(0LL), contribute(0LL), ranking(0LL), level(0), job(0) {
  }

  virtual ~UserGuildInfoMsg() throw() {}

  int64_t uid;
  std::string name;
  int64_t post;
  int64_t contribute;
  int64_t ranking;
  int32_t level;
  int16_t job;

  _UserGuildInfoMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_post(const int64_t val) {
    post = val;
  }

  void __set_contribute(const int64_t val) {
    contribute = val;
  }

  void __set_ranking(const int64_t val) {
    ranking = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  bool operator == (const UserGuildInfoMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(post == rhs.post))
      return false;
    if (!(contribute == rhs.contribute))
      return false;
    if (!(ranking == rhs.ranking))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(job == rhs.job))
      return false;
    return true;
  }
  bool operator != (const UserGuildInfoMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserGuildInfoMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserGuildInfoMsg &a, UserGuildInfoMsg &b);

typedef struct _GuildLevelOpsMsgRet__isset {
  _GuildLevelOpsMsgRet__isset() : opstype(true), guildLevel(true), uid(true), name(true), gold(true), ranking(true), guildMemberList(false) {}
  bool opstype;
  bool guildLevel;
  bool uid;
  bool name;
  bool gold;
  bool ranking;
  bool guildMemberList;
} _GuildLevelOpsMsgRet__isset;

class GuildLevelOpsMsgRet {
 public:

  static const char* ascii_fingerprint; // = "CCE56901B2E7061CA1EAAFE39DEF629B";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0xE5,0x69,0x01,0xB2,0xE7,0x06,0x1C,0xA1,0xEA,0xAF,0xE3,0x9D,0xEF,0x62,0x9B};

  GuildLevelOpsMsgRet() : opstype(0), guildLevel(0LL), uid(0LL), name(""), gold(0LL), ranking(0LL) {
  }

  virtual ~GuildLevelOpsMsgRet() throw() {}

  int16_t opstype;
  int64_t guildLevel;
  int64_t uid;
  std::string name;
  int64_t gold;
  int64_t ranking;
  std::vector<UserGuildInfoMsg>  guildMemberList;

  _GuildLevelOpsMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_guildLevel(const int64_t val) {
    guildLevel = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_gold(const int64_t val) {
    gold = val;
  }

  void __set_ranking(const int64_t val) {
    ranking = val;
  }

  void __set_guildMemberList(const std::vector<UserGuildInfoMsg> & val) {
    guildMemberList = val;
  }

  bool operator == (const GuildLevelOpsMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(guildLevel == rhs.guildLevel))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(ranking == rhs.ranking))
      return false;
    if (!(guildMemberList == rhs.guildMemberList))
      return false;
    return true;
  }
  bool operator != (const GuildLevelOpsMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildLevelOpsMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildLevelOpsMsgRet &a, GuildLevelOpsMsgRet &b);

typedef struct _GuildInfoMsgReq__isset {
  _GuildInfoMsgReq__isset() : guildImage(true), guildNotice(true) {}
  bool guildImage;
  bool guildNotice;
} _GuildInfoMsgReq__isset;

class GuildInfoMsgReq {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  GuildInfoMsgReq() : guildImage(""), guildNotice("") {
  }

  virtual ~GuildInfoMsgReq() throw() {}

  std::string guildImage;
  std::string guildNotice;

  _GuildInfoMsgReq__isset __isset;

  void __set_guildImage(const std::string& val) {
    guildImage = val;
  }

  void __set_guildNotice(const std::string& val) {
    guildNotice = val;
  }

  bool operator == (const GuildInfoMsgReq & rhs) const
  {
    if (!(guildImage == rhs.guildImage))
      return false;
    if (!(guildNotice == rhs.guildNotice))
      return false;
    return true;
  }
  bool operator != (const GuildInfoMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildInfoMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildInfoMsgReq &a, GuildInfoMsgReq &b);

typedef struct _GuildInfoOpsMsgRet__isset {
  _GuildInfoOpsMsgRet__isset() : guildImage(true), guildNotice(true) {}
  bool guildImage;
  bool guildNotice;
} _GuildInfoOpsMsgRet__isset;

class GuildInfoOpsMsgRet {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  GuildInfoOpsMsgRet() : guildImage(""), guildNotice("") {
  }

  virtual ~GuildInfoOpsMsgRet() throw() {}

  std::string guildImage;
  std::string guildNotice;

  _GuildInfoOpsMsgRet__isset __isset;

  void __set_guildImage(const std::string& val) {
    guildImage = val;
  }

  void __set_guildNotice(const std::string& val) {
    guildNotice = val;
  }

  bool operator == (const GuildInfoOpsMsgRet & rhs) const
  {
    if (!(guildImage == rhs.guildImage))
      return false;
    if (!(guildNotice == rhs.guildNotice))
      return false;
    return true;
  }
  bool operator != (const GuildInfoOpsMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildInfoOpsMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildInfoOpsMsgRet &a, GuildInfoOpsMsgRet &b);

typedef struct _GuildInfoMsg__isset {
  _GuildInfoMsg__isset() : guildID(true), guildName(true), guildPlayerNumber(true), guildLeaderName(true), guildNotice(true), levelRanking(true), guildImage(true), guildlevel(true) {}
  bool guildID;
  bool guildName;
  bool guildPlayerNumber;
  bool guildLeaderName;
  bool guildNotice;
  bool levelRanking;
  bool guildImage;
  bool guildlevel;
} _GuildInfoMsg__isset;

class GuildInfoMsg {
 public:

  static const char* ascii_fingerprint; // = "FF5BDB032217F31C09E1232FCFF60CE6";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x5B,0xDB,0x03,0x22,0x17,0xF3,0x1C,0x09,0xE1,0x23,0x2F,0xCF,0xF6,0x0C,0xE6};

  GuildInfoMsg() : guildID(0LL), guildName(""), guildPlayerNumber(0LL), guildLeaderName(""), guildNotice(""), levelRanking(0LL), guildImage(""), guildlevel(0LL) {
  }

  virtual ~GuildInfoMsg() throw() {}

  int64_t guildID;
  std::string guildName;
  int64_t guildPlayerNumber;
  std::string guildLeaderName;
  std::string guildNotice;
  int64_t levelRanking;
  std::string guildImage;
  int64_t guildlevel;

  _GuildInfoMsg__isset __isset;

  void __set_guildID(const int64_t val) {
    guildID = val;
  }

  void __set_guildName(const std::string& val) {
    guildName = val;
  }

  void __set_guildPlayerNumber(const int64_t val) {
    guildPlayerNumber = val;
  }

  void __set_guildLeaderName(const std::string& val) {
    guildLeaderName = val;
  }

  void __set_guildNotice(const std::string& val) {
    guildNotice = val;
  }

  void __set_levelRanking(const int64_t val) {
    levelRanking = val;
  }

  void __set_guildImage(const std::string& val) {
    guildImage = val;
  }

  void __set_guildlevel(const int64_t val) {
    guildlevel = val;
  }

  bool operator == (const GuildInfoMsg & rhs) const
  {
    if (!(guildID == rhs.guildID))
      return false;
    if (!(guildName == rhs.guildName))
      return false;
    if (!(guildPlayerNumber == rhs.guildPlayerNumber))
      return false;
    if (!(guildLeaderName == rhs.guildLeaderName))
      return false;
    if (!(guildNotice == rhs.guildNotice))
      return false;
    if (!(levelRanking == rhs.levelRanking))
      return false;
    if (!(guildImage == rhs.guildImage))
      return false;
    if (!(guildlevel == rhs.guildlevel))
      return false;
    return true;
  }
  bool operator != (const GuildInfoMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildInfoMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildInfoMsg &a, GuildInfoMsg &b);

typedef struct _GuildInfoMsgRet__isset {
  _GuildInfoMsgRet__isset() : type(true), allGuildInfo(false) {}
  bool type;
  bool allGuildInfo;
} _GuildInfoMsgRet__isset;

class GuildInfoMsgRet {
 public:

  static const char* ascii_fingerprint; // = "06C7ED545C7323FD5436ED73447BA047";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0xC7,0xED,0x54,0x5C,0x73,0x23,0xFD,0x54,0x36,0xED,0x73,0x44,0x7B,0xA0,0x47};

  GuildInfoMsgRet() : type(0) {
  }

  virtual ~GuildInfoMsgRet() throw() {}

  int16_t type;
  std::vector<GuildInfoMsg>  allGuildInfo;

  _GuildInfoMsgRet__isset __isset;

  void __set_type(const int16_t val) {
    type = val;
  }

  void __set_allGuildInfo(const std::vector<GuildInfoMsg> & val) {
    allGuildInfo = val;
  }

  bool operator == (const GuildInfoMsgRet & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(allGuildInfo == rhs.allGuildInfo))
      return false;
    return true;
  }
  bool operator != (const GuildInfoMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildInfoMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildInfoMsgRet &a, GuildInfoMsgRet &b);

typedef struct _UserGuildListMsgRet__isset {
  _UserGuildListMsgRet__isset() : guildID(true), guildName(true), guildLevel(true), guildImage(true), guildPlayerNumber(true), guildMaxPlayerNumber(true), guildLeaderName(true), guildNotice(true), guildExp(true), guildUpdateExp(true), levelRanking(true), guildMemberList(false), guildPost(true), dateContribution(true), maxContribution(true), guildMemberTempList(false), copymapEndTm(true), typeCopyMap(true), warVsGuildInfo(false), tmWarStart(true) {}
  bool guildID;
  bool guildName;
  bool guildLevel;
  bool guildImage;
  bool guildPlayerNumber;
  bool guildMaxPlayerNumber;
  bool guildLeaderName;
  bool guildNotice;
  bool guildExp;
  bool guildUpdateExp;
  bool levelRanking;
  bool guildMemberList;
  bool guildPost;
  bool dateContribution;
  bool maxContribution;
  bool guildMemberTempList;
  bool copymapEndTm;
  bool typeCopyMap;
  bool warVsGuildInfo;
  bool tmWarStart;
} _UserGuildListMsgRet__isset;

class UserGuildListMsgRet {
 public:

  static const char* ascii_fingerprint; // = "DFDBDAE170185F596873DD396E092A90";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xDB,0xDA,0xE1,0x70,0x18,0x5F,0x59,0x68,0x73,0xDD,0x39,0x6E,0x09,0x2A,0x90};

  UserGuildListMsgRet() : guildID(0LL), guildName(""), guildLevel(0LL), guildImage(""), guildPlayerNumber(0LL), guildMaxPlayerNumber(0LL), guildLeaderName(""), guildNotice(""), guildExp(0LL), guildUpdateExp(0LL), levelRanking(0LL), guildPost(0LL), dateContribution(0LL), maxContribution(0LL), copymapEndTm(0), typeCopyMap(0), tmWarStart(0) {
  }

  virtual ~UserGuildListMsgRet() throw() {}

  int64_t guildID;
  std::string guildName;
  int64_t guildLevel;
  std::string guildImage;
  int64_t guildPlayerNumber;
  int64_t guildMaxPlayerNumber;
  std::string guildLeaderName;
  std::string guildNotice;
  int64_t guildExp;
  int64_t guildUpdateExp;
  int64_t levelRanking;
  std::vector<UserGuildInfoMsg>  guildMemberList;
  int64_t guildPost;
  int64_t dateContribution;
  int64_t maxContribution;
  std::vector<UserGuildInfoMsg>  guildMemberTempList;
  int32_t copymapEndTm;
  int16_t typeCopyMap;
  GuildInfoMsg warVsGuildInfo;
  int32_t tmWarStart;

  _UserGuildListMsgRet__isset __isset;

  void __set_guildID(const int64_t val) {
    guildID = val;
  }

  void __set_guildName(const std::string& val) {
    guildName = val;
  }

  void __set_guildLevel(const int64_t val) {
    guildLevel = val;
  }

  void __set_guildImage(const std::string& val) {
    guildImage = val;
  }

  void __set_guildPlayerNumber(const int64_t val) {
    guildPlayerNumber = val;
  }

  void __set_guildMaxPlayerNumber(const int64_t val) {
    guildMaxPlayerNumber = val;
  }

  void __set_guildLeaderName(const std::string& val) {
    guildLeaderName = val;
  }

  void __set_guildNotice(const std::string& val) {
    guildNotice = val;
  }

  void __set_guildExp(const int64_t val) {
    guildExp = val;
  }

  void __set_guildUpdateExp(const int64_t val) {
    guildUpdateExp = val;
  }

  void __set_levelRanking(const int64_t val) {
    levelRanking = val;
  }

  void __set_guildMemberList(const std::vector<UserGuildInfoMsg> & val) {
    guildMemberList = val;
  }

  void __set_guildPost(const int64_t val) {
    guildPost = val;
  }

  void __set_dateContribution(const int64_t val) {
    dateContribution = val;
  }

  void __set_maxContribution(const int64_t val) {
    maxContribution = val;
  }

  void __set_guildMemberTempList(const std::vector<UserGuildInfoMsg> & val) {
    guildMemberTempList = val;
  }

  void __set_copymapEndTm(const int32_t val) {
    copymapEndTm = val;
  }

  void __set_typeCopyMap(const int16_t val) {
    typeCopyMap = val;
  }

  void __set_warVsGuildInfo(const GuildInfoMsg& val) {
    warVsGuildInfo = val;
  }

  void __set_tmWarStart(const int32_t val) {
    tmWarStart = val;
  }

  bool operator == (const UserGuildListMsgRet & rhs) const
  {
    if (!(guildID == rhs.guildID))
      return false;
    if (!(guildName == rhs.guildName))
      return false;
    if (!(guildLevel == rhs.guildLevel))
      return false;
    if (!(guildImage == rhs.guildImage))
      return false;
    if (!(guildPlayerNumber == rhs.guildPlayerNumber))
      return false;
    if (!(guildMaxPlayerNumber == rhs.guildMaxPlayerNumber))
      return false;
    if (!(guildLeaderName == rhs.guildLeaderName))
      return false;
    if (!(guildNotice == rhs.guildNotice))
      return false;
    if (!(guildExp == rhs.guildExp))
      return false;
    if (!(guildUpdateExp == rhs.guildUpdateExp))
      return false;
    if (!(levelRanking == rhs.levelRanking))
      return false;
    if (!(guildMemberList == rhs.guildMemberList))
      return false;
    if (!(guildPost == rhs.guildPost))
      return false;
    if (!(dateContribution == rhs.dateContribution))
      return false;
    if (!(maxContribution == rhs.maxContribution))
      return false;
    if (!(guildMemberTempList == rhs.guildMemberTempList))
      return false;
    if (!(copymapEndTm == rhs.copymapEndTm))
      return false;
    if (!(typeCopyMap == rhs.typeCopyMap))
      return false;
    if (!(warVsGuildInfo == rhs.warVsGuildInfo))
      return false;
    if (!(tmWarStart == rhs.tmWarStart))
      return false;
    return true;
  }
  bool operator != (const UserGuildListMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserGuildListMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserGuildListMsgRet &a, UserGuildListMsgRet &b);

typedef struct _GuildMsgReq__isset {
  _GuildMsgReq__isset() : opstype(true), guildname(true), guildid(true), uid(true), name(true), typeCopyMap(true) {}
  bool opstype;
  bool guildname;
  bool guildid;
  bool uid;
  bool name;
  bool typeCopyMap;
} _GuildMsgReq__isset;

class GuildMsgReq {
 public:

  static const char* ascii_fingerprint; // = "7D02F571D1258500DE15770C82B16F4A";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x02,0xF5,0x71,0xD1,0x25,0x85,0x00,0xDE,0x15,0x77,0x0C,0x82,0xB1,0x6F,0x4A};

  GuildMsgReq() : opstype(0), guildname(""), guildid(0LL), uid(0LL), name(""), typeCopyMap(0) {
  }

  virtual ~GuildMsgReq() throw() {}

  int16_t opstype;
  std::string guildname;
  int64_t guildid;
  int64_t uid;
  std::string name;
  int16_t typeCopyMap;

  _GuildMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_guildname(const std::string& val) {
    guildname = val;
  }

  void __set_guildid(const int64_t val) {
    guildid = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_typeCopyMap(const int16_t val) {
    typeCopyMap = val;
  }

  bool operator == (const GuildMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(guildname == rhs.guildname))
      return false;
    if (!(guildid == rhs.guildid))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(typeCopyMap == rhs.typeCopyMap))
      return false;
    return true;
  }
  bool operator != (const GuildMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildMsgReq &a, GuildMsgReq &b);

typedef struct _GuildOpsMsgRet__isset {
  _GuildOpsMsgRet__isset() : opstype(true), guildid(true), guildname(true), userid(true), username(true), guildMemberList(false), copymapEndTm(true), typeCopyMap(true) {}
  bool opstype;
  bool guildid;
  bool guildname;
  bool userid;
  bool username;
  bool guildMemberList;
  bool copymapEndTm;
  bool typeCopyMap;
} _GuildOpsMsgRet__isset;

class GuildOpsMsgRet {
 public:

  static const char* ascii_fingerprint; // = "689A9B5349A90FE564EB1EC46E71E6AE";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x9A,0x9B,0x53,0x49,0xA9,0x0F,0xE5,0x64,0xEB,0x1E,0xC4,0x6E,0x71,0xE6,0xAE};

  GuildOpsMsgRet() : opstype(0), guildid(0LL), guildname(""), userid(0LL), username(""), copymapEndTm(0), typeCopyMap(0) {
  }

  virtual ~GuildOpsMsgRet() throw() {}

  int16_t opstype;
  int64_t guildid;
  std::string guildname;
  int64_t userid;
  std::string username;
  std::vector<UserGuildInfoMsg>  guildMemberList;
  int32_t copymapEndTm;
  int16_t typeCopyMap;

  _GuildOpsMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_guildid(const int64_t val) {
    guildid = val;
  }

  void __set_guildname(const std::string& val) {
    guildname = val;
  }

  void __set_userid(const int64_t val) {
    userid = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_guildMemberList(const std::vector<UserGuildInfoMsg> & val) {
    guildMemberList = val;
  }

  void __set_copymapEndTm(const int32_t val) {
    copymapEndTm = val;
  }

  void __set_typeCopyMap(const int16_t val) {
    typeCopyMap = val;
  }

  bool operator == (const GuildOpsMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(guildid == rhs.guildid))
      return false;
    if (!(guildname == rhs.guildname))
      return false;
    if (!(userid == rhs.userid))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(guildMemberList == rhs.guildMemberList))
      return false;
    if (!(copymapEndTm == rhs.copymapEndTm))
      return false;
    if (!(typeCopyMap == rhs.typeCopyMap))
      return false;
    return true;
  }
  bool operator != (const GuildOpsMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildOpsMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildOpsMsgRet &a, GuildOpsMsgRet &b);

typedef struct _UpdateExpRet__isset {
  _UpdateExpRet__isset() : exp(true), level(true), expMax(true) {}
  bool exp;
  bool level;
  bool expMax;
} _UpdateExpRet__isset;

class UpdateExpRet {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  UpdateExpRet() : exp(0), level(0), expMax(0) {
  }

  virtual ~UpdateExpRet() throw() {}

  int32_t exp;
  int32_t level;
  int32_t expMax;

  _UpdateExpRet__isset __isset;

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_expMax(const int32_t val) {
    expMax = val;
  }

  bool operator == (const UpdateExpRet & rhs) const
  {
    if (!(exp == rhs.exp))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(expMax == rhs.expMax))
      return false;
    return true;
  }
  bool operator != (const UpdateExpRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateExpRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateExpRet &a, UpdateExpRet &b);

typedef struct _UpdatePetExpRet__isset {
  _UpdatePetExpRet__isset() : exp(true), level(true), expMax(true), uid(true) {}
  bool exp;
  bool level;
  bool expMax;
  bool uid;
} _UpdatePetExpRet__isset;

class UpdatePetExpRet {
 public:

  static const char* ascii_fingerprint; // = "2E8F302A6C4CB69C9302BBFE3E138479";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x8F,0x30,0x2A,0x6C,0x4C,0xB6,0x9C,0x93,0x02,0xBB,0xFE,0x3E,0x13,0x84,0x79};

  UpdatePetExpRet() : exp(0), level(0), expMax(0), uid(0LL) {
  }

  virtual ~UpdatePetExpRet() throw() {}

  int32_t exp;
  int32_t level;
  int32_t expMax;
  int64_t uid;

  _UpdatePetExpRet__isset __isset;

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_expMax(const int32_t val) {
    expMax = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const UpdatePetExpRet & rhs) const
  {
    if (!(exp == rhs.exp))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(expMax == rhs.expMax))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UpdatePetExpRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdatePetExpRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdatePetExpRet &a, UpdatePetExpRet &b);

typedef struct _LearnSkillReq__isset {
  _LearnSkillReq__isset() : skillId(true), skillLevel(true) {}
  bool skillId;
  bool skillLevel;
} _LearnSkillReq__isset;

class LearnSkillReq {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  LearnSkillReq() : skillId(0), skillLevel(0) {
  }

  virtual ~LearnSkillReq() throw() {}

  int16_t skillId;
  int16_t skillLevel;

  _LearnSkillReq__isset __isset;

  void __set_skillId(const int16_t val) {
    skillId = val;
  }

  void __set_skillLevel(const int16_t val) {
    skillLevel = val;
  }

  bool operator == (const LearnSkillReq & rhs) const
  {
    if (!(skillId == rhs.skillId))
      return false;
    if (!(skillLevel == rhs.skillLevel))
      return false;
    return true;
  }
  bool operator != (const LearnSkillReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LearnSkillReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LearnSkillReq &a, LearnSkillReq &b);

typedef struct _LearnSkillRet__isset {
  _LearnSkillRet__isset() : skillId(true), skillLevel(true), exp(true) {}
  bool skillId;
  bool skillLevel;
  bool exp;
} _LearnSkillRet__isset;

class LearnSkillRet {
 public:

  static const char* ascii_fingerprint; // = "F5A017B2A1C387FD044C41CD46A76E4D";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xA0,0x17,0xB2,0xA1,0xC3,0x87,0xFD,0x04,0x4C,0x41,0xCD,0x46,0xA7,0x6E,0x4D};

  LearnSkillRet() : skillId(0), skillLevel(0), exp(0) {
  }

  virtual ~LearnSkillRet() throw() {}

  int16_t skillId;
  int16_t skillLevel;
  int32_t exp;

  _LearnSkillRet__isset __isset;

  void __set_skillId(const int16_t val) {
    skillId = val;
  }

  void __set_skillLevel(const int16_t val) {
    skillLevel = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  bool operator == (const LearnSkillRet & rhs) const
  {
    if (!(skillId == rhs.skillId))
      return false;
    if (!(skillLevel == rhs.skillLevel))
      return false;
    if (!(exp == rhs.exp))
      return false;
    return true;
  }
  bool operator != (const LearnSkillRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LearnSkillRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LearnSkillRet &a, LearnSkillRet &b);

typedef struct _UseSkillReq__isset {
  _UseSkillReq__isset() : skillId(true), targetId(true) {}
  bool skillId;
  bool targetId;
} _UseSkillReq__isset;

class UseSkillReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  UseSkillReq() : skillId(0), targetId(0LL) {
  }

  virtual ~UseSkillReq() throw() {}

  int16_t skillId;
  int64_t targetId;

  _UseSkillReq__isset __isset;

  void __set_skillId(const int16_t val) {
    skillId = val;
  }

  void __set_targetId(const int64_t val) {
    targetId = val;
  }

  bool operator == (const UseSkillReq & rhs) const
  {
    if (!(skillId == rhs.skillId))
      return false;
    if (!(targetId == rhs.targetId))
      return false;
    return true;
  }
  bool operator != (const UseSkillReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseSkillReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UseSkillReq &a, UseSkillReq &b);

typedef struct _HPHurtRet__isset {
  _HPHurtRet__isset() : targetId(true), curHP(true), curMP(true), hurtHP(true), critFlag(true), hitFlag(true), anger(true), angerMax(true) {}
  bool targetId;
  bool curHP;
  bool curMP;
  bool hurtHP;
  bool critFlag;
  bool hitFlag;
  bool anger;
  bool angerMax;
} _HPHurtRet__isset;

class HPHurtRet {
 public:

  static const char* ascii_fingerprint; // = "A0B2AF69DE4621B7074F9A68E52A5ADC";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xB2,0xAF,0x69,0xDE,0x46,0x21,0xB7,0x07,0x4F,0x9A,0x68,0xE5,0x2A,0x5A,0xDC};

  HPHurtRet() : targetId(0LL), curHP(0), curMP(0), hurtHP(0), critFlag(0), hitFlag(0), anger(0), angerMax(0) {
  }

  virtual ~HPHurtRet() throw() {}

  int64_t targetId;
  int32_t curHP;
  int32_t curMP;
  int32_t hurtHP;
  int16_t critFlag;
  int16_t hitFlag;
  int32_t anger;
  int32_t angerMax;

  _HPHurtRet__isset __isset;

  void __set_targetId(const int64_t val) {
    targetId = val;
  }

  void __set_curHP(const int32_t val) {
    curHP = val;
  }

  void __set_curMP(const int32_t val) {
    curMP = val;
  }

  void __set_hurtHP(const int32_t val) {
    hurtHP = val;
  }

  void __set_critFlag(const int16_t val) {
    critFlag = val;
  }

  void __set_hitFlag(const int16_t val) {
    hitFlag = val;
  }

  void __set_anger(const int32_t val) {
    anger = val;
  }

  void __set_angerMax(const int32_t val) {
    angerMax = val;
  }

  bool operator == (const HPHurtRet & rhs) const
  {
    if (!(targetId == rhs.targetId))
      return false;
    if (!(curHP == rhs.curHP))
      return false;
    if (!(curMP == rhs.curMP))
      return false;
    if (!(hurtHP == rhs.hurtHP))
      return false;
    if (!(critFlag == rhs.critFlag))
      return false;
    if (!(hitFlag == rhs.hitFlag))
      return false;
    if (!(anger == rhs.anger))
      return false;
    if (!(angerMax == rhs.angerMax))
      return false;
    return true;
  }
  bool operator != (const HPHurtRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HPHurtRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HPHurtRet &a, HPHurtRet &b);

typedef struct _UseSkillRet__isset {
  _UseSkillRet__isset() : uid(true), skillId(true), targetId(true), nextCDMs(true), curHP(true), curMP(true), anger(true), angerMax(true), targetX(true), targetY(true) {}
  bool uid;
  bool skillId;
  bool targetId;
  bool nextCDMs;
  bool curHP;
  bool curMP;
  bool anger;
  bool angerMax;
  bool targetX;
  bool targetY;
} _UseSkillRet__isset;

class UseSkillRet {
 public:

  static const char* ascii_fingerprint; // = "962D67E7DD0DD0DD9EDEA0423A558AC8";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x2D,0x67,0xE7,0xDD,0x0D,0xD0,0xDD,0x9E,0xDE,0xA0,0x42,0x3A,0x55,0x8A,0xC8};

  UseSkillRet() : uid(0LL), skillId(0), targetId(0LL), nextCDMs(0), curHP(0), curMP(0), anger(0), angerMax(0), targetX(0), targetY(0) {
  }

  virtual ~UseSkillRet() throw() {}

  int64_t uid;
  int16_t skillId;
  int64_t targetId;
  int32_t nextCDMs;
  int32_t curHP;
  int32_t curMP;
  int32_t anger;
  int32_t angerMax;
  int32_t targetX;
  int32_t targetY;

  _UseSkillRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_skillId(const int16_t val) {
    skillId = val;
  }

  void __set_targetId(const int64_t val) {
    targetId = val;
  }

  void __set_nextCDMs(const int32_t val) {
    nextCDMs = val;
  }

  void __set_curHP(const int32_t val) {
    curHP = val;
  }

  void __set_curMP(const int32_t val) {
    curMP = val;
  }

  void __set_anger(const int32_t val) {
    anger = val;
  }

  void __set_angerMax(const int32_t val) {
    angerMax = val;
  }

  void __set_targetX(const int32_t val) {
    targetX = val;
  }

  void __set_targetY(const int32_t val) {
    targetY = val;
  }

  bool operator == (const UseSkillRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(skillId == rhs.skillId))
      return false;
    if (!(targetId == rhs.targetId))
      return false;
    if (!(nextCDMs == rhs.nextCDMs))
      return false;
    if (!(curHP == rhs.curHP))
      return false;
    if (!(curMP == rhs.curMP))
      return false;
    if (!(anger == rhs.anger))
      return false;
    if (!(angerMax == rhs.angerMax))
      return false;
    if (!(targetX == rhs.targetX))
      return false;
    if (!(targetY == rhs.targetY))
      return false;
    return true;
  }
  bool operator != (const UseSkillRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseSkillRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UseSkillRet &a, UseSkillRet &b);

typedef struct _SyncHpMpRet__isset {
  _SyncHpMpRet__isset() : uid(true), curHP(true), curMP(true) {}
  bool uid;
  bool curHP;
  bool curMP;
} _SyncHpMpRet__isset;

class SyncHpMpRet {
 public:

  static const char* ascii_fingerprint; // = "9C4E30169AD9E0914633984FE5C16314";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x4E,0x30,0x16,0x9A,0xD9,0xE0,0x91,0x46,0x33,0x98,0x4F,0xE5,0xC1,0x63,0x14};

  SyncHpMpRet() : uid(0LL), curHP(0), curMP(0) {
  }

  virtual ~SyncHpMpRet() throw() {}

  int64_t uid;
  int32_t curHP;
  int32_t curMP;

  _SyncHpMpRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_curHP(const int32_t val) {
    curHP = val;
  }

  void __set_curMP(const int32_t val) {
    curMP = val;
  }

  bool operator == (const SyncHpMpRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(curHP == rhs.curHP))
      return false;
    if (!(curMP == rhs.curMP))
      return false;
    return true;
  }
  bool operator != (const SyncHpMpRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncHpMpRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncHpMpRet &a, SyncHpMpRet &b);

typedef struct _Task__isset {
  _Task__isset() : taskId(true), taskType(true), status(true), action(true), object(true), value(true), destValue(true), name(true), targetDesc(true), acceptnpc(true), finishnpc(true), needlevel(true), gold(true), exp(true) {}
  bool taskId;
  bool taskType;
  bool status;
  bool action;
  bool object;
  bool value;
  bool destValue;
  bool name;
  bool targetDesc;
  bool acceptnpc;
  bool finishnpc;
  bool needlevel;
  bool gold;
  bool exp;
} _Task__isset;

class Task {
 public:

  static const char* ascii_fingerprint; // = "0EE64969ED2BF14C121C42E26F3D1415";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xE6,0x49,0x69,0xED,0x2B,0xF1,0x4C,0x12,0x1C,0x42,0xE2,0x6F,0x3D,0x14,0x15};

  Task() : taskId(0), taskType(0), status(0), action(0), object(0), value(0), destValue(0), name(""), targetDesc(""), acceptnpc(""), finishnpc(""), needlevel(0), gold(0), exp(0) {
  }

  virtual ~Task() throw() {}

  int32_t taskId;
  int16_t taskType;
  int16_t status;
  int32_t action;
  int32_t object;
  int32_t value;
  int32_t destValue;
  std::string name;
  std::string targetDesc;
  std::string acceptnpc;
  std::string finishnpc;
  int16_t needlevel;
  int32_t gold;
  int32_t exp;

  _Task__isset __isset;

  void __set_taskId(const int32_t val) {
    taskId = val;
  }

  void __set_taskType(const int16_t val) {
    taskType = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  void __set_action(const int32_t val) {
    action = val;
  }

  void __set_object(const int32_t val) {
    object = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  void __set_destValue(const int32_t val) {
    destValue = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_targetDesc(const std::string& val) {
    targetDesc = val;
  }

  void __set_acceptnpc(const std::string& val) {
    acceptnpc = val;
  }

  void __set_finishnpc(const std::string& val) {
    finishnpc = val;
  }

  void __set_needlevel(const int16_t val) {
    needlevel = val;
  }

  void __set_gold(const int32_t val) {
    gold = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  bool operator == (const Task & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(taskType == rhs.taskType))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(object == rhs.object))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(destValue == rhs.destValue))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(targetDesc == rhs.targetDesc))
      return false;
    if (!(acceptnpc == rhs.acceptnpc))
      return false;
    if (!(finishnpc == rhs.finishnpc))
      return false;
    if (!(needlevel == rhs.needlevel))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(exp == rhs.exp))
      return false;
    return true;
  }
  bool operator != (const Task &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Task & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Task &a, Task &b);

typedef struct _TaskListRet__isset {
  _TaskListRet__isset() : allTask(false) {}
  bool allTask;
} _TaskListRet__isset;

class TaskListRet {
 public:

  static const char* ascii_fingerprint; // = "83654BF541D6EE16CA53289F7B80FBF0";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0x65,0x4B,0xF5,0x41,0xD6,0xEE,0x16,0xCA,0x53,0x28,0x9F,0x7B,0x80,0xFB,0xF0};

  TaskListRet() {
  }

  virtual ~TaskListRet() throw() {}

  std::vector<Task>  allTask;

  _TaskListRet__isset __isset;

  void __set_allTask(const std::vector<Task> & val) {
    allTask = val;
  }

  bool operator == (const TaskListRet & rhs) const
  {
    if (!(allTask == rhs.allTask))
      return false;
    return true;
  }
  bool operator != (const TaskListRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskListRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TaskListRet &a, TaskListRet &b);

typedef struct _UpdateTaskStatusReq__isset {
  _UpdateTaskStatusReq__isset() : taskId(true), status(true) {}
  bool taskId;
  bool status;
} _UpdateTaskStatusReq__isset;

class UpdateTaskStatusReq {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  UpdateTaskStatusReq() : taskId(0), status(0) {
  }

  virtual ~UpdateTaskStatusReq() throw() {}

  int32_t taskId;
  int16_t status;

  _UpdateTaskStatusReq__isset __isset;

  void __set_taskId(const int32_t val) {
    taskId = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  bool operator == (const UpdateTaskStatusReq & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const UpdateTaskStatusReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateTaskStatusReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateTaskStatusReq &a, UpdateTaskStatusReq &b);

typedef struct _UpdateTaskStatusRet__isset {
  _UpdateTaskStatusRet__isset() : taskId(true), status(true), value(true), nextTask(false) {}
  bool taskId;
  bool status;
  bool value;
  bool nextTask;
} _UpdateTaskStatusRet__isset;

class UpdateTaskStatusRet {
 public:

  static const char* ascii_fingerprint; // = "B24DE5D9A110C3C5A79025B9C0FDBD21";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x4D,0xE5,0xD9,0xA1,0x10,0xC3,0xC5,0xA7,0x90,0x25,0xB9,0xC0,0xFD,0xBD,0x21};

  UpdateTaskStatusRet() : taskId(0), status(0), value(0) {
  }

  virtual ~UpdateTaskStatusRet() throw() {}

  int32_t taskId;
  int16_t status;
  int32_t value;
  Task nextTask;

  _UpdateTaskStatusRet__isset __isset;

  void __set_taskId(const int32_t val) {
    taskId = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  void __set_nextTask(const Task& val) {
    nextTask = val;
    __isset.nextTask = true;
  }

  bool operator == (const UpdateTaskStatusRet & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.nextTask != rhs.__isset.nextTask)
      return false;
    else if (__isset.nextTask && !(nextTask == rhs.nextTask))
      return false;
    return true;
  }
  bool operator != (const UpdateTaskStatusRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateTaskStatusRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateTaskStatusRet &a, UpdateTaskStatusRet &b);

typedef struct _ShowTaskPanelRet__isset {
  _ShowTaskPanelRet__isset() : showType(true), taskId(true), content(true), callbackId(true) {}
  bool showType;
  bool taskId;
  bool content;
  bool callbackId;
} _ShowTaskPanelRet__isset;

class ShowTaskPanelRet {
 public:

  static const char* ascii_fingerprint; // = "BA72B6C8158F302EDC12272F88063DFF";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x72,0xB6,0xC8,0x15,0x8F,0x30,0x2E,0xDC,0x12,0x27,0x2F,0x88,0x06,0x3D,0xFF};

  ShowTaskPanelRet() : showType(0), taskId(0), content(""), callbackId(0LL) {
  }

  virtual ~ShowTaskPanelRet() throw() {}

  int16_t showType;
  int32_t taskId;
  std::string content;
  int64_t callbackId;

  _ShowTaskPanelRet__isset __isset;

  void __set_showType(const int16_t val) {
    showType = val;
  }

  void __set_taskId(const int32_t val) {
    taskId = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  void __set_callbackId(const int64_t val) {
    callbackId = val;
  }

  bool operator == (const ShowTaskPanelRet & rhs) const
  {
    if (!(showType == rhs.showType))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(callbackId == rhs.callbackId))
      return false;
    return true;
  }
  bool operator != (const ShowTaskPanelRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowTaskPanelRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowTaskPanelRet &a, ShowTaskPanelRet &b);

typedef struct _ServerCallBackReq__isset {
  _ServerCallBackReq__isset() : callbackId(true) {}
  bool callbackId;
} _ServerCallBackReq__isset;

class ServerCallBackReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  ServerCallBackReq() : callbackId(0LL) {
  }

  virtual ~ServerCallBackReq() throw() {}

  int64_t callbackId;

  _ServerCallBackReq__isset __isset;

  void __set_callbackId(const int64_t val) {
    callbackId = val;
  }

  bool operator == (const ServerCallBackReq & rhs) const
  {
    if (!(callbackId == rhs.callbackId))
      return false;
    return true;
  }
  bool operator != (const ServerCallBackReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerCallBackReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServerCallBackReq &a, ServerCallBackReq &b);

typedef struct _Skill__isset {
  _Skill__isset() : skillId(true), skillLevel(true), lastUsedTM(true), cd(true), position(true), exp(true) {}
  bool skillId;
  bool skillLevel;
  bool lastUsedTM;
  bool cd;
  bool position;
  bool exp;
} _Skill__isset;

class Skill {
 public:

  static const char* ascii_fingerprint; // = "A05247FB9447183473173A5964AB3CFD";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x52,0x47,0xFB,0x94,0x47,0x18,0x34,0x73,0x17,0x3A,0x59,0x64,0xAB,0x3C,0xFD};

  Skill() : skillId(0), skillLevel(0), lastUsedTM(0), cd(0), position(0), exp(0) {
  }

  virtual ~Skill() throw() {}

  int16_t skillId;
  int16_t skillLevel;
  int32_t lastUsedTM;
  int16_t cd;
  int16_t position;
  int32_t exp;

  _Skill__isset __isset;

  void __set_skillId(const int16_t val) {
    skillId = val;
  }

  void __set_skillLevel(const int16_t val) {
    skillLevel = val;
  }

  void __set_lastUsedTM(const int32_t val) {
    lastUsedTM = val;
  }

  void __set_cd(const int16_t val) {
    cd = val;
  }

  void __set_position(const int16_t val) {
    position = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  bool operator == (const Skill & rhs) const
  {
    if (!(skillId == rhs.skillId))
      return false;
    if (!(skillLevel == rhs.skillLevel))
      return false;
    if (!(lastUsedTM == rhs.lastUsedTM))
      return false;
    if (!(cd == rhs.cd))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(exp == rhs.exp))
      return false;
    return true;
  }
  bool operator != (const Skill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Skill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Skill &a, Skill &b);

typedef struct _EquipOpsReq__isset {
  _EquipOpsReq__isset() : uid(true) {}
  bool uid;
} _EquipOpsReq__isset;

class EquipOpsReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  EquipOpsReq() : uid(0LL) {
  }

  virtual ~EquipOpsReq() throw() {}

  int64_t uid;

  _EquipOpsReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const EquipOpsReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const EquipOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EquipOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EquipOpsReq &a, EquipOpsReq &b);

typedef struct _EquipItemRet__isset {
  _EquipItemRet__isset() : itemIdEquip(true), itemIdUnEquip(true), itemIdUnEquipPos(true) {}
  bool itemIdEquip;
  bool itemIdUnEquip;
  bool itemIdUnEquipPos;
} _EquipItemRet__isset;

class EquipItemRet {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  EquipItemRet() : itemIdEquip(0LL), itemIdUnEquip(0LL), itemIdUnEquipPos(0) {
  }

  virtual ~EquipItemRet() throw() {}

  int64_t itemIdEquip;
  int64_t itemIdUnEquip;
  int32_t itemIdUnEquipPos;

  _EquipItemRet__isset __isset;

  void __set_itemIdEquip(const int64_t val) {
    itemIdEquip = val;
  }

  void __set_itemIdUnEquip(const int64_t val) {
    itemIdUnEquip = val;
  }

  void __set_itemIdUnEquipPos(const int32_t val) {
    itemIdUnEquipPos = val;
  }

  bool operator == (const EquipItemRet & rhs) const
  {
    if (!(itemIdEquip == rhs.itemIdEquip))
      return false;
    if (!(itemIdUnEquip == rhs.itemIdUnEquip))
      return false;
    if (!(itemIdUnEquipPos == rhs.itemIdUnEquipPos))
      return false;
    return true;
  }
  bool operator != (const EquipItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EquipItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EquipItemRet &a, EquipItemRet &b);

typedef struct _UnEquipItemRet__isset {
  _UnEquipItemRet__isset() : itemIdUnEquip(true), itemIdUnEquipPos(true) {}
  bool itemIdUnEquip;
  bool itemIdUnEquipPos;
} _UnEquipItemRet__isset;

class UnEquipItemRet {
 public:

  static const char* ascii_fingerprint; // = "40A18C122C27341992EBAD8856A14D0D";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0xA1,0x8C,0x12,0x2C,0x27,0x34,0x19,0x92,0xEB,0xAD,0x88,0x56,0xA1,0x4D,0x0D};

  UnEquipItemRet() : itemIdUnEquip(0LL), itemIdUnEquipPos(0) {
  }

  virtual ~UnEquipItemRet() throw() {}

  int64_t itemIdUnEquip;
  int32_t itemIdUnEquipPos;

  _UnEquipItemRet__isset __isset;

  void __set_itemIdUnEquip(const int64_t val) {
    itemIdUnEquip = val;
  }

  void __set_itemIdUnEquipPos(const int32_t val) {
    itemIdUnEquipPos = val;
  }

  bool operator == (const UnEquipItemRet & rhs) const
  {
    if (!(itemIdUnEquip == rhs.itemIdUnEquip))
      return false;
    if (!(itemIdUnEquipPos == rhs.itemIdUnEquipPos))
      return false;
    return true;
  }
  bool operator != (const UnEquipItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnEquipItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UnEquipItemRet &a, UnEquipItemRet &b);

typedef struct _ThrowItemRet__isset {
  _ThrowItemRet__isset() : uid(true) {}
  bool uid;
} _ThrowItemRet__isset;

class ThrowItemRet {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  ThrowItemRet() : uid(0LL) {
  }

  virtual ~ThrowItemRet() throw() {}

  int64_t uid;

  _ThrowItemRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const ThrowItemRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const ThrowItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThrowItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ThrowItemRet &a, ThrowItemRet &b);

typedef struct _UseItemReq__isset {
  _UseItemReq__isset() : uid(true) {}
  bool uid;
} _UseItemReq__isset;

class UseItemReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  UseItemReq() : uid(0LL) {
  }

  virtual ~UseItemReq() throw() {}

  int64_t uid;

  _UseItemReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const UseItemReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UseItemReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseItemReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UseItemReq &a, UseItemReq &b);

typedef struct _UseItemRet__isset {
  _UseItemRet__isset() : uid(true), leftTimes(true) {}
  bool uid;
  bool leftTimes;
} _UseItemRet__isset;

class UseItemRet {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  UseItemRet() : uid(0LL), leftTimes(0) {
  }

  virtual ~UseItemRet() throw() {}

  int64_t uid;
  int32_t leftTimes;

  _UseItemRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_leftTimes(const int32_t val) {
    leftTimes = val;
  }

  bool operator == (const UseItemRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(leftTimes == rhs.leftTimes))
      return false;
    return true;
  }
  bool operator != (const UseItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UseItemRet &a, UseItemRet &b);

typedef struct _DieJiaItemReq__isset {
  _DieJiaItemReq__isset() : uidFrom(true), uidTo(true) {}
  bool uidFrom;
  bool uidTo;
} _DieJiaItemReq__isset;

class DieJiaItemReq {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  DieJiaItemReq() : uidFrom(0LL), uidTo(0LL) {
  }

  virtual ~DieJiaItemReq() throw() {}

  int64_t uidFrom;
  int64_t uidTo;

  _DieJiaItemReq__isset __isset;

  void __set_uidFrom(const int64_t val) {
    uidFrom = val;
  }

  void __set_uidTo(const int64_t val) {
    uidTo = val;
  }

  bool operator == (const DieJiaItemReq & rhs) const
  {
    if (!(uidFrom == rhs.uidFrom))
      return false;
    if (!(uidTo == rhs.uidTo))
      return false;
    return true;
  }
  bool operator != (const DieJiaItemReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DieJiaItemReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DieJiaItemReq &a, DieJiaItemReq &b);

typedef struct _DieJiaItemRet__isset {
  _DieJiaItemRet__isset() : uidFrom(true), uidTo(true), leftTimes(true) {}
  bool uidFrom;
  bool uidTo;
  bool leftTimes;
} _DieJiaItemRet__isset;

class DieJiaItemRet {
 public:

  static const char* ascii_fingerprint; // = "9763B9D124C8339490EA9AA9EB582188";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x63,0xB9,0xD1,0x24,0xC8,0x33,0x94,0x90,0xEA,0x9A,0xA9,0xEB,0x58,0x21,0x88};

  DieJiaItemRet() : uidFrom(0LL), uidTo(0LL), leftTimes(0) {
  }

  virtual ~DieJiaItemRet() throw() {}

  int64_t uidFrom;
  int64_t uidTo;
  int32_t leftTimes;

  _DieJiaItemRet__isset __isset;

  void __set_uidFrom(const int64_t val) {
    uidFrom = val;
  }

  void __set_uidTo(const int64_t val) {
    uidTo = val;
  }

  void __set_leftTimes(const int32_t val) {
    leftTimes = val;
  }

  bool operator == (const DieJiaItemRet & rhs) const
  {
    if (!(uidFrom == rhs.uidFrom))
      return false;
    if (!(uidTo == rhs.uidTo))
      return false;
    if (!(leftTimes == rhs.leftTimes))
      return false;
    return true;
  }
  bool operator != (const DieJiaItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DieJiaItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DieJiaItemRet &a, DieJiaItemRet &b);

typedef struct _QuerySkillRet__isset {
  _QuerySkillRet__isset() : allSkill(false) {}
  bool allSkill;
} _QuerySkillRet__isset;

class QuerySkillRet {
 public:

  static const char* ascii_fingerprint; // = "6F438A5DEDD8A25EEF21BD166D10A135";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x43,0x8A,0x5D,0xED,0xD8,0xA2,0x5E,0xEF,0x21,0xBD,0x16,0x6D,0x10,0xA1,0x35};

  QuerySkillRet() {
  }

  virtual ~QuerySkillRet() throw() {}

  std::vector<Skill>  allSkill;

  _QuerySkillRet__isset __isset;

  void __set_allSkill(const std::vector<Skill> & val) {
    allSkill = val;
  }

  bool operator == (const QuerySkillRet & rhs) const
  {
    if (!(allSkill == rhs.allSkill))
      return false;
    return true;
  }
  bool operator != (const QuerySkillRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuerySkillRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QuerySkillRet &a, QuerySkillRet &b);

typedef struct _Item__isset {
  _Item__isset() : uid(true), itemCfgId(true), name(true), strengthenLevel(true), lefttimes(true), propExt(false), propStrengthen(false) {}
  bool uid;
  bool itemCfgId;
  bool name;
  bool strengthenLevel;
  bool lefttimes;
  bool propExt;
  bool propStrengthen;
} _Item__isset;

class Item {
 public:

  static const char* ascii_fingerprint; // = "E75319F358A1ED299DFFCB53FE720D74";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x53,0x19,0xF3,0x58,0xA1,0xED,0x29,0x9D,0xFF,0xCB,0x53,0xFE,0x72,0x0D,0x74};

  Item() : uid(0LL), itemCfgId(0), name(""), strengthenLevel(0), lefttimes(0) {
  }

  virtual ~Item() throw() {}

  int64_t uid;
  int32_t itemCfgId;
  std::string name;
  int16_t strengthenLevel;
  int32_t lefttimes;
  std::map<int32_t, int32_t>  propExt;
  std::map<int32_t, int32_t>  propStrengthen;

  _Item__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_itemCfgId(const int32_t val) {
    itemCfgId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_strengthenLevel(const int16_t val) {
    strengthenLevel = val;
  }

  void __set_lefttimes(const int32_t val) {
    lefttimes = val;
  }

  void __set_propExt(const std::map<int32_t, int32_t> & val) {
    propExt = val;
  }

  void __set_propStrengthen(const std::map<int32_t, int32_t> & val) {
    propStrengthen = val;
  }

  bool operator == (const Item & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(itemCfgId == rhs.itemCfgId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(strengthenLevel == rhs.strengthenLevel))
      return false;
    if (!(lefttimes == rhs.lefttimes))
      return false;
    if (!(propExt == rhs.propExt))
      return false;
    if (!(propStrengthen == rhs.propStrengthen))
      return false;
    return true;
  }
  bool operator != (const Item &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Item & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Item &a, Item &b);

typedef struct _PickUpItemReq__isset {
  _PickUpItemReq__isset() : x(true), y(true) {}
  bool x;
  bool y;
} _PickUpItemReq__isset;

class PickUpItemReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  PickUpItemReq() : x(0), y(0) {
  }

  virtual ~PickUpItemReq() throw() {}

  int32_t x;
  int32_t y;

  _PickUpItemReq__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  bool operator == (const PickUpItemReq & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const PickUpItemReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PickUpItemReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PickUpItemReq &a, PickUpItemReq &b);

typedef struct _PickUpItemRet__isset {
  _PickUpItemRet__isset() : item(false) {}
  bool item;
} _PickUpItemRet__isset;

class PickUpItemRet {
 public:

  static const char* ascii_fingerprint; // = "3BD0055DD7A62399F8D555C6483834B2";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xD0,0x05,0x5D,0xD7,0xA6,0x23,0x99,0xF8,0xD5,0x55,0xC6,0x48,0x38,0x34,0xB2};

  PickUpItemRet() {
  }

  virtual ~PickUpItemRet() throw() {}

  Item item;

  _PickUpItemRet__isset __isset;

  void __set_item(const Item& val) {
    item = val;
  }

  bool operator == (const PickUpItemRet & rhs) const
  {
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const PickUpItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PickUpItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PickUpItemRet &a, PickUpItemRet &b);

typedef struct _StrengthenItemReq__isset {
  _StrengthenItemReq__isset() : uid(true) {}
  bool uid;
} _StrengthenItemReq__isset;

class StrengthenItemReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  StrengthenItemReq() : uid(0LL) {
  }

  virtual ~StrengthenItemReq() throw() {}

  int64_t uid;

  _StrengthenItemReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const StrengthenItemReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const StrengthenItemReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StrengthenItemReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StrengthenItemReq &a, StrengthenItemReq &b);

typedef struct _StrengthenItemRet__isset {
  _StrengthenItemRet__isset() : uid(true), level(true), propAdded(false) {}
  bool uid;
  bool level;
  bool propAdded;
} _StrengthenItemRet__isset;

class StrengthenItemRet {
 public:

  static const char* ascii_fingerprint; // = "921B88838835290239CF997C2A98CC32";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x1B,0x88,0x83,0x88,0x35,0x29,0x02,0x39,0xCF,0x99,0x7C,0x2A,0x98,0xCC,0x32};

  StrengthenItemRet() : uid(0LL), level(0) {
  }

  virtual ~StrengthenItemRet() throw() {}

  int64_t uid;
  int16_t level;
  std::map<int32_t, int32_t>  propAdded;

  _StrengthenItemRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_level(const int16_t val) {
    level = val;
  }

  void __set_propAdded(const std::map<int32_t, int32_t> & val) {
    propAdded = val;
  }

  bool operator == (const StrengthenItemRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(propAdded == rhs.propAdded))
      return false;
    return true;
  }
  bool operator != (const StrengthenItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StrengthenItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StrengthenItemRet &a, StrengthenItemRet &b);

typedef struct _QueryPkgRet__isset {
  _QueryPkgRet__isset() : allItem(false), pkgMaxSize(true) {}
  bool allItem;
  bool pkgMaxSize;
} _QueryPkgRet__isset;

class QueryPkgRet {
 public:

  static const char* ascii_fingerprint; // = "65C3B09FF4D79497A807DC63190C7FBF";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xC3,0xB0,0x9F,0xF4,0xD7,0x94,0x97,0xA8,0x07,0xDC,0x63,0x19,0x0C,0x7F,0xBF};

  QueryPkgRet() : pkgMaxSize(0) {
  }

  virtual ~QueryPkgRet() throw() {}

  std::map<int16_t, Item>  allItem;
  int32_t pkgMaxSize;

  _QueryPkgRet__isset __isset;

  void __set_allItem(const std::map<int16_t, Item> & val) {
    allItem = val;
  }

  void __set_pkgMaxSize(const int32_t val) {
    pkgMaxSize = val;
  }

  bool operator == (const QueryPkgRet & rhs) const
  {
    if (!(allItem == rhs.allItem))
      return false;
    if (!(pkgMaxSize == rhs.pkgMaxSize))
      return false;
    return true;
  }
  bool operator != (const QueryPkgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPkgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryPkgRet &a, QueryPkgRet &b);

typedef struct _QueryEquipReq__isset {
  _QueryEquipReq__isset() : uid(true) {}
  bool uid;
} _QueryEquipReq__isset;

class QueryEquipReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  QueryEquipReq() : uid(0LL) {
  }

  virtual ~QueryEquipReq() throw() {}

  int64_t uid;

  _QueryEquipReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const QueryEquipReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const QueryEquipReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryEquipReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryEquipReq &a, QueryEquipReq &b);

typedef struct _QueryEquipRet__isset {
  _QueryEquipRet__isset() : allItem(false), uid(true) {}
  bool allItem;
  bool uid;
} _QueryEquipRet__isset;

class QueryEquipRet {
 public:

  static const char* ascii_fingerprint; // = "D56327464FEC297EF7E0CB59AB38D5DF";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x63,0x27,0x46,0x4F,0xEC,0x29,0x7E,0xF7,0xE0,0xCB,0x59,0xAB,0x38,0xD5,0xDF};

  QueryEquipRet() : uid(0LL) {
  }

  virtual ~QueryEquipRet() throw() {}

  std::map<int16_t, Item>  allItem;
  int64_t uid;

  _QueryEquipRet__isset __isset;

  void __set_allItem(const std::map<int16_t, Item> & val) {
    allItem = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const QueryEquipRet & rhs) const
  {
    if (!(allItem == rhs.allItem))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const QueryEquipRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryEquipRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryEquipRet &a, QueryEquipRet &b);

typedef struct _ItemEnterMapRet__isset {
  _ItemEnterMapRet__isset() : uid(true), itemCfgId(true), x(true), y(true) {}
  bool uid;
  bool itemCfgId;
  bool x;
  bool y;
} _ItemEnterMapRet__isset;

class ItemEnterMapRet {
 public:

  static const char* ascii_fingerprint; // = "BE3A22B351B833B7BB1F7D4167460373";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x3A,0x22,0xB3,0x51,0xB8,0x33,0xB7,0xBB,0x1F,0x7D,0x41,0x67,0x46,0x03,0x73};

  ItemEnterMapRet() : uid(0LL), itemCfgId(0), x(0), y(0) {
  }

  virtual ~ItemEnterMapRet() throw() {}

  int64_t uid;
  int32_t itemCfgId;
  int32_t x;
  int32_t y;

  _ItemEnterMapRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_itemCfgId(const int32_t val) {
    itemCfgId = val;
  }

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  bool operator == (const ItemEnterMapRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(itemCfgId == rhs.itemCfgId))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const ItemEnterMapRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemEnterMapRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ItemEnterMapRet &a, ItemEnterMapRet &b);


class EmptyReq {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  EmptyReq() {
  }

  virtual ~EmptyReq() throw() {}


  bool operator == (const EmptyReq & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EmptyReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmptyReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EmptyReq &a, EmptyReq &b);

typedef struct _LoginReq__isset {
  _LoginReq__isset() : username(true), password(true), reconnectUid(true), x(true), y(true) {}
  bool username;
  bool password;
  bool reconnectUid;
  bool x;
  bool y;
} _LoginReq__isset;

class LoginReq {
 public:

  static const char* ascii_fingerprint; // = "4F67BDE0243EB952250A3E0F0BD5255C";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x67,0xBD,0xE0,0x24,0x3E,0xB9,0x52,0x25,0x0A,0x3E,0x0F,0x0B,0xD5,0x25,0x5C};

  LoginReq() : username(""), password(""), reconnectUid(0LL), x(0), y(0) {
  }

  virtual ~LoginReq() throw() {}

  std::string username;
  std::string password;
  int64_t reconnectUid;
  int32_t x;
  int32_t y;

  _LoginReq__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_reconnectUid(const int64_t val) {
    reconnectUid = val;
  }

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  bool operator == (const LoginReq & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(reconnectUid == rhs.reconnectUid))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const LoginReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoginReq &a, LoginReq &b);


class ReLoginRet {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ReLoginRet() {
  }

  virtual ~ReLoginRet() throw() {}


  bool operator == (const ReLoginRet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReLoginRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReLoginRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReLoginRet &a, ReLoginRet &b);

typedef struct _RoleInfo__isset {
  _RoleInfo__isset() : uid(true), name(true), job(true), gender(true), level(true), exp(true) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool exp;
} _RoleInfo__isset;

class RoleInfo {
 public:

  static const char* ascii_fingerprint; // = "074F0879BCB2A136A2BA27BB33E41851";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x4F,0x08,0x79,0xBC,0xB2,0xA1,0x36,0xA2,0xBA,0x27,0xBB,0x33,0xE4,0x18,0x51};

  RoleInfo() : uid(0LL), name(""), job(0), gender(0), level(0), exp(0) {
  }

  virtual ~RoleInfo() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int16_t level;
  int32_t exp;

  _RoleInfo__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int16_t val) {
    level = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  bool operator == (const RoleInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(exp == rhs.exp))
      return false;
    return true;
  }
  bool operator != (const RoleInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoleInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoleInfo &a, RoleInfo &b);

typedef struct _UserInfoRet__isset {
  _UserInfoRet__isset() : timeServer(true), listRole(false) {}
  bool timeServer;
  bool listRole;
} _UserInfoRet__isset;

class UserInfoRet {
 public:

  static const char* ascii_fingerprint; // = "4D5EE8B8E5EDB1BCB57367FAF74FB03F";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x5E,0xE8,0xB8,0xE5,0xED,0xB1,0xBC,0xB5,0x73,0x67,0xFA,0xF7,0x4F,0xB0,0x3F};

  UserInfoRet() : timeServer(0) {
  }

  virtual ~UserInfoRet() throw() {}

  int32_t timeServer;
  std::vector<RoleInfo>  listRole;

  _UserInfoRet__isset __isset;

  void __set_timeServer(const int32_t val) {
    timeServer = val;
  }

  void __set_listRole(const std::vector<RoleInfo> & val) {
    listRole = val;
  }

  bool operator == (const UserInfoRet & rhs) const
  {
    if (!(timeServer == rhs.timeServer))
      return false;
    if (!(listRole == rhs.listRole))
      return false;
    return true;
  }
  bool operator != (const UserInfoRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfoRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserInfoRet &a, UserInfoRet &b);

typedef struct _CreateRoleReq__isset {
  _CreateRoleReq__isset() : name(true), job(true), gender(true) {}
  bool name;
  bool job;
  bool gender;
} _CreateRoleReq__isset;

class CreateRoleReq {
 public:

  static const char* ascii_fingerprint; // = "5D4CB0B6C71DED11DCD9C5F223C09E75";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x4C,0xB0,0xB6,0xC7,0x1D,0xED,0x11,0xDC,0xD9,0xC5,0xF2,0x23,0xC0,0x9E,0x75};

  CreateRoleReq() : name(""), job(0), gender(0) {
  }

  virtual ~CreateRoleReq() throw() {}

  std::string name;
  int16_t job;
  int16_t gender;

  _CreateRoleReq__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  bool operator == (const CreateRoleReq & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    return true;
  }
  bool operator != (const CreateRoleReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateRoleReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CreateRoleReq &a, CreateRoleReq &b);

typedef struct _CreateRoleRet__isset {
  _CreateRoleRet__isset() : flag(true), errMsg(true), uid(true) {}
  bool flag;
  bool errMsg;
  bool uid;
} _CreateRoleRet__isset;

class CreateRoleRet {
 public:

  static const char* ascii_fingerprint; // = "9B4734760796DF78842BE19FAACF382A";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x47,0x34,0x76,0x07,0x96,0xDF,0x78,0x84,0x2B,0xE1,0x9F,0xAA,0xCF,0x38,0x2A};

  CreateRoleRet() : flag(false), errMsg(""), uid(0LL) {
  }

  virtual ~CreateRoleRet() throw() {}

  bool flag;
  std::string errMsg;
  int64_t uid;

  _CreateRoleRet__isset __isset;

  void __set_flag(const bool val) {
    flag = val;
  }

  void __set_errMsg(const std::string& val) {
    errMsg = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const CreateRoleRet & rhs) const
  {
    if (!(flag == rhs.flag))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const CreateRoleRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateRoleRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CreateRoleRet &a, CreateRoleRet &b);

typedef struct _SelectRoleReq__isset {
  _SelectRoleReq__isset() : uid(true) {}
  bool uid;
} _SelectRoleReq__isset;

class SelectRoleReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SelectRoleReq() : uid(0LL) {
  }

  virtual ~SelectRoleReq() throw() {}

  int64_t uid;

  _SelectRoleReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const SelectRoleReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const SelectRoleReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectRoleReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SelectRoleReq &a, SelectRoleReq &b);

typedef struct _DelRoleReq__isset {
  _DelRoleReq__isset() : uid(true) {}
  bool uid;
} _DelRoleReq__isset;

class DelRoleReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  DelRoleReq() : uid(0LL) {
  }

  virtual ~DelRoleReq() throw() {}

  int64_t uid;

  _DelRoleReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const DelRoleReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const DelRoleReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelRoleReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DelRoleReq &a, DelRoleReq &b);

typedef struct _DelRoleRet__isset {
  _DelRoleRet__isset() : uid(true) {}
  bool uid;
} _DelRoleRet__isset;

class DelRoleRet {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  DelRoleRet() : uid(0LL) {
  }

  virtual ~DelRoleRet() throw() {}

  int64_t uid;

  _DelRoleRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const DelRoleRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const DelRoleRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelRoleRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DelRoleRet &a, DelRoleRet &b);

typedef struct _RandNameReq__isset {
  _RandNameReq__isset() : gender(true) {}
  bool gender;
} _RandNameReq__isset;

class RandNameReq {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  RandNameReq() : gender(1) {
  }

  virtual ~RandNameReq() throw() {}

  int16_t gender;

  _RandNameReq__isset __isset;

  void __set_gender(const int16_t val) {
    gender = val;
  }

  bool operator == (const RandNameReq & rhs) const
  {
    if (!(gender == rhs.gender))
      return false;
    return true;
  }
  bool operator != (const RandNameReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RandNameReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RandNameReq &a, RandNameReq &b);

typedef struct _RandNameRet__isset {
  _RandNameRet__isset() : name(true) {}
  bool name;
} _RandNameRet__isset;

class RandNameRet {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RandNameRet() : name("") {
  }

  virtual ~RandNameRet() throw() {}

  std::string name;

  _RandNameRet__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const RandNameRet & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const RandNameRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RandNameRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RandNameRet &a, RandNameRet &b);

typedef struct _PlayerInfoRet__isset {
  _PlayerInfoRet__isset() : uid(true), name(true), job(true), gender(true), mapname(true), x(true), y(true), level(true), direction(true), hp(true), hpMax(true), mp(true), mpMax(true), exp(true), expMax(true), pkSinValue(true), color(true), xiongJiaCfgId(true) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool mapname;
  bool x;
  bool y;
  bool level;
  bool direction;
  bool hp;
  bool hpMax;
  bool mp;
  bool mpMax;
  bool exp;
  bool expMax;
  bool pkSinValue;
  bool color;
  bool xiongJiaCfgId;
} _PlayerInfoRet__isset;

class PlayerInfoRet {
 public:

  static const char* ascii_fingerprint; // = "48AD1125CE00AF13EF105730DCE00AE9";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0xAD,0x11,0x25,0xCE,0x00,0xAF,0x13,0xEF,0x10,0x57,0x30,0xDC,0xE0,0x0A,0xE9};

  PlayerInfoRet() : uid(0LL), name(""), job(0), gender(0), mapname(""), x(0), y(0), level(0), direction(0), hp(0), hpMax(0), mp(0), mpMax(0), exp(0), expMax(0), pkSinValue(0), color(0), xiongJiaCfgId(0) {
  }

  virtual ~PlayerInfoRet() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  std::string mapname;
  int32_t x;
  int32_t y;
  int32_t level;
  int16_t direction;
  int32_t hp;
  int32_t hpMax;
  int32_t mp;
  int32_t mpMax;
  int32_t exp;
  int32_t expMax;
  int16_t pkSinValue;
  int16_t color;
  int32_t xiongJiaCfgId;

  _PlayerInfoRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_mapname(const std::string& val) {
    mapname = val;
  }

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_direction(const int16_t val) {
    direction = val;
  }

  void __set_hp(const int32_t val) {
    hp = val;
  }

  void __set_hpMax(const int32_t val) {
    hpMax = val;
  }

  void __set_mp(const int32_t val) {
    mp = val;
  }

  void __set_mpMax(const int32_t val) {
    mpMax = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_expMax(const int32_t val) {
    expMax = val;
  }

  void __set_pkSinValue(const int16_t val) {
    pkSinValue = val;
  }

  void __set_color(const int16_t val) {
    color = val;
  }

  void __set_xiongJiaCfgId(const int32_t val) {
    xiongJiaCfgId = val;
  }

  bool operator == (const PlayerInfoRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(mapname == rhs.mapname))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(hpMax == rhs.hpMax))
      return false;
    if (!(mp == rhs.mp))
      return false;
    if (!(mpMax == rhs.mpMax))
      return false;
    if (!(exp == rhs.exp))
      return false;
    if (!(expMax == rhs.expMax))
      return false;
    if (!(pkSinValue == rhs.pkSinValue))
      return false;
    if (!(color == rhs.color))
      return false;
    if (!(xiongJiaCfgId == rhs.xiongJiaCfgId))
      return false;
    return true;
  }
  bool operator != (const PlayerInfoRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerInfoRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerInfoRet &a, PlayerInfoRet &b);

typedef struct _PlayerPropRet__isset {
  _PlayerPropRet__isset() : baseInfo(false), physicAttackMin(true), physicAttackMax(true), magicAttackMin(true), magicAttackMax(true), physicDefendMin(true), physicDefendMax(true), magicDefendMin(true), magicDefendMax(true), gold(true), crit(true), hit(true), avoid(true), attackSpeed(true), attackSing(true), attackInterval(true), attackDistance(true), moveSpeed(true), hurtAbsorb(true), hpAbsorb(true), fightPower(true), anger(true), angerMax(true) {}
  bool baseInfo;
  bool physicAttackMin;
  bool physicAttackMax;
  bool magicAttackMin;
  bool magicAttackMax;
  bool physicDefendMin;
  bool physicDefendMax;
  bool magicDefendMin;
  bool magicDefendMax;
  bool gold;
  bool crit;
  bool hit;
  bool avoid;
  bool attackSpeed;
  bool attackSing;
  bool attackInterval;
  bool attackDistance;
  bool moveSpeed;
  bool hurtAbsorb;
  bool hpAbsorb;
  bool fightPower;
  bool anger;
  bool angerMax;
} _PlayerPropRet__isset;

class PlayerPropRet {
 public:

  static const char* ascii_fingerprint; // = "90D022C7E43A4167C266CE50082AF205";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xD0,0x22,0xC7,0xE4,0x3A,0x41,0x67,0xC2,0x66,0xCE,0x50,0x08,0x2A,0xF2,0x05};

  PlayerPropRet() : physicAttackMin(0), physicAttackMax(0), magicAttackMin(0), magicAttackMax(0), physicDefendMin(0), physicDefendMax(0), magicDefendMin(0), magicDefendMax(0), gold(0), crit(0), hit(0), avoid(0), attackSpeed(0), attackSing(0), attackInterval(0), attackDistance(0), moveSpeed(0), hurtAbsorb(0), hpAbsorb(0), fightPower(0), anger(0), angerMax(0) {
  }

  virtual ~PlayerPropRet() throw() {}

  PlayerInfoRet baseInfo;
  int32_t physicAttackMin;
  int32_t physicAttackMax;
  int32_t magicAttackMin;
  int32_t magicAttackMax;
  int32_t physicDefendMin;
  int32_t physicDefendMax;
  int32_t magicDefendMin;
  int32_t magicDefendMax;
  int32_t gold;
  int16_t crit;
  int16_t hit;
  int16_t avoid;
  int16_t attackSpeed;
  int16_t attackSing;
  int16_t attackInterval;
  int16_t attackDistance;
  int16_t moveSpeed;
  int16_t hurtAbsorb;
  int16_t hpAbsorb;
  int32_t fightPower;
  int32_t anger;
  int32_t angerMax;

  _PlayerPropRet__isset __isset;

  void __set_baseInfo(const PlayerInfoRet& val) {
    baseInfo = val;
  }

  void __set_physicAttackMin(const int32_t val) {
    physicAttackMin = val;
  }

  void __set_physicAttackMax(const int32_t val) {
    physicAttackMax = val;
  }

  void __set_magicAttackMin(const int32_t val) {
    magicAttackMin = val;
  }

  void __set_magicAttackMax(const int32_t val) {
    magicAttackMax = val;
  }

  void __set_physicDefendMin(const int32_t val) {
    physicDefendMin = val;
  }

  void __set_physicDefendMax(const int32_t val) {
    physicDefendMax = val;
  }

  void __set_magicDefendMin(const int32_t val) {
    magicDefendMin = val;
  }

  void __set_magicDefendMax(const int32_t val) {
    magicDefendMax = val;
  }

  void __set_gold(const int32_t val) {
    gold = val;
  }

  void __set_crit(const int16_t val) {
    crit = val;
  }

  void __set_hit(const int16_t val) {
    hit = val;
  }

  void __set_avoid(const int16_t val) {
    avoid = val;
  }

  void __set_attackSpeed(const int16_t val) {
    attackSpeed = val;
  }

  void __set_attackSing(const int16_t val) {
    attackSing = val;
  }

  void __set_attackInterval(const int16_t val) {
    attackInterval = val;
  }

  void __set_attackDistance(const int16_t val) {
    attackDistance = val;
  }

  void __set_moveSpeed(const int16_t val) {
    moveSpeed = val;
  }

  void __set_hurtAbsorb(const int16_t val) {
    hurtAbsorb = val;
  }

  void __set_hpAbsorb(const int16_t val) {
    hpAbsorb = val;
  }

  void __set_fightPower(const int32_t val) {
    fightPower = val;
  }

  void __set_anger(const int32_t val) {
    anger = val;
  }

  void __set_angerMax(const int32_t val) {
    angerMax = val;
  }

  bool operator == (const PlayerPropRet & rhs) const
  {
    if (!(baseInfo == rhs.baseInfo))
      return false;
    if (!(physicAttackMin == rhs.physicAttackMin))
      return false;
    if (!(physicAttackMax == rhs.physicAttackMax))
      return false;
    if (!(magicAttackMin == rhs.magicAttackMin))
      return false;
    if (!(magicAttackMax == rhs.magicAttackMax))
      return false;
    if (!(physicDefendMin == rhs.physicDefendMin))
      return false;
    if (!(physicDefendMax == rhs.physicDefendMax))
      return false;
    if (!(magicDefendMin == rhs.magicDefendMin))
      return false;
    if (!(magicDefendMax == rhs.magicDefendMax))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(crit == rhs.crit))
      return false;
    if (!(hit == rhs.hit))
      return false;
    if (!(avoid == rhs.avoid))
      return false;
    if (!(attackSpeed == rhs.attackSpeed))
      return false;
    if (!(attackSing == rhs.attackSing))
      return false;
    if (!(attackInterval == rhs.attackInterval))
      return false;
    if (!(attackDistance == rhs.attackDistance))
      return false;
    if (!(moveSpeed == rhs.moveSpeed))
      return false;
    if (!(hurtAbsorb == rhs.hurtAbsorb))
      return false;
    if (!(hpAbsorb == rhs.hpAbsorb))
      return false;
    if (!(fightPower == rhs.fightPower))
      return false;
    if (!(anger == rhs.anger))
      return false;
    if (!(angerMax == rhs.angerMax))
      return false;
    return true;
  }
  bool operator != (const PlayerPropRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerPropRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerPropRet &a, PlayerPropRet &b);

typedef struct _MonsterEnterMapRet__isset {
  _MonsterEnterMapRet__isset() : appr(true), uid(true), name(true), x(true), y(true), direction(true), hp(true), hpMax(true), cfgId(true), level(true) {}
  bool appr;
  bool uid;
  bool name;
  bool x;
  bool y;
  bool direction;
  bool hp;
  bool hpMax;
  bool cfgId;
  bool level;
} _MonsterEnterMapRet__isset;

class MonsterEnterMapRet {
 public:

  static const char* ascii_fingerprint; // = "EDEB7F903B121F7EA6BF662E33E4D667";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xEB,0x7F,0x90,0x3B,0x12,0x1F,0x7E,0xA6,0xBF,0x66,0x2E,0x33,0xE4,0xD6,0x67};

  MonsterEnterMapRet() : appr(0), uid(0LL), name(""), x(0), y(0), direction(0), hp(0), hpMax(0), cfgId(0), level(0) {
  }

  virtual ~MonsterEnterMapRet() throw() {}

  int16_t appr;
  int64_t uid;
  std::string name;
  int32_t x;
  int32_t y;
  int16_t direction;
  int32_t hp;
  int32_t hpMax;
  int32_t cfgId;
  int32_t level;

  _MonsterEnterMapRet__isset __isset;

  void __set_appr(const int16_t val) {
    appr = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_direction(const int16_t val) {
    direction = val;
  }

  void __set_hp(const int32_t val) {
    hp = val;
  }

  void __set_hpMax(const int32_t val) {
    hpMax = val;
  }

  void __set_cfgId(const int32_t val) {
    cfgId = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  bool operator == (const MonsterEnterMapRet & rhs) const
  {
    if (!(appr == rhs.appr))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(hpMax == rhs.hpMax))
      return false;
    if (!(cfgId == rhs.cfgId))
      return false;
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const MonsterEnterMapRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonsterEnterMapRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MonsterEnterMapRet &a, MonsterEnterMapRet &b);

typedef struct _NpcEnterMapRet__isset {
  _NpcEnterMapRet__isset() : appr(true), uid(true), name(true), x(true), y(true), direction(true), cfgid(true) {}
  bool appr;
  bool uid;
  bool name;
  bool x;
  bool y;
  bool direction;
  bool cfgid;
} _NpcEnterMapRet__isset;

class NpcEnterMapRet {
 public:

  static const char* ascii_fingerprint; // = "521A40ACDE2E5E43ECA35444C556B226";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x1A,0x40,0xAC,0xDE,0x2E,0x5E,0x43,0xEC,0xA3,0x54,0x44,0xC5,0x56,0xB2,0x26};

  NpcEnterMapRet() : appr(0), uid(0LL), name(""), x(0), y(0), direction(0), cfgid(0) {
  }

  virtual ~NpcEnterMapRet() throw() {}

  int16_t appr;
  int64_t uid;
  std::string name;
  int32_t x;
  int32_t y;
  int16_t direction;
  int32_t cfgid;

  _NpcEnterMapRet__isset __isset;

  void __set_appr(const int16_t val) {
    appr = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_direction(const int16_t val) {
    direction = val;
  }

  void __set_cfgid(const int32_t val) {
    cfgid = val;
  }

  bool operator == (const NpcEnterMapRet & rhs) const
  {
    if (!(appr == rhs.appr))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(direction == rhs.direction))
      return false;
    if (!(cfgid == rhs.cfgid))
      return false;
    return true;
  }
  bool operator != (const NpcEnterMapRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NpcEnterMapRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NpcEnterMapRet &a, NpcEnterMapRet &b);

typedef struct _ClickNpcReq__isset {
  _ClickNpcReq__isset() : uid(true), link(true) {}
  bool uid;
  bool link;
} _ClickNpcReq__isset;

class ClickNpcReq {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  ClickNpcReq() : uid(0LL), link("") {
  }

  virtual ~ClickNpcReq() throw() {}

  int64_t uid;
  std::string link;

  _ClickNpcReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_link(const std::string& val) {
    link = val;
  }

  bool operator == (const ClickNpcReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(link == rhs.link))
      return false;
    return true;
  }
  bool operator != (const ClickNpcReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClickNpcReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClickNpcReq &a, ClickNpcReq &b);

typedef struct _NpcButton__isset {
  _NpcButton__isset() : clickCallbackArg(true), showText(true) {}
  bool clickCallbackArg;
  bool showText;
} _NpcButton__isset;

class NpcButton {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  NpcButton() : clickCallbackArg(""), showText("") {
  }

  virtual ~NpcButton() throw() {}

  std::string clickCallbackArg;
  std::string showText;

  _NpcButton__isset __isset;

  void __set_clickCallbackArg(const std::string& val) {
    clickCallbackArg = val;
  }

  void __set_showText(const std::string& val) {
    showText = val;
  }

  bool operator == (const NpcButton & rhs) const
  {
    if (!(clickCallbackArg == rhs.clickCallbackArg))
      return false;
    if (!(showText == rhs.showText))
      return false;
    return true;
  }
  bool operator != (const NpcButton &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NpcButton & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NpcButton &a, NpcButton &b);

typedef struct _ClickNpcRet__isset {
  _ClickNpcRet__isset() : uid(true), content(true), buttons(false) {}
  bool uid;
  bool content;
  bool buttons;
} _ClickNpcRet__isset;

class ClickNpcRet {
 public:

  static const char* ascii_fingerprint; // = "633E2ED96C122D44E3134847C5D501E9";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x3E,0x2E,0xD9,0x6C,0x12,0x2D,0x44,0xE3,0x13,0x48,0x47,0xC5,0xD5,0x01,0xE9};

  ClickNpcRet() : uid(0LL), content("") {
  }

  virtual ~ClickNpcRet() throw() {}

  int64_t uid;
  std::string content;
  std::vector<NpcButton>  buttons;

  _ClickNpcRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_content(const std::string& val) {
    content = val;
  }

  void __set_buttons(const std::vector<NpcButton> & val) {
    buttons = val;
  }

  bool operator == (const ClickNpcRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(buttons == rhs.buttons))
      return false;
    return true;
  }
  bool operator != (const ClickNpcRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClickNpcRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClickNpcRet &a, ClickNpcRet &b);

typedef struct _PlayerLogoutRet__isset {
  _PlayerLogoutRet__isset() : uid(true) {}
  bool uid;
} _PlayerLogoutRet__isset;

class PlayerLogoutRet {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PlayerLogoutRet() : uid(0LL) {
  }

  virtual ~PlayerLogoutRet() throw() {}

  int64_t uid;

  _PlayerLogoutRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const PlayerLogoutRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const PlayerLogoutRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerLogoutRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerLogoutRet &a, PlayerLogoutRet &b);

typedef struct _EnterMapReq__isset {
  _EnterMapReq__isset() : mapname(true), x(true), y(true) {}
  bool mapname;
  bool x;
  bool y;
} _EnterMapReq__isset;

class EnterMapReq {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  EnterMapReq() : mapname(""), x(0), y(0) {
  }

  virtual ~EnterMapReq() throw() {}

  std::string mapname;
  int32_t x;
  int32_t y;

  _EnterMapReq__isset __isset;

  void __set_mapname(const std::string& val) {
    mapname = val;
  }

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  bool operator == (const EnterMapReq & rhs) const
  {
    if (!(mapname == rhs.mapname))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const EnterMapReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnterMapReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnterMapReq &a, EnterMapReq &b);

typedef struct _EnterMapRet__isset {
  _EnterMapRet__isset() : playerinfo(false) {}
  bool playerinfo;
} _EnterMapRet__isset;

class EnterMapRet {
 public:

  static const char* ascii_fingerprint; // = "E6F30AA0A31E28DA51E71801F4422025";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xF3,0x0A,0xA0,0xA3,0x1E,0x28,0xDA,0x51,0xE7,0x18,0x01,0xF4,0x42,0x20,0x25};

  EnterMapRet() {
  }

  virtual ~EnterMapRet() throw() {}

  PlayerInfoRet playerinfo;

  _EnterMapRet__isset __isset;

  void __set_playerinfo(const PlayerInfoRet& val) {
    playerinfo = val;
  }

  bool operator == (const EnterMapRet & rhs) const
  {
    if (!(playerinfo == rhs.playerinfo))
      return false;
    return true;
  }
  bool operator != (const EnterMapRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnterMapRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnterMapRet &a, EnterMapRet &b);

typedef struct _LeaveMapRet__isset {
  _LeaveMapRet__isset() : uid(true) {}
  bool uid;
} _LeaveMapRet__isset;

class LeaveMapRet {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  LeaveMapRet() : uid(0LL) {
  }

  virtual ~LeaveMapRet() throw() {}

  int64_t uid;

  _LeaveMapRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const LeaveMapRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const LeaveMapRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveMapRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LeaveMapRet &a, LeaveMapRet &b);

typedef struct _Pos__isset {
  _Pos__isset() : x(true), y(true) {}
  bool x;
  bool y;
} _Pos__isset;

class Pos {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Pos() : x(0), y(0) {
  }

  virtual ~Pos() throw() {}

  int32_t x;
  int32_t y;

  _Pos__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  bool operator == (const Pos & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Pos &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pos & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Pos &a, Pos &b);

typedef struct _MoveReq__isset {
  _MoveReq__isset() : x(true), y(true), direction(true) {}
  bool x;
  bool y;
  bool direction;
} _MoveReq__isset;

class MoveReq {
 public:

  static const char* ascii_fingerprint; // = "3E7765496BCF0063C35428E22F902724";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x77,0x65,0x49,0x6B,0xCF,0x00,0x63,0xC3,0x54,0x28,0xE2,0x2F,0x90,0x27,0x24};

  MoveReq() : x(0), y(0), direction(0) {
  }

  virtual ~MoveReq() throw() {}

  int32_t x;
  int32_t y;
  int16_t direction;

  _MoveReq__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_direction(const int16_t val) {
    direction = val;
  }

  bool operator == (const MoveReq & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const MoveReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MoveReq &a, MoveReq &b);

typedef struct _MoveRet__isset {
  _MoveRet__isset() : x(true), y(true), uid(true), direction(true) {}
  bool x;
  bool y;
  bool uid;
  bool direction;
} _MoveRet__isset;

class MoveRet {
 public:

  static const char* ascii_fingerprint; // = "35EA2D514266E3F8074ACFFC7E913932";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xEA,0x2D,0x51,0x42,0x66,0xE3,0xF8,0x07,0x4A,0xCF,0xFC,0x7E,0x91,0x39,0x32};

  MoveRet() : x(0), y(0), uid(0LL), direction(0) {
  }

  virtual ~MoveRet() throw() {}

  int32_t x;
  int32_t y;
  int64_t uid;
  int16_t direction;

  _MoveRet__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_direction(const int16_t val) {
    direction = val;
  }

  bool operator == (const MoveRet & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(direction == rhs.direction))
      return false;
    return true;
  }
  bool operator != (const MoveRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MoveRet &a, MoveRet &b);

typedef struct _RightMsg__isset {
  _RightMsg__isset() : msg(true) {}
  bool msg;
} _RightMsg__isset;

class RightMsg {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RightMsg() : msg("") {
  }

  virtual ~RightMsg() throw() {}

  std::string msg;

  _RightMsg__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const RightMsg & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const RightMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RightMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RightMsg &a, RightMsg &b);

typedef struct _ErrorMsgRet__isset {
  _ErrorMsgRet__isset() : errType(true), cmd(true), errMsg(true) {}
  bool errType;
  bool cmd;
  bool errMsg;
} _ErrorMsgRet__isset;

class ErrorMsgRet {
 public:

  static const char* ascii_fingerprint; // = "795B7916A8054465768F9E75A920985F";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0x5B,0x79,0x16,0xA8,0x05,0x44,0x65,0x76,0x8F,0x9E,0x75,0xA9,0x20,0x98,0x5F};

  ErrorMsgRet() : errType(0), cmd(0), errMsg("") {
  }

  virtual ~ErrorMsgRet() throw() {}

  int16_t errType;
  int16_t cmd;
  std::string errMsg;

  _ErrorMsgRet__isset __isset;

  void __set_errType(const int16_t val) {
    errType = val;
  }

  void __set_cmd(const int16_t val) {
    cmd = val;
  }

  void __set_errMsg(const std::string& val) {
    errMsg = val;
  }

  bool operator == (const ErrorMsgRet & rhs) const
  {
    if (!(errType == rhs.errType))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const ErrorMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ErrorMsgRet &a, ErrorMsgRet &b);

typedef struct _FriendListMsgReq__isset {
  _FriendListMsgReq__isset() : opstype(true), uid(true) {}
  bool opstype;
  bool uid;
} _FriendListMsgReq__isset;

class FriendListMsgReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  FriendListMsgReq() : opstype(0), uid(0LL) {
  }

  virtual ~FriendListMsgReq() throw() {}

  int16_t opstype;
  int64_t uid;

  _FriendListMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const FriendListMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const FriendListMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendListMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FriendListMsgReq &a, FriendListMsgReq &b);

typedef struct _FriendMsgReq__isset {
  _FriendMsgReq__isset() : opstype(true), uid(true) {}
  bool opstype;
  bool uid;
} _FriendMsgReq__isset;

class FriendMsgReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  FriendMsgReq() : opstype(0), uid(0LL) {
  }

  virtual ~FriendMsgReq() throw() {}

  int16_t opstype;
  int64_t uid;

  _FriendMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const FriendMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const FriendMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FriendMsgReq &a, FriendMsgReq &b);

typedef struct _FriendMsgRet__isset {
  _FriendMsgRet__isset() : opstype(true), uid(true), name(true), job(true), gender(true), level(true), online(false) {}
  bool opstype;
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool online;
} _FriendMsgRet__isset;

class FriendMsgRet {
 public:

  static const char* ascii_fingerprint; // = "B2C808E513184D50E4F2A7F694E3E3FD";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0xC8,0x08,0xE5,0x13,0x18,0x4D,0x50,0xE4,0xF2,0xA7,0xF6,0x94,0xE3,0xE3,0xFD};

  FriendMsgRet() : opstype(0), uid(0LL), name(""), job(0), gender(0), level(0), online(0) {
  }

  virtual ~FriendMsgRet() throw() {}

  int16_t opstype;
  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  bool online;

  _FriendMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  bool operator == (const FriendMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(online == rhs.online))
      return false;
    return true;
  }
  bool operator != (const FriendMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FriendMsgRet &a, FriendMsgRet &b);

typedef struct _FriendPlayerMsg__isset {
  _FriendPlayerMsg__isset() : uid(true), name(true), job(true), gender(true), level(true), online(false), mapname(true), x(true), y(true) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool online;
  bool mapname;
  bool x;
  bool y;
} _FriendPlayerMsg__isset;

class FriendPlayerMsg {
 public:

  static const char* ascii_fingerprint; // = "84938B257982C836BE0180DA273AD6CA";
  static const uint8_t binary_fingerprint[16]; // = {0x84,0x93,0x8B,0x25,0x79,0x82,0xC8,0x36,0xBE,0x01,0x80,0xDA,0x27,0x3A,0xD6,0xCA};

  FriendPlayerMsg() : uid(0LL), name(""), job(0), gender(0), level(0), online(0), mapname(""), x(0), y(0) {
  }

  virtual ~FriendPlayerMsg() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  bool online;
  std::string mapname;
  int16_t x;
  int16_t y;

  _FriendPlayerMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  void __set_mapname(const std::string& val) {
    mapname = val;
  }

  void __set_x(const int16_t val) {
    x = val;
  }

  void __set_y(const int16_t val) {
    y = val;
  }

  bool operator == (const FriendPlayerMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(online == rhs.online))
      return false;
    if (!(mapname == rhs.mapname))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const FriendPlayerMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendPlayerMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FriendPlayerMsg &a, FriendPlayerMsg &b);

typedef struct _FriendListMsgRet__isset {
  _FriendListMsgRet__isset() : opstype(true), allPlayerInfo(false), allEnemyInfo(false), allShieldInfo(false) {}
  bool opstype;
  bool allPlayerInfo;
  bool allEnemyInfo;
  bool allShieldInfo;
} _FriendListMsgRet__isset;

class FriendListMsgRet {
 public:

  static const char* ascii_fingerprint; // = "69CFEADB4995D107A4ED53BF4A90974A";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xCF,0xEA,0xDB,0x49,0x95,0xD1,0x07,0xA4,0xED,0x53,0xBF,0x4A,0x90,0x97,0x4A};

  FriendListMsgRet() : opstype(0) {
  }

  virtual ~FriendListMsgRet() throw() {}

  int16_t opstype;
  std::vector<FriendPlayerMsg>  allPlayerInfo;
  std::vector<FriendPlayerMsg>  allEnemyInfo;
  std::vector<FriendPlayerMsg>  allShieldInfo;

  _FriendListMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_allPlayerInfo(const std::vector<FriendPlayerMsg> & val) {
    allPlayerInfo = val;
  }

  void __set_allEnemyInfo(const std::vector<FriendPlayerMsg> & val) {
    allEnemyInfo = val;
  }

  void __set_allShieldInfo(const std::vector<FriendPlayerMsg> & val) {
    allShieldInfo = val;
  }

  bool operator == (const FriendListMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(allPlayerInfo == rhs.allPlayerInfo))
      return false;
    if (!(allEnemyInfo == rhs.allEnemyInfo))
      return false;
    if (!(allShieldInfo == rhs.allShieldInfo))
      return false;
    return true;
  }
  bool operator != (const FriendListMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FriendListMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FriendListMsgRet &a, FriendListMsgRet &b);

typedef struct _ChatMsgReq__isset {
  _ChatMsgReq__isset() : opstype(true), uid(true), chatMsg(true) {}
  bool opstype;
  bool uid;
  bool chatMsg;
} _ChatMsgReq__isset;

class ChatMsgReq {
 public:

  static const char* ascii_fingerprint; // = "55F2239516C9C08DB41231C56B29843E";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0xF2,0x23,0x95,0x16,0xC9,0xC0,0x8D,0xB4,0x12,0x31,0xC5,0x6B,0x29,0x84,0x3E};

  ChatMsgReq() : opstype(0), uid(0LL), chatMsg("") {
  }

  virtual ~ChatMsgReq() throw() {}

  int16_t opstype;
  int64_t uid;
  std::string chatMsg;

  _ChatMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_chatMsg(const std::string& val) {
    chatMsg = val;
  }

  bool operator == (const ChatMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(chatMsg == rhs.chatMsg))
      return false;
    return true;
  }
  bool operator != (const ChatMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChatMsgReq &a, ChatMsgReq &b);

typedef struct _ChatMsgRet__isset {
  _ChatMsgRet__isset() : opstype(true), uid(true), name(true), chatMsg(true) {}
  bool opstype;
  bool uid;
  bool name;
  bool chatMsg;
} _ChatMsgRet__isset;

class ChatMsgRet {
 public:

  static const char* ascii_fingerprint; // = "E99B229DDCD93C6B7C52470E27CAD875";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x9B,0x22,0x9D,0xDC,0xD9,0x3C,0x6B,0x7C,0x52,0x47,0x0E,0x27,0xCA,0xD8,0x75};

  ChatMsgRet() : opstype(0), uid(0LL), name(""), chatMsg("") {
  }

  virtual ~ChatMsgRet() throw() {}

  int16_t opstype;
  int64_t uid;
  std::string name;
  std::string chatMsg;

  _ChatMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_chatMsg(const std::string& val) {
    chatMsg = val;
  }

  bool operator == (const ChatMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(chatMsg == rhs.chatMsg))
      return false;
    return true;
  }
  bool operator != (const ChatMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChatMsgRet &a, ChatMsgRet &b);

typedef struct _TeamMsgReq__isset {
  _TeamMsgReq__isset() : opstype(true), uid(true) {}
  bool opstype;
  bool uid;
} _TeamMsgReq__isset;

class TeamMsgReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  TeamMsgReq() : opstype(0), uid(0LL) {
  }

  virtual ~TeamMsgReq() throw() {}

  int16_t opstype;
  int64_t uid;

  _TeamMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const TeamMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const TeamMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamMsgReq &a, TeamMsgReq &b);

typedef struct _TeamListMsgReq__isset {
  _TeamListMsgReq__isset() : opstype(true) {}
  bool opstype;
} _TeamListMsgReq__isset;

class TeamListMsgReq {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  TeamListMsgReq() : opstype(0) {
  }

  virtual ~TeamListMsgReq() throw() {}

  int16_t opstype;

  _TeamListMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  bool operator == (const TeamListMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    return true;
  }
  bool operator != (const TeamListMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamListMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamListMsgReq &a, TeamListMsgReq &b);

typedef struct _TeamMsgRet__isset {
  _TeamMsgRet__isset() : opstype(true), uid(true), name(true), job(true), gender(true), level(true), hp(true), hpMax(true), mp(true), mpMax(true), anger(true), angerMax(true), leader(false) {}
  bool opstype;
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool hp;
  bool hpMax;
  bool mp;
  bool mpMax;
  bool anger;
  bool angerMax;
  bool leader;
} _TeamMsgRet__isset;

class TeamMsgRet {
 public:

  static const char* ascii_fingerprint; // = "C789858F54E48ADE06D97C7BCD3E2DE7";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x89,0x85,0x8F,0x54,0xE4,0x8A,0xDE,0x06,0xD9,0x7C,0x7B,0xCD,0x3E,0x2D,0xE7};

  TeamMsgRet() : opstype(0), uid(0LL), name(""), job(0), gender(0), level(0), hp(0), hpMax(0), mp(0), mpMax(0), anger(0), angerMax(0), leader(0) {
  }

  virtual ~TeamMsgRet() throw() {}

  int16_t opstype;
  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  int32_t hp;
  int32_t hpMax;
  int32_t mp;
  int32_t mpMax;
  int32_t anger;
  int32_t angerMax;
  bool leader;

  _TeamMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_hp(const int32_t val) {
    hp = val;
  }

  void __set_hpMax(const int32_t val) {
    hpMax = val;
  }

  void __set_mp(const int32_t val) {
    mp = val;
  }

  void __set_mpMax(const int32_t val) {
    mpMax = val;
  }

  void __set_anger(const int32_t val) {
    anger = val;
  }

  void __set_angerMax(const int32_t val) {
    angerMax = val;
  }

  void __set_leader(const bool val) {
    leader = val;
  }

  bool operator == (const TeamMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(hpMax == rhs.hpMax))
      return false;
    if (!(mp == rhs.mp))
      return false;
    if (!(mpMax == rhs.mpMax))
      return false;
    if (!(anger == rhs.anger))
      return false;
    if (!(angerMax == rhs.angerMax))
      return false;
    if (!(leader == rhs.leader))
      return false;
    return true;
  }
  bool operator != (const TeamMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamMsgRet &a, TeamMsgRet &b);

typedef struct _TeamPlayerMsg__isset {
  _TeamPlayerMsg__isset() : uid(true), name(true), job(true), gender(true), level(true), hp(true), hpMax(true), mp(true), mpMax(true), anger(true), angerMax(true), leader(false) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool hp;
  bool hpMax;
  bool mp;
  bool mpMax;
  bool anger;
  bool angerMax;
  bool leader;
} _TeamPlayerMsg__isset;

class TeamPlayerMsg {
 public:

  static const char* ascii_fingerprint; // = "D01293B3A60C4EA89FD22642D4FF24ED";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x12,0x93,0xB3,0xA6,0x0C,0x4E,0xA8,0x9F,0xD2,0x26,0x42,0xD4,0xFF,0x24,0xED};

  TeamPlayerMsg() : uid(0LL), name(""), job(0), gender(0), level(0), hp(0), hpMax(0), mp(0), mpMax(0), anger(0), angerMax(0), leader(0) {
  }

  virtual ~TeamPlayerMsg() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  int32_t hp;
  int32_t hpMax;
  int32_t mp;
  int32_t mpMax;
  int32_t anger;
  int32_t angerMax;
  bool leader;

  _TeamPlayerMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_hp(const int32_t val) {
    hp = val;
  }

  void __set_hpMax(const int32_t val) {
    hpMax = val;
  }

  void __set_mp(const int32_t val) {
    mp = val;
  }

  void __set_mpMax(const int32_t val) {
    mpMax = val;
  }

  void __set_anger(const int32_t val) {
    anger = val;
  }

  void __set_angerMax(const int32_t val) {
    angerMax = val;
  }

  void __set_leader(const bool val) {
    leader = val;
  }

  bool operator == (const TeamPlayerMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(hpMax == rhs.hpMax))
      return false;
    if (!(mp == rhs.mp))
      return false;
    if (!(mpMax == rhs.mpMax))
      return false;
    if (!(anger == rhs.anger))
      return false;
    if (!(angerMax == rhs.angerMax))
      return false;
    if (!(leader == rhs.leader))
      return false;
    return true;
  }
  bool operator != (const TeamPlayerMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamPlayerMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamPlayerMsg &a, TeamPlayerMsg &b);

typedef struct _TeamListMsgRet__isset {
  _TeamListMsgRet__isset() : opstype(true), allTeamInfo(false) {}
  bool opstype;
  bool allTeamInfo;
} _TeamListMsgRet__isset;

class TeamListMsgRet {
 public:

  static const char* ascii_fingerprint; // = "817CFC20265A9EF8BBAF7029CBE582AF";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x7C,0xFC,0x20,0x26,0x5A,0x9E,0xF8,0xBB,0xAF,0x70,0x29,0xCB,0xE5,0x82,0xAF};

  TeamListMsgRet() : opstype(0) {
  }

  virtual ~TeamListMsgRet() throw() {}

  int16_t opstype;
  std::vector<TeamPlayerMsg>  allTeamInfo;

  _TeamListMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_allTeamInfo(const std::vector<TeamPlayerMsg> & val) {
    allTeamInfo = val;
  }

  bool operator == (const TeamListMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(allTeamInfo == rhs.allTeamInfo))
      return false;
    return true;
  }
  bool operator != (const TeamListMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TeamListMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TeamListMsgRet &a, TeamListMsgRet &b);

typedef struct _BrotherOpsReq__isset {
  _BrotherOpsReq__isset() : opstype(true), uid1(true), uid2(true) {}
  bool opstype;
  bool uid1;
  bool uid2;
} _BrotherOpsReq__isset;

class BrotherOpsReq {
 public:

  static const char* ascii_fingerprint; // = "A497A0B16E8770B3A6B1EF9C68880EDA";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0x97,0xA0,0xB1,0x6E,0x87,0x70,0xB3,0xA6,0xB1,0xEF,0x9C,0x68,0x88,0x0E,0xDA};

  BrotherOpsReq() : opstype(0), uid1(0LL), uid2(0LL) {
  }

  virtual ~BrotherOpsReq() throw() {}

  int16_t opstype;
  int64_t uid1;
  int64_t uid2;

  _BrotherOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid1(const int64_t val) {
    uid1 = val;
  }

  void __set_uid2(const int64_t val) {
    uid2 = val;
  }

  bool operator == (const BrotherOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid1 == rhs.uid1))
      return false;
    if (!(uid2 == rhs.uid2))
      return false;
    return true;
  }
  bool operator != (const BrotherOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrotherOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BrotherOpsReq &a, BrotherOpsReq &b);

typedef struct _BrotherPlayerMsg__isset {
  _BrotherPlayerMsg__isset() : uid(true), name(true), job(true), gender(true), level(true), online(false) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool online;
} _BrotherPlayerMsg__isset;

class BrotherPlayerMsg {
 public:

  static const char* ascii_fingerprint; // = "AA8FBFDE43AA8831121986F0B5BC34BC";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x8F,0xBF,0xDE,0x43,0xAA,0x88,0x31,0x12,0x19,0x86,0xF0,0xB5,0xBC,0x34,0xBC};

  BrotherPlayerMsg() : uid(0LL), name(""), job(0), gender(0), level(0), online(0) {
  }

  virtual ~BrotherPlayerMsg() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  bool online;

  _BrotherPlayerMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  bool operator == (const BrotherPlayerMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(online == rhs.online))
      return false;
    return true;
  }
  bool operator != (const BrotherPlayerMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrotherPlayerMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BrotherPlayerMsg &a, BrotherPlayerMsg &b);

typedef struct _BrotherOpsMsgRet__isset {
  _BrotherOpsMsgRet__isset() : opstype(true), uid(true), name(true), job(true), gender(true), level(true), allBrotherInfo(false), flag(false), delTime(true) {}
  bool opstype;
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool allBrotherInfo;
  bool flag;
  bool delTime;
} _BrotherOpsMsgRet__isset;

class BrotherOpsMsgRet {
 public:

  static const char* ascii_fingerprint; // = "6275BED1B77840C243E493EDC02B9159";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x75,0xBE,0xD1,0xB7,0x78,0x40,0xC2,0x43,0xE4,0x93,0xED,0xC0,0x2B,0x91,0x59};

  BrotherOpsMsgRet() : opstype(0), uid(0LL), name(""), job(0), gender(0), level(0), flag(0), delTime(0) {
  }

  virtual ~BrotherOpsMsgRet() throw() {}

  int16_t opstype;
  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  std::vector<BrotherPlayerMsg>  allBrotherInfo;
  bool flag;
  int32_t delTime;

  _BrotherOpsMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_allBrotherInfo(const std::vector<BrotherPlayerMsg> & val) {
    allBrotherInfo = val;
  }

  void __set_flag(const bool val) {
    flag = val;
  }

  void __set_delTime(const int32_t val) {
    delTime = val;
  }

  bool operator == (const BrotherOpsMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(allBrotherInfo == rhs.allBrotherInfo))
      return false;
    if (!(flag == rhs.flag))
      return false;
    if (!(delTime == rhs.delTime))
      return false;
    return true;
  }
  bool operator != (const BrotherOpsMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrotherOpsMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BrotherOpsMsgRet &a, BrotherOpsMsgRet &b);

typedef struct _NormalMsg__isset {
  _NormalMsg__isset() : opstype(true), cmd(true), uid(true), Msg(true) {}
  bool opstype;
  bool cmd;
  bool uid;
  bool Msg;
} _NormalMsg__isset;

class NormalMsg {
 public:

  static const char* ascii_fingerprint; // = "961A06D18A14C4C951D88951A6A71ED3";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x1A,0x06,0xD1,0x8A,0x14,0xC4,0xC9,0x51,0xD8,0x89,0x51,0xA6,0xA7,0x1E,0xD3};

  NormalMsg() : opstype(0), cmd(0), uid(0LL), Msg("") {
  }

  virtual ~NormalMsg() throw() {}

  int16_t opstype;
  int16_t cmd;
  int64_t uid;
  std::string Msg;

  _NormalMsg__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_cmd(const int16_t val) {
    cmd = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_Msg(const std::string& val) {
    Msg = val;
  }

  bool operator == (const NormalMsg & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(Msg == rhs.Msg))
      return false;
    return true;
  }
  bool operator != (const NormalMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NormalMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NormalMsg &a, NormalMsg &b);

typedef struct _PlayerMsg__isset {
  _PlayerMsg__isset() : uid(true), name(true), flag(true) {}
  bool uid;
  bool name;
  bool flag;
} _PlayerMsg__isset;

class PlayerMsg {
 public:

  static const char* ascii_fingerprint; // = "A0E7CB44EAF8FB115318DA7C81C6F72C";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xE7,0xCB,0x44,0xEA,0xF8,0xFB,0x11,0x53,0x18,0xDA,0x7C,0x81,0xC6,0xF7,0x2C};

  PlayerMsg() : uid(0LL), name(""), flag(0) {
  }

  virtual ~PlayerMsg() throw() {}

  int64_t uid;
  std::string name;
  int16_t flag;

  _PlayerMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_flag(const int16_t val) {
    flag = val;
  }

  bool operator == (const PlayerMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const PlayerMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlayerMsg &a, PlayerMsg &b);

typedef struct _UpdateSkillPosReq__isset {
  _UpdateSkillPosReq__isset() : skill2pos(false) {}
  bool skill2pos;
} _UpdateSkillPosReq__isset;

class UpdateSkillPosReq {
 public:

  static const char* ascii_fingerprint; // = "069CEB68BE029AE8039692D6DE20B68F";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x9C,0xEB,0x68,0xBE,0x02,0x9A,0xE8,0x03,0x96,0x92,0xD6,0xDE,0x20,0xB6,0x8F};

  UpdateSkillPosReq() {
  }

  virtual ~UpdateSkillPosReq() throw() {}

  std::map<int32_t, int32_t>  skill2pos;

  _UpdateSkillPosReq__isset __isset;

  void __set_skill2pos(const std::map<int32_t, int32_t> & val) {
    skill2pos = val;
  }

  bool operator == (const UpdateSkillPosReq & rhs) const
  {
    if (!(skill2pos == rhs.skill2pos))
      return false;
    return true;
  }
  bool operator != (const UpdateSkillPosReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSkillPosReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateSkillPosReq &a, UpdateSkillPosReq &b);

typedef struct _UpdateSkillPosRet__isset {
  _UpdateSkillPosRet__isset() : skill2pos(false) {}
  bool skill2pos;
} _UpdateSkillPosRet__isset;

class UpdateSkillPosRet {
 public:

  static const char* ascii_fingerprint; // = "069CEB68BE029AE8039692D6DE20B68F";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0x9C,0xEB,0x68,0xBE,0x02,0x9A,0xE8,0x03,0x96,0x92,0xD6,0xDE,0x20,0xB6,0x8F};

  UpdateSkillPosRet() {
  }

  virtual ~UpdateSkillPosRet() throw() {}

  std::map<int32_t, int32_t>  skill2pos;

  _UpdateSkillPosRet__isset __isset;

  void __set_skill2pos(const std::map<int32_t, int32_t> & val) {
    skill2pos = val;
  }

  bool operator == (const UpdateSkillPosRet & rhs) const
  {
    if (!(skill2pos == rhs.skill2pos))
      return false;
    return true;
  }
  bool operator != (const UpdateSkillPosRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateSkillPosRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateSkillPosRet &a, UpdateSkillPosRet &b);

typedef struct _MakeItemReq__isset {
  _MakeItemReq__isset() : itemCfgId(true) {}
  bool itemCfgId;
} _MakeItemReq__isset;

class MakeItemReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MakeItemReq() : itemCfgId(0) {
  }

  virtual ~MakeItemReq() throw() {}

  int32_t itemCfgId;

  _MakeItemReq__isset __isset;

  void __set_itemCfgId(const int32_t val) {
    itemCfgId = val;
  }

  bool operator == (const MakeItemReq & rhs) const
  {
    if (!(itemCfgId == rhs.itemCfgId))
      return false;
    return true;
  }
  bool operator != (const MakeItemReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MakeItemReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MakeItemReq &a, MakeItemReq &b);

typedef struct _MakeItemRet__isset {
  _MakeItemRet__isset() : itemMaked(false), exp(true), level(true) {}
  bool itemMaked;
  bool exp;
  bool level;
} _MakeItemRet__isset;

class MakeItemRet {
 public:

  static const char* ascii_fingerprint; // = "119BE3D2A63DA2F330BA9AB099697A66";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x9B,0xE3,0xD2,0xA6,0x3D,0xA2,0xF3,0x30,0xBA,0x9A,0xB0,0x99,0x69,0x7A,0x66};

  MakeItemRet() : exp(0), level(0) {
  }

  virtual ~MakeItemRet() throw() {}

  Item itemMaked;
  int32_t exp;
  int16_t level;

  _MakeItemRet__isset __isset;

  void __set_itemMaked(const Item& val) {
    itemMaked = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_level(const int16_t val) {
    level = val;
  }

  bool operator == (const MakeItemRet & rhs) const
  {
    if (!(itemMaked == rhs.itemMaked))
      return false;
    if (!(exp == rhs.exp))
      return false;
    if (!(level == rhs.level))
      return false;
    return true;
  }
  bool operator != (const MakeItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MakeItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MakeItemRet &a, MakeItemRet &b);

typedef struct _InheritItemReq__isset {
  _InheritItemReq__isset() : uidFrom(true), uidTo(true) {}
  bool uidFrom;
  bool uidTo;
} _InheritItemReq__isset;

class InheritItemReq {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  InheritItemReq() : uidFrom(0LL), uidTo(0LL) {
  }

  virtual ~InheritItemReq() throw() {}

  int64_t uidFrom;
  int64_t uidTo;

  _InheritItemReq__isset __isset;

  void __set_uidFrom(const int64_t val) {
    uidFrom = val;
  }

  void __set_uidTo(const int64_t val) {
    uidTo = val;
  }

  bool operator == (const InheritItemReq & rhs) const
  {
    if (!(uidFrom == rhs.uidFrom))
      return false;
    if (!(uidTo == rhs.uidTo))
      return false;
    return true;
  }
  bool operator != (const InheritItemReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InheritItemReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InheritItemReq &a, InheritItemReq &b);

typedef struct _InheritItemRet__isset {
  _InheritItemRet__isset() : uidFrom(true), uidTo(true), itemTo(false) {}
  bool uidFrom;
  bool uidTo;
  bool itemTo;
} _InheritItemRet__isset;

class InheritItemRet {
 public:

  static const char* ascii_fingerprint; // = "FA61667049EBDDC71C62C8122446288D";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x61,0x66,0x70,0x49,0xEB,0xDD,0xC7,0x1C,0x62,0xC8,0x12,0x24,0x46,0x28,0x8D};

  InheritItemRet() : uidFrom(0LL), uidTo(0LL) {
  }

  virtual ~InheritItemRet() throw() {}

  int64_t uidFrom;
  int64_t uidTo;
  Item itemTo;

  _InheritItemRet__isset __isset;

  void __set_uidFrom(const int64_t val) {
    uidFrom = val;
  }

  void __set_uidTo(const int64_t val) {
    uidTo = val;
  }

  void __set_itemTo(const Item& val) {
    itemTo = val;
  }

  bool operator == (const InheritItemRet & rhs) const
  {
    if (!(uidFrom == rhs.uidFrom))
      return false;
    if (!(uidTo == rhs.uidTo))
      return false;
    if (!(itemTo == rhs.itemTo))
      return false;
    return true;
  }
  bool operator != (const InheritItemRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InheritItemRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(InheritItemRet &a, InheritItemRet &b);

typedef struct _BuffStatus__isset {
  _BuffStatus__isset() : endTime(true), param(false), triggerSkill(true) {}
  bool endTime;
  bool param;
  bool triggerSkill;
} _BuffStatus__isset;

class BuffStatus {
 public:

  static const char* ascii_fingerprint; // = "559AD6C7C62CC031B86442A730D47DD9";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0x9A,0xD6,0xC7,0xC6,0x2C,0xC0,0x31,0xB8,0x64,0x42,0xA7,0x30,0xD4,0x7D,0xD9};

  BuffStatus() : endTime(0), triggerSkill(0) {
  }

  virtual ~BuffStatus() throw() {}

  int32_t endTime;
  std::map<int16_t, int32_t>  param;
  int32_t triggerSkill;

  _BuffStatus__isset __isset;

  void __set_endTime(const int32_t val) {
    endTime = val;
  }

  void __set_param(const std::map<int16_t, int32_t> & val) {
    param = val;
  }

  void __set_triggerSkill(const int32_t val) {
    triggerSkill = val;
  }

  bool operator == (const BuffStatus & rhs) const
  {
    if (!(endTime == rhs.endTime))
      return false;
    if (!(param == rhs.param))
      return false;
    if (!(triggerSkill == rhs.triggerSkill))
      return false;
    return true;
  }
  bool operator != (const BuffStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BuffStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BuffStatus &a, BuffStatus &b);

typedef struct _UpdateBuffRet__isset {
  _UpdateBuffRet__isset() : allBuff(false) {}
  bool allBuff;
} _UpdateBuffRet__isset;

class UpdateBuffRet {
 public:

  static const char* ascii_fingerprint; // = "74C11ACD2AC7C882B5D06FDE4880DE92";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0xC1,0x1A,0xCD,0x2A,0xC7,0xC8,0x82,0xB5,0xD0,0x6F,0xDE,0x48,0x80,0xDE,0x92};

  UpdateBuffRet() {
  }

  virtual ~UpdateBuffRet() throw() {}

  std::map<int16_t, BuffStatus>  allBuff;

  _UpdateBuffRet__isset __isset;

  void __set_allBuff(const std::map<int16_t, BuffStatus> & val) {
    allBuff = val;
  }

  bool operator == (const UpdateBuffRet & rhs) const
  {
    if (!(allBuff == rhs.allBuff))
      return false;
    return true;
  }
  bool operator != (const UpdateBuffRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateBuffRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateBuffRet &a, UpdateBuffRet &b);

typedef struct _ShowEffectRet__isset {
  _ShowEffectRet__isset() : effectType(true), param(false) {}
  bool effectType;
  bool param;
} _ShowEffectRet__isset;

class ShowEffectRet {
 public:

  static const char* ascii_fingerprint; // = "C1D653683FE2A0AE29A27D5C67B4E56D";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0xD6,0x53,0x68,0x3F,0xE2,0xA0,0xAE,0x29,0xA2,0x7D,0x5C,0x67,0xB4,0xE5,0x6D};

  ShowEffectRet() : effectType(0) {
  }

  virtual ~ShowEffectRet() throw() {}

  int32_t effectType;
  std::map<int16_t, int32_t>  param;

  _ShowEffectRet__isset __isset;

  void __set_effectType(const int32_t val) {
    effectType = val;
  }

  void __set_param(const std::map<int16_t, int32_t> & val) {
    param = val;
  }

  bool operator == (const ShowEffectRet & rhs) const
  {
    if (!(effectType == rhs.effectType))
      return false;
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const ShowEffectRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowEffectRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowEffectRet &a, ShowEffectRet &b);

typedef struct _ShowPlayRet__isset {
  _ShowPlayRet__isset() : playId(true), callbackId(true) {}
  bool playId;
  bool callbackId;
} _ShowPlayRet__isset;

class ShowPlayRet {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  ShowPlayRet() : playId(0), callbackId(0LL) {
  }

  virtual ~ShowPlayRet() throw() {}

  int32_t playId;
  int64_t callbackId;

  _ShowPlayRet__isset __isset;

  void __set_playId(const int32_t val) {
    playId = val;
  }

  void __set_callbackId(const int64_t val) {
    callbackId = val;
  }

  bool operator == (const ShowPlayRet & rhs) const
  {
    if (!(playId == rhs.playId))
      return false;
    if (!(callbackId == rhs.callbackId))
      return false;
    return true;
  }
  bool operator != (const ShowPlayRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowPlayRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowPlayRet &a, ShowPlayRet &b);

typedef struct _ShowUiRet__isset {
  _ShowUiRet__isset() : uitype(true) {}
  bool uitype;
} _ShowUiRet__isset;

class ShowUiRet {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ShowUiRet() : uitype(0) {
  }

  virtual ~ShowUiRet() throw() {}

  int32_t uitype;

  _ShowUiRet__isset __isset;

  void __set_uitype(const int32_t val) {
    uitype = val;
  }

  bool operator == (const ShowUiRet & rhs) const
  {
    if (!(uitype == rhs.uitype))
      return false;
    return true;
  }
  bool operator != (const ShowUiRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShowUiRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ShowUiRet &a, ShowUiRet &b);

typedef struct _CollectOpsReq__isset {
  _CollectOpsReq__isset() : opstype(true), uid(true) {}
  bool opstype;
  bool uid;
} _CollectOpsReq__isset;

class CollectOpsReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  CollectOpsReq() : opstype(0), uid(0LL) {
  }

  virtual ~CollectOpsReq() throw() {}

  int16_t opstype;
  int64_t uid;

  _CollectOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const CollectOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const CollectOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CollectOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CollectOpsReq &a, CollectOpsReq &b);

typedef struct _CollectOpsRet__isset {
  _CollectOpsRet__isset() : opstype(true), uid(true), needSec(true), item(false), cfgid(true) {}
  bool opstype;
  bool uid;
  bool needSec;
  bool item;
  bool cfgid;
} _CollectOpsRet__isset;

class CollectOpsRet {
 public:

  static const char* ascii_fingerprint; // = "0ABA6C36855667878A7C60D88FE6EE5A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0xBA,0x6C,0x36,0x85,0x56,0x67,0x87,0x8A,0x7C,0x60,0xD8,0x8F,0xE6,0xEE,0x5A};

  CollectOpsRet() : opstype(0), uid(0LL), needSec(0), cfgid(0) {
  }

  virtual ~CollectOpsRet() throw() {}

  int16_t opstype;
  int64_t uid;
  int32_t needSec;
  Item item;
  int32_t cfgid;

  _CollectOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_needSec(const int32_t val) {
    needSec = val;
  }

  void __set_item(const Item& val) {
    item = val;
  }

  void __set_cfgid(const int32_t val) {
    cfgid = val;
  }

  bool operator == (const CollectOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(needSec == rhs.needSec))
      return false;
    if (!(item == rhs.item))
      return false;
    if (!(cfgid == rhs.cfgid))
      return false;
    return true;
  }
  bool operator != (const CollectOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CollectOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CollectOpsRet &a, CollectOpsRet &b);

typedef struct _TransferPointOpsReq__isset {
  _TransferPointOpsReq__isset() : cfgid(true) {}
  bool cfgid;
} _TransferPointOpsReq__isset;

class TransferPointOpsReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  TransferPointOpsReq() : cfgid(0) {
  }

  virtual ~TransferPointOpsReq() throw() {}

  int32_t cfgid;

  _TransferPointOpsReq__isset __isset;

  void __set_cfgid(const int32_t val) {
    cfgid = val;
  }

  bool operator == (const TransferPointOpsReq & rhs) const
  {
    if (!(cfgid == rhs.cfgid))
      return false;
    return true;
  }
  bool operator != (const TransferPointOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferPointOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TransferPointOpsReq &a, TransferPointOpsReq &b);

typedef struct _Pet__isset {
  _Pet__isset() : uid(true), status(true), level(true), exp(true), expMax(true), quality(true), cfgid(true), propExt(false) {}
  bool uid;
  bool status;
  bool level;
  bool exp;
  bool expMax;
  bool quality;
  bool cfgid;
  bool propExt;
} _Pet__isset;

class Pet {
 public:

  static const char* ascii_fingerprint; // = "B58C08E2EEAE473E14E607E463683619";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x8C,0x08,0xE2,0xEE,0xAE,0x47,0x3E,0x14,0xE6,0x07,0xE4,0x63,0x68,0x36,0x19};

  Pet() : uid(0LL), status(0), level(0), exp(0), expMax(0), quality(0), cfgid(0) {
  }

  virtual ~Pet() throw() {}

  int64_t uid;
  int16_t status;
  int32_t level;
  int32_t exp;
  int32_t expMax;
  int16_t quality;
  int16_t cfgid;
  std::map<int32_t, int32_t>  propExt;

  _Pet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_expMax(const int32_t val) {
    expMax = val;
  }

  void __set_quality(const int16_t val) {
    quality = val;
  }

  void __set_cfgid(const int16_t val) {
    cfgid = val;
  }

  void __set_propExt(const std::map<int32_t, int32_t> & val) {
    propExt = val;
  }

  bool operator == (const Pet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(exp == rhs.exp))
      return false;
    if (!(expMax == rhs.expMax))
      return false;
    if (!(quality == rhs.quality))
      return false;
    if (!(cfgid == rhs.cfgid))
      return false;
    if (!(propExt == rhs.propExt))
      return false;
    return true;
  }
  bool operator != (const Pet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Pet &a, Pet &b);

typedef struct _PetEgg__isset {
  _PetEgg__isset() : eggItemCfgId(true), starttm(true), needsec(true) {}
  bool eggItemCfgId;
  bool starttm;
  bool needsec;
} _PetEgg__isset;

class PetEgg {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  PetEgg() : eggItemCfgId(0), starttm(0), needsec(0) {
  }

  virtual ~PetEgg() throw() {}

  int32_t eggItemCfgId;
  int32_t starttm;
  int32_t needsec;

  _PetEgg__isset __isset;

  void __set_eggItemCfgId(const int32_t val) {
    eggItemCfgId = val;
  }

  void __set_starttm(const int32_t val) {
    starttm = val;
  }

  void __set_needsec(const int32_t val) {
    needsec = val;
  }

  bool operator == (const PetEgg & rhs) const
  {
    if (!(eggItemCfgId == rhs.eggItemCfgId))
      return false;
    if (!(starttm == rhs.starttm))
      return false;
    if (!(needsec == rhs.needsec))
      return false;
    return true;
  }
  bool operator != (const PetEgg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PetEgg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PetEgg &a, PetEgg &b);

typedef struct _PetInfoRet__isset {
  _PetInfoRet__isset() : allPet(false), petEgg(false) {}
  bool allPet;
  bool petEgg;
} _PetInfoRet__isset;

class PetInfoRet {
 public:

  static const char* ascii_fingerprint; // = "AAF9485AD14864F4C8C85DAA99065173";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xF9,0x48,0x5A,0xD1,0x48,0x64,0xF4,0xC8,0xC8,0x5D,0xAA,0x99,0x06,0x51,0x73};

  PetInfoRet() {
  }

  virtual ~PetInfoRet() throw() {}

  std::vector<Pet>  allPet;
  PetEgg petEgg;

  _PetInfoRet__isset __isset;

  void __set_allPet(const std::vector<Pet> & val) {
    allPet = val;
  }

  void __set_petEgg(const PetEgg& val) {
    petEgg = val;
  }

  bool operator == (const PetInfoRet & rhs) const
  {
    if (!(allPet == rhs.allPet))
      return false;
    if (!(petEgg == rhs.petEgg))
      return false;
    return true;
  }
  bool operator != (const PetInfoRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PetInfoRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PetInfoRet &a, PetInfoRet &b);

typedef struct _PetEggStartReq__isset {
  _PetEggStartReq__isset() : uid(true) {}
  bool uid;
} _PetEggStartReq__isset;

class PetEggStartReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PetEggStartReq() : uid(0LL) {
  }

  virtual ~PetEggStartReq() throw() {}

  int64_t uid;

  _PetEggStartReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const PetEggStartReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const PetEggStartReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PetEggStartReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PetEggStartReq &a, PetEggStartReq &b);

typedef struct _FeedPetReq__isset {
  _FeedPetReq__isset() : uid(true), item(true) {}
  bool uid;
  bool item;
} _FeedPetReq__isset;

class FeedPetReq {
 public:

  static const char* ascii_fingerprint; // = "955BD89722154769CC8FC8E9E0AB6CC2";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0x5B,0xD8,0x97,0x22,0x15,0x47,0x69,0xCC,0x8F,0xC8,0xE9,0xE0,0xAB,0x6C,0xC2};

  FeedPetReq() : uid(0LL) {

  }

  virtual ~FeedPetReq() throw() {}

  int64_t uid;
  std::vector<int64_t>  item;

  _FeedPetReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_item(const std::vector<int64_t> & val) {
    item = val;
  }

  bool operator == (const FeedPetReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const FeedPetReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeedPetReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FeedPetReq &a, FeedPetReq &b);

typedef struct _PetOpsReq__isset {
  _PetOpsReq__isset() : uid(true) {}
  bool uid;
} _PetOpsReq__isset;

class PetOpsReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PetOpsReq() : uid(0LL) {
  }

  virtual ~PetOpsReq() throw() {}

  int64_t uid;

  _PetOpsReq__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const PetOpsReq & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const PetOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PetOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PetOpsReq &a, PetOpsReq &b);

typedef struct _PetOpsRet__isset {
  _PetOpsRet__isset() : uid(true), status(true) {}
  bool uid;
  bool status;
} _PetOpsRet__isset;

class PetOpsRet {
 public:

  static const char* ascii_fingerprint; // = "9266EB424AB01BC22C7C74911C62D1E0";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x66,0xEB,0x42,0x4A,0xB0,0x1B,0xC2,0x2C,0x7C,0x74,0x91,0x1C,0x62,0xD1,0xE0};

  PetOpsRet() : uid(0LL), status(0) {
  }

  virtual ~PetOpsRet() throw() {}

  int64_t uid;
  int16_t status;

  _PetOpsRet__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  bool operator == (const PetOpsRet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const PetOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PetOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PetOpsRet &a, PetOpsRet &b);

typedef struct _BurstRandInfo__isset {
  _BurstRandInfo__isset() : uid(true), name(false), randNum(true) {}
  bool uid;
  bool name;
  bool randNum;
} _BurstRandInfo__isset;

class BurstRandInfo {
 public:

  static const char* ascii_fingerprint; // = "BCD2A68B104EEBD2418CF77F3D47035D";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xD2,0xA6,0x8B,0x10,0x4E,0xEB,0xD2,0x41,0x8C,0xF7,0x7F,0x3D,0x47,0x03,0x5D};

  BurstRandInfo() : uid(0), name(), randNum(0) {
  }

  virtual ~BurstRandInfo() throw() {}

  int32_t uid;
  std::string name;
  int16_t randNum;

  _BurstRandInfo__isset __isset;

  void __set_uid(const int32_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_randNum(const int16_t val) {
    randNum = val;
  }

  bool operator == (const BurstRandInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(randNum == rhs.randNum))
      return false;
    return true;
  }
  bool operator != (const BurstRandInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BurstRandInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BurstRandInfo &a, BurstRandInfo &b);

typedef struct _MonserBurstItemsRet__isset {
  _MonserBurstItemsRet__isset() : uidMon(true), toUid(true), items(false), exp(true), gold(true), teamBurstInfo(false), callbackId(true) {}
  bool uidMon;
  bool toUid;
  bool items;
  bool exp;
  bool gold;
  bool teamBurstInfo;
  bool callbackId;
} _MonserBurstItemsRet__isset;

class MonserBurstItemsRet {
 public:

  static const char* ascii_fingerprint; // = "D20DBE615CB630C797C28F323ECA1AEB";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x0D,0xBE,0x61,0x5C,0xB6,0x30,0xC7,0x97,0xC2,0x8F,0x32,0x3E,0xCA,0x1A,0xEB};

  MonserBurstItemsRet() : uidMon(0LL), toUid(0LL), exp(0), gold(0), callbackId(0LL) {
  }

  virtual ~MonserBurstItemsRet() throw() {}

  int64_t uidMon;
  int64_t toUid;
  std::vector<Item>  items;
  int32_t exp;
  int32_t gold;
  std::vector<BurstRandInfo>  teamBurstInfo;
  int64_t callbackId;

  _MonserBurstItemsRet__isset __isset;

  void __set_uidMon(const int64_t val) {
    uidMon = val;
  }

  void __set_toUid(const int64_t val) {
    toUid = val;
  }

  void __set_items(const std::vector<Item> & val) {
    items = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_gold(const int32_t val) {
    gold = val;
  }

  void __set_teamBurstInfo(const std::vector<BurstRandInfo> & val) {
    teamBurstInfo = val;
  }

  void __set_callbackId(const int64_t val) {
    callbackId = val;
  }

  bool operator == (const MonserBurstItemsRet & rhs) const
  {
    if (!(uidMon == rhs.uidMon))
      return false;
    if (!(toUid == rhs.toUid))
      return false;
    if (!(items == rhs.items))
      return false;
    if (!(exp == rhs.exp))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(teamBurstInfo == rhs.teamBurstInfo))
      return false;
    if (!(callbackId == rhs.callbackId))
      return false;
    return true;
  }
  bool operator != (const MonserBurstItemsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonserBurstItemsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MonserBurstItemsRet &a, MonserBurstItemsRet &b);

typedef struct _CopymapStartRet__isset {
  _CopymapStartRet__isset() : maxSec(true), intro(true) {}
  bool maxSec;
  bool intro;
} _CopymapStartRet__isset;

class CopymapStartRet {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  CopymapStartRet() : maxSec(0), intro("") {
  }

  virtual ~CopymapStartRet() throw() {}

  int32_t maxSec;
  std::string intro;

  _CopymapStartRet__isset __isset;

  void __set_maxSec(const int32_t val) {
    maxSec = val;
  }

  void __set_intro(const std::string& val) {
    intro = val;
  }

  bool operator == (const CopymapStartRet & rhs) const
  {
    if (!(maxSec == rhs.maxSec))
      return false;
    if (!(intro == rhs.intro))
      return false;
    return true;
  }
  bool operator != (const CopymapStartRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CopymapStartRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CopymapStartRet &a, CopymapStartRet &b);

typedef struct _CopymapEndRet__isset {
  _CopymapEndRet__isset() : result(true), exp(true), gold(true), items(false) {}
  bool result;
  bool exp;
  bool gold;
  bool items;
} _CopymapEndRet__isset;

class CopymapEndRet {
 public:

  static const char* ascii_fingerprint; // = "9D7ECC12612E90230EF4ED5A4CB2164E";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0x7E,0xCC,0x12,0x61,0x2E,0x90,0x23,0x0E,0xF4,0xED,0x5A,0x4C,0xB2,0x16,0x4E};

  CopymapEndRet() : result(0), exp(0), gold(0) {
  }

  virtual ~CopymapEndRet() throw() {}

  int16_t result;
  int32_t exp;
  int32_t gold;
  std::vector<Item>  items;

  _CopymapEndRet__isset __isset;

  void __set_result(const int16_t val) {
    result = val;
  }

  void __set_exp(const int32_t val) {
    exp = val;
  }

  void __set_gold(const int32_t val) {
    gold = val;
  }

  void __set_items(const std::vector<Item> & val) {
    items = val;
  }

  bool operator == (const CopymapEndRet & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(exp == rhs.exp))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const CopymapEndRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CopymapEndRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CopymapEndRet &a, CopymapEndRet &b);

typedef struct _RepoItemOpsReq__isset {
  _RepoItemOpsReq__isset() : opstype(true), itemid(true), destPos(true), destNum(true), itemNum(true), position(true), passwd(true) {}
  bool opstype;
  bool itemid;
  bool destPos;
  bool destNum;
  bool itemNum;
  bool position;
  bool passwd;
} _RepoItemOpsReq__isset;

class RepoItemOpsReq {
 public:

  static const char* ascii_fingerprint; // = "4F80AF6A83E5E6099DC8ED56E304F0DA";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x80,0xAF,0x6A,0x83,0xE5,0xE6,0x09,0x9D,0xC8,0xED,0x56,0xE3,0x04,0xF0,0xDA};

  RepoItemOpsReq() : opstype(0), itemid(0LL), destPos(0), destNum(0), itemNum(0), position(0), passwd("") {
  }

  virtual ~RepoItemOpsReq() throw() {}

  int16_t opstype;
  int64_t itemid;
  int32_t destPos;
  int32_t destNum;
  int32_t itemNum;
  int32_t position;
  std::string passwd;

  _RepoItemOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_itemid(const int64_t val) {
    itemid = val;
  }

  void __set_destPos(const int32_t val) {
    destPos = val;
  }

  void __set_destNum(const int32_t val) {
    destNum = val;
  }

  void __set_itemNum(const int32_t val) {
    itemNum = val;
  }

  void __set_position(const int32_t val) {
    position = val;
  }

  void __set_passwd(const std::string& val) {
    passwd = val;
  }

  bool operator == (const RepoItemOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(itemid == rhs.itemid))
      return false;
    if (!(destPos == rhs.destPos))
      return false;
    if (!(destNum == rhs.destNum))
      return false;
    if (!(itemNum == rhs.itemNum))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    return true;
  }
  bool operator != (const RepoItemOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RepoItemOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RepoItemOpsReq &a, RepoItemOpsReq &b);

typedef struct _RepoItemOpsRet__isset {
  _RepoItemOpsRet__isset() : opstype(true), itemid(true), destPos(true), repoMaxSize(true), allItem(false), itemNum(true) {}
  bool opstype;
  bool itemid;
  bool destPos;
  bool repoMaxSize;
  bool allItem;
  bool itemNum;
} _RepoItemOpsRet__isset;

class RepoItemOpsRet {
 public:

  static const char* ascii_fingerprint; // = "50552048D82B8EF090AAFE9D3E69003A";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x55,0x20,0x48,0xD8,0x2B,0x8E,0xF0,0x90,0xAA,0xFE,0x9D,0x3E,0x69,0x00,0x3A};

  RepoItemOpsRet() : opstype(0), itemid(0LL), destPos(0), repoMaxSize(0), itemNum(0) {
  }

  virtual ~RepoItemOpsRet() throw() {}

  int16_t opstype;
  int64_t itemid;
  int32_t destPos;
  int32_t repoMaxSize;
  std::map<int32_t, Item>  allItem;
  int32_t itemNum;

  _RepoItemOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_itemid(const int64_t val) {
    itemid = val;
  }

  void __set_destPos(const int32_t val) {
    destPos = val;
  }

  void __set_repoMaxSize(const int32_t val) {
    repoMaxSize = val;
  }

  void __set_allItem(const std::map<int32_t, Item> & val) {
    allItem = val;
  }

  void __set_itemNum(const int32_t val) {
    itemNum = val;
  }

  bool operator == (const RepoItemOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(itemid == rhs.itemid))
      return false;
    if (!(destPos == rhs.destPos))
      return false;
    if (!(repoMaxSize == rhs.repoMaxSize))
      return false;
    if (!(allItem == rhs.allItem))
      return false;
    if (!(itemNum == rhs.itemNum))
      return false;
    return true;
  }
  bool operator != (const RepoItemOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RepoItemOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RepoItemOpsRet &a, RepoItemOpsRet &b);

typedef struct _ExchangeOpsReq__isset {
  _ExchangeOpsReq__isset() : opstype(true), destuid(true), price(true), items(false) {}
  bool opstype;
  bool destuid;
  bool price;
  bool items;
} _ExchangeOpsReq__isset;

class ExchangeOpsReq {
 public:

  static const char* ascii_fingerprint; // = "43BCEB09E396FFE5F3682B27EF164EF0";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xBC,0xEB,0x09,0xE3,0x96,0xFF,0xE5,0xF3,0x68,0x2B,0x27,0xEF,0x16,0x4E,0xF0};

  ExchangeOpsReq() : opstype(0), destuid(0LL), price(0) {
  }

  virtual ~ExchangeOpsReq() throw() {}

  int16_t opstype;
  int64_t destuid;
  int32_t price;
  std::map<int64_t, int32_t>  items;

  _ExchangeOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_destuid(const int64_t val) {
    destuid = val;
  }

  void __set_price(const int32_t val) {
    price = val;
  }

  void __set_items(const std::map<int64_t, int32_t> & val) {
    items = val;
  }

  bool operator == (const ExchangeOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(destuid == rhs.destuid))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const ExchangeOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExchangeOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExchangeOpsReq &a, ExchangeOpsReq &b);

typedef struct _ExchangeOpsRet__isset {
  _ExchangeOpsRet__isset() : opstype(true), destuid(true), name(true), price(true), items(false), priceSelf(true), itemsSelf(false) {}
  bool opstype;
  bool destuid;
  bool name;
  bool price;
  bool items;
  bool priceSelf;
  bool itemsSelf;
} _ExchangeOpsRet__isset;

class ExchangeOpsRet {
 public:

  static const char* ascii_fingerprint; // = "EE909F74D5F174CFD2FAC9159A25548A";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x90,0x9F,0x74,0xD5,0xF1,0x74,0xCF,0xD2,0xFA,0xC9,0x15,0x9A,0x25,0x54,0x8A};

  ExchangeOpsRet() : opstype(0), destuid(0LL), name(""), price(0), priceSelf(0) {
  }

  virtual ~ExchangeOpsRet() throw() {}

  int16_t opstype;
  int64_t destuid;
  std::string name;
  int32_t price;
  std::vector<Item>  items;
  int32_t priceSelf;
  std::vector<Item>  itemsSelf;

  _ExchangeOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_destuid(const int64_t val) {
    destuid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_price(const int32_t val) {
    price = val;
  }

  void __set_items(const std::vector<Item> & val) {
    items = val;
  }

  void __set_priceSelf(const int32_t val) {
    priceSelf = val;
  }

  void __set_itemsSelf(const std::vector<Item> & val) {
    itemsSelf = val;
  }

  bool operator == (const ExchangeOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(destuid == rhs.destuid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(items == rhs.items))
      return false;
    if (!(priceSelf == rhs.priceSelf))
      return false;
    if (!(itemsSelf == rhs.itemsSelf))
      return false;
    return true;
  }
  bool operator != (const ExchangeOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExchangeOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExchangeOpsRet &a, ExchangeOpsRet &b);

typedef struct _MoneyBankQueryRet__isset {
  _MoneyBankQueryRet__isset() : moneyNum(true) {}
  bool moneyNum;
} _MoneyBankQueryRet__isset;

class MoneyBankQueryRet {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MoneyBankQueryRet() : moneyNum(0) {
  }

  virtual ~MoneyBankQueryRet() throw() {}

  int32_t moneyNum;

  _MoneyBankQueryRet__isset __isset;

  void __set_moneyNum(const int32_t val) {
    moneyNum = val;
  }

  bool operator == (const MoneyBankQueryRet & rhs) const
  {
    if (!(moneyNum == rhs.moneyNum))
      return false;
    return true;
  }
  bool operator != (const MoneyBankQueryRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoneyBankQueryRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MoneyBankQueryRet &a, MoneyBankQueryRet &b);

typedef struct _MoneyBankOpsReq__isset {
  _MoneyBankOpsReq__isset() : opstype(true), num(true), passwd(true) {}
  bool opstype;
  bool num;
  bool passwd;
} _MoneyBankOpsReq__isset;

class MoneyBankOpsReq {
 public:

  static const char* ascii_fingerprint; // = "AA50AC76F3C371A1DD76BA0C17D383F8";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x50,0xAC,0x76,0xF3,0xC3,0x71,0xA1,0xDD,0x76,0xBA,0x0C,0x17,0xD3,0x83,0xF8};

  MoneyBankOpsReq() : opstype(0), num(0), passwd("") {
  }

  virtual ~MoneyBankOpsReq() throw() {}

  int16_t opstype;
  int32_t num;
  std::string passwd;

  _MoneyBankOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_num(const int32_t val) {
    num = val;
  }

  void __set_passwd(const std::string& val) {
    passwd = val;
  }

  bool operator == (const MoneyBankOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    return true;
  }
  bool operator != (const MoneyBankOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoneyBankOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MoneyBankOpsReq &a, MoneyBankOpsReq &b);

typedef struct _MoneyBankOpsRet__isset {
  _MoneyBankOpsRet__isset() : opstype(true), num(true), isSetPasswd(true) {}
  bool opstype;
  bool num;
  bool isSetPasswd;
} _MoneyBankOpsRet__isset;

class MoneyBankOpsRet {
 public:

  static const char* ascii_fingerprint; // = "B8A7FA093F4BD296ED5A68E585595B52";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xA7,0xFA,0x09,0x3F,0x4B,0xD2,0x96,0xED,0x5A,0x68,0xE5,0x85,0x59,0x5B,0x52};

  MoneyBankOpsRet() : opstype(0), num(0), isSetPasswd(0) {
  }

  virtual ~MoneyBankOpsRet() throw() {}

  int16_t opstype;
  int32_t num;
  int32_t isSetPasswd;

  _MoneyBankOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_num(const int32_t val) {
    num = val;
  }

  void __set_isSetPasswd(const int32_t val) {
    isSetPasswd = val;
  }

  bool operator == (const MoneyBankOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(isSetPasswd == rhs.isSetPasswd))
      return false;
    return true;
  }
  bool operator != (const MoneyBankOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoneyBankOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MoneyBankOpsRet &a, MoneyBankOpsRet &b);

typedef struct _ItemExtraOpsReq__isset {
  _ItemExtraOpsReq__isset() : opstype(true), uid(true) {}
  bool opstype;
  bool uid;
} _ItemExtraOpsReq__isset;

class ItemExtraOpsReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  ItemExtraOpsReq() : opstype(0), uid(0LL) {
  }

  virtual ~ItemExtraOpsReq() throw() {}

  int16_t opstype;
  int64_t uid;

  _ItemExtraOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const ItemExtraOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const ItemExtraOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemExtraOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ItemExtraOpsReq &a, ItemExtraOpsReq &b);

typedef struct _ItemExtraOpsRet__isset {
  _ItemExtraOpsRet__isset() : opstype(true), uid(true), gold(true) {}
  bool opstype;
  bool uid;
  bool gold;
} _ItemExtraOpsRet__isset;

class ItemExtraOpsRet {
 public:

  static const char* ascii_fingerprint; // = "96CFED32BA8C2B1DA11AB2B043BC5D7B";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0xCF,0xED,0x32,0xBA,0x8C,0x2B,0x1D,0xA1,0x1A,0xB2,0xB0,0x43,0xBC,0x5D,0x7B};

  ItemExtraOpsRet() : opstype(0), uid(0LL), gold(0) {
  }

  virtual ~ItemExtraOpsRet() throw() {}

  int16_t opstype;
  int64_t uid;
  int32_t gold;

  _ItemExtraOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_gold(const int32_t val) {
    gold = val;
  }

  bool operator == (const ItemExtraOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(gold == rhs.gold))
      return false;
    return true;
  }
  bool operator != (const ItemExtraOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ItemExtraOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ItemExtraOpsRet &a, ItemExtraOpsRet &b);

typedef struct _AuctionOpsReq__isset {
  _AuctionOpsReq__isset() : opstype(true), name(true), itemType(true), minLevel(true), maxLevel(true), itemSellId(true), sellPrice(true), sellNum(true), sellTime(true), auctionId(true), job(true), quality(true) {}
  bool opstype;
  bool name;
  bool itemType;
  bool minLevel;
  bool maxLevel;
  bool itemSellId;
  bool sellPrice;
  bool sellNum;
  bool sellTime;
  bool auctionId;
  bool job;
  bool quality;
} _AuctionOpsReq__isset;

class AuctionOpsReq {
 public:

  static const char* ascii_fingerprint; // = "1D45DD0639226495CEE3E5655CA32527";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x45,0xDD,0x06,0x39,0x22,0x64,0x95,0xCE,0xE3,0xE5,0x65,0x5C,0xA3,0x25,0x27};

  AuctionOpsReq() : opstype(0), name(""), itemType(0), minLevel(0), maxLevel(0), itemSellId(0LL), sellPrice(0), sellNum(0), sellTime(0), auctionId(0LL), job(0), quality(0) {
  }

  virtual ~AuctionOpsReq() throw() {}

  int16_t opstype;
  std::string name;
  int32_t itemType;
  int32_t minLevel;
  int32_t maxLevel;
  int64_t itemSellId;
  int32_t sellPrice;
  int32_t sellNum;
  int32_t sellTime;
  int64_t auctionId;
  int32_t job;
  int32_t quality;

  _AuctionOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_itemType(const int32_t val) {
    itemType = val;
  }

  void __set_minLevel(const int32_t val) {
    minLevel = val;
  }

  void __set_maxLevel(const int32_t val) {
    maxLevel = val;
  }

  void __set_itemSellId(const int64_t val) {
    itemSellId = val;
  }

  void __set_sellPrice(const int32_t val) {
    sellPrice = val;
  }

  void __set_sellNum(const int32_t val) {
    sellNum = val;
  }

  void __set_sellTime(const int32_t val) {
    sellTime = val;
  }

  void __set_auctionId(const int64_t val) {
    auctionId = val;
  }

  void __set_job(const int32_t val) {
    job = val;
  }

  void __set_quality(const int32_t val) {
    quality = val;
  }

  bool operator == (const AuctionOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(itemType == rhs.itemType))
      return false;
    if (!(minLevel == rhs.minLevel))
      return false;
    if (!(maxLevel == rhs.maxLevel))
      return false;
    if (!(itemSellId == rhs.itemSellId))
      return false;
    if (!(sellPrice == rhs.sellPrice))
      return false;
    if (!(sellNum == rhs.sellNum))
      return false;
    if (!(sellTime == rhs.sellTime))
      return false;
    if (!(auctionId == rhs.auctionId))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(quality == rhs.quality))
      return false;
    return true;
  }
  bool operator != (const AuctionOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuctionOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AuctionOpsReq &a, AuctionOpsReq &b);

typedef struct _AuctionData__isset {
  _AuctionData__isset() : auctionId(true), name(true), level(true), sellPrice(true), sellTime(true), owner(true), item(false), uid(true), customUid(true), customName(true), buyTime(true) {}
  bool auctionId;
  bool name;
  bool level;
  bool sellPrice;
  bool sellTime;
  bool owner;
  bool item;
  bool uid;
  bool customUid;
  bool customName;
  bool buyTime;
} _AuctionData__isset;

class AuctionData {
 public:

  static const char* ascii_fingerprint; // = "416AF0DCFC6C47333BEAA8DC7204FFDD";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x6A,0xF0,0xDC,0xFC,0x6C,0x47,0x33,0x3B,0xEA,0xA8,0xDC,0x72,0x04,0xFF,0xDD};

  AuctionData() : auctionId(0LL), name(""), level(0), sellPrice(0), sellTime(0), owner(""), uid(0), customUid(0), customName(""), buyTime(0) {
  }

  virtual ~AuctionData() throw() {}

  int64_t auctionId;
  std::string name;
  int32_t level;
  int32_t sellPrice;
  int32_t sellTime;
  std::string owner;
  Item item;
  int32_t uid;
  int32_t customUid;
  std::string customName;
  int32_t buyTime;

  _AuctionData__isset __isset;

  void __set_auctionId(const int64_t val) {
    auctionId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_sellPrice(const int32_t val) {
    sellPrice = val;
  }

  void __set_sellTime(const int32_t val) {
    sellTime = val;
  }

  void __set_owner(const std::string& val) {
    owner = val;
  }

  void __set_item(const Item& val) {
    item = val;
  }

  void __set_uid(const int32_t val) {
    uid = val;
  }

  void __set_customUid(const int32_t val) {
    customUid = val;
  }

  void __set_customName(const std::string& val) {
    customName = val;
  }

  void __set_buyTime(const int32_t val) {
    buyTime = val;
  }

  bool operator == (const AuctionData & rhs) const
  {
    if (!(auctionId == rhs.auctionId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(sellPrice == rhs.sellPrice))
      return false;
    if (!(sellTime == rhs.sellTime))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(item == rhs.item))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(customUid == rhs.customUid))
      return false;
    if (!(customName == rhs.customName))
      return false;
    if (!(buyTime == rhs.buyTime))
      return false;
    return true;
  }
  bool operator != (const AuctionData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuctionData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AuctionData &a, AuctionData &b);

typedef struct _AuctionOpsRet__isset {
  _AuctionOpsRet__isset() : opstype(true), auctionData(false) {}
  bool opstype;
  bool auctionData;
} _AuctionOpsRet__isset;

class AuctionOpsRet {
 public:

  static const char* ascii_fingerprint; // = "6543F7B1AD781F3A87CA685A5F1C12F9";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x43,0xF7,0xB1,0xAD,0x78,0x1F,0x3A,0x87,0xCA,0x68,0x5A,0x5F,0x1C,0x12,0xF9};

  AuctionOpsRet() : opstype(0) {
  }

  virtual ~AuctionOpsRet() throw() {}

  int16_t opstype;
  std::vector<AuctionData>  auctionData;

  _AuctionOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_auctionData(const std::vector<AuctionData> & val) {
    auctionData = val;
  }

  bool operator == (const AuctionOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(auctionData == rhs.auctionData))
      return false;
    return true;
  }
  bool operator != (const AuctionOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuctionOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AuctionOpsRet &a, AuctionOpsRet &b);

typedef struct _MarriageOpsReq__isset {
  _MarriageOpsReq__isset() : opstype(true), visitors(false), msg(true), marryUid(true), housePos(true), houseItemId(true), marryId(true) {}
  bool opstype;
  bool visitors;
  bool msg;
  bool marryUid;
  bool housePos;
  bool houseItemId;
  bool marryId;
} _MarriageOpsReq__isset;

class MarriageOpsReq {
 public:

  static const char* ascii_fingerprint; // = "A1B32CCF29CFC0F95AD7746632DD97F0";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0xB3,0x2C,0xCF,0x29,0xCF,0xC0,0xF9,0x5A,0xD7,0x74,0x66,0x32,0xDD,0x97,0xF0};

  MarriageOpsReq() : opstype(0), msg(""), marryUid(0LL), housePos(0), houseItemId(0), marryId(0LL) {
  }

  virtual ~MarriageOpsReq() throw() {}

  int16_t opstype;
  std::vector<std::string>  visitors;
  std::string msg;
  int64_t marryUid;
  int16_t housePos;
  int32_t houseItemId;
  int64_t marryId;

  _MarriageOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_visitors(const std::vector<std::string> & val) {
    visitors = val;
  }

  void __set_msg(const std::string& val) {
    msg = val;
  }

  void __set_marryUid(const int64_t val) {
    marryUid = val;
  }

  void __set_housePos(const int16_t val) {
    housePos = val;
  }

  void __set_houseItemId(const int32_t val) {
    houseItemId = val;
  }

  void __set_marryId(const int64_t val) {
    marryId = val;
  }

  bool operator == (const MarriageOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(visitors == rhs.visitors))
      return false;
    if (!(msg == rhs.msg))
      return false;
    if (!(marryUid == rhs.marryUid))
      return false;
    if (!(housePos == rhs.housePos))
      return false;
    if (!(houseItemId == rhs.houseItemId))
      return false;
    if (!(marryId == rhs.marryId))
      return false;
    return true;
  }
  bool operator != (const MarriageOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriageOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriageOpsReq &a, MarriageOpsReq &b);

typedef struct _MarriagePlayerMsg__isset {
  _MarriagePlayerMsg__isset() : uid(true), name(true), job(true), gender(true), level(true), online(false), status(true) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool online;
  bool status;
} _MarriagePlayerMsg__isset;

class MarriagePlayerMsg {
 public:

  static const char* ascii_fingerprint; // = "527137B907CD72A82F5383F348421B21";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x71,0x37,0xB9,0x07,0xCD,0x72,0xA8,0x2F,0x53,0x83,0xF3,0x48,0x42,0x1B,0x21};

  MarriagePlayerMsg() : uid(0LL), name(""), job(0), gender(0), level(0), online(0), status(0) {
  }

  virtual ~MarriagePlayerMsg() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  bool online;
  int16_t status;

  _MarriagePlayerMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  bool operator == (const MarriagePlayerMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(online == rhs.online))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MarriagePlayerMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriagePlayerMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriagePlayerMsg &a, MarriagePlayerMsg &b);

typedef struct _MarriageItem__isset {
  _MarriageItem__isset() : pos(true), itemCfgId(true) {}
  bool pos;
  bool itemCfgId;
} _MarriageItem__isset;

class MarriageItem {
 public:

  static const char* ascii_fingerprint; // = "0D0E376BC3AE6606497788AA82F73617";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x0E,0x37,0x6B,0xC3,0xAE,0x66,0x06,0x49,0x77,0x88,0xAA,0x82,0xF7,0x36,0x17};

  MarriageItem() : pos(-1), itemCfgId(0) {
  }

  virtual ~MarriageItem() throw() {}

  int16_t pos;
  int32_t itemCfgId;

  _MarriageItem__isset __isset;

  void __set_pos(const int16_t val) {
    pos = val;
  }

  void __set_itemCfgId(const int32_t val) {
    itemCfgId = val;
  }

  bool operator == (const MarriageItem & rhs) const
  {
    if (!(pos == rhs.pos))
      return false;
    if (!(itemCfgId == rhs.itemCfgId))
      return false;
    return true;
  }
  bool operator != (const MarriageItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriageItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriageItem &a, MarriageItem &b);

typedef struct _MarriageVisitListBaseInfo__isset {
  _MarriageVisitListBaseInfo__isset() : marryId(true), coupleData(false), tmWedding(true), setupItems(false), tianmi(true) {}
  bool marryId;
  bool coupleData;
  bool tmWedding;
  bool setupItems;
  bool tianmi;
} _MarriageVisitListBaseInfo__isset;

class MarriageVisitListBaseInfo {
 public:

  static const char* ascii_fingerprint; // = "DA48BD3FC1173E929FFD92486590E858";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x48,0xBD,0x3F,0xC1,0x17,0x3E,0x92,0x9F,0xFD,0x92,0x48,0x65,0x90,0xE8,0x58};

  MarriageVisitListBaseInfo() : marryId(0LL), tmWedding(0), tianmi(0) {
  }

  virtual ~MarriageVisitListBaseInfo() throw() {}

  int64_t marryId;
  std::vector<MarriagePlayerMsg>  coupleData;
  int32_t tmWedding;
  std::vector<MarriageItem>  setupItems;
  int32_t tianmi;

  _MarriageVisitListBaseInfo__isset __isset;

  void __set_marryId(const int64_t val) {
    marryId = val;
  }

  void __set_coupleData(const std::vector<MarriagePlayerMsg> & val) {
    coupleData = val;
  }

  void __set_tmWedding(const int32_t val) {
    tmWedding = val;
  }

  void __set_setupItems(const std::vector<MarriageItem> & val) {
    setupItems = val;
  }

  void __set_tianmi(const int32_t val) {
    tianmi = val;
  }

  bool operator == (const MarriageVisitListBaseInfo & rhs) const
  {
    if (!(marryId == rhs.marryId))
      return false;
    if (!(coupleData == rhs.coupleData))
      return false;
    if (!(tmWedding == rhs.tmWedding))
      return false;
    if (!(setupItems == rhs.setupItems))
      return false;
    if (!(tianmi == rhs.tianmi))
      return false;
    return true;
  }
  bool operator != (const MarriageVisitListBaseInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriageVisitListBaseInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriageVisitListBaseInfo &a, MarriageVisitListBaseInfo &b);

typedef struct _MarriageBaseInfo__isset {
  _MarriageBaseInfo__isset() : marryId(true), coupleData(false), listAttends(false), flagXiTie(true), flagWeding(true), tmWedding(true), tianmi(true) {}
  bool marryId;
  bool coupleData;
  bool listAttends;
  bool flagXiTie;
  bool flagWeding;
  bool tmWedding;
  bool tianmi;
} _MarriageBaseInfo__isset;

class MarriageBaseInfo {
 public:

  static const char* ascii_fingerprint; // = "E3A9277ED700D4ED996FEF51096827D6";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0xA9,0x27,0x7E,0xD7,0x00,0xD4,0xED,0x99,0x6F,0xEF,0x51,0x09,0x68,0x27,0xD6};

  MarriageBaseInfo() : marryId(0LL), flagXiTie(0), flagWeding(0), tmWedding(0), tianmi(0) {
  }

  virtual ~MarriageBaseInfo() throw() {}

  int64_t marryId;
  std::vector<MarriagePlayerMsg>  coupleData;
  std::vector<MarriagePlayerMsg>  listAttends;
  int16_t flagXiTie;
  int16_t flagWeding;
  int32_t tmWedding;
  int32_t tianmi;

  _MarriageBaseInfo__isset __isset;

  void __set_marryId(const int64_t val) {
    marryId = val;
  }

  void __set_coupleData(const std::vector<MarriagePlayerMsg> & val) {
    coupleData = val;
  }

  void __set_listAttends(const std::vector<MarriagePlayerMsg> & val) {
    listAttends = val;
  }

  void __set_flagXiTie(const int16_t val) {
    flagXiTie = val;
  }

  void __set_flagWeding(const int16_t val) {
    flagWeding = val;
  }

  void __set_tmWedding(const int32_t val) {
    tmWedding = val;
  }

  void __set_tianmi(const int32_t val) {
    tianmi = val;
  }

  bool operator == (const MarriageBaseInfo & rhs) const
  {
    if (!(marryId == rhs.marryId))
      return false;
    if (!(coupleData == rhs.coupleData))
      return false;
    if (!(listAttends == rhs.listAttends))
      return false;
    if (!(flagXiTie == rhs.flagXiTie))
      return false;
    if (!(flagWeding == rhs.flagWeding))
      return false;
    if (!(tmWedding == rhs.tmWedding))
      return false;
    if (!(tianmi == rhs.tianmi))
      return false;
    return true;
  }
  bool operator != (const MarriageBaseInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriageBaseInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriageBaseInfo &a, MarriageBaseInfo &b);

typedef struct _MarriageOpsMsgRet__isset {
  _MarriageOpsMsgRet__isset() : opstype(true), baseInfo(false), allMarriageInfo(false), delTime(true), msg(true), gold(true), getItems(false), setupItems(false), argPlayer(false), weddingSkillId(true), listVisitHouseInfo(false), otherHouseInfo(false) {}
  bool opstype;
  bool baseInfo;
  bool allMarriageInfo;
  bool delTime;
  bool msg;
  bool gold;
  bool getItems;
  bool setupItems;
  bool argPlayer;
  bool weddingSkillId;
  bool listVisitHouseInfo;
  bool otherHouseInfo;
} _MarriageOpsMsgRet__isset;

class MarriageOpsMsgRet {
 public:

  static const char* ascii_fingerprint; // = "13179DC03889888469178D5F6F40ACF9";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0x17,0x9D,0xC0,0x38,0x89,0x88,0x84,0x69,0x17,0x8D,0x5F,0x6F,0x40,0xAC,0xF9};

  MarriageOpsMsgRet() : opstype(0), delTime(0), msg(""), gold(0LL), weddingSkillId(0) {
  }

  virtual ~MarriageOpsMsgRet() throw() {}

  int16_t opstype;
  MarriageBaseInfo baseInfo;
  std::vector<MarriageBaseInfo>  allMarriageInfo;
  int32_t delTime;
  std::string msg;
  int64_t gold;
  std::vector<Item>  getItems;
  std::vector<MarriageItem>  setupItems;
  MarriagePlayerMsg argPlayer;
  int16_t weddingSkillId;
  std::vector<MarriageVisitListBaseInfo>  listVisitHouseInfo;
  MarriageVisitListBaseInfo otherHouseInfo;

  _MarriageOpsMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_baseInfo(const MarriageBaseInfo& val) {
    baseInfo = val;
  }

  void __set_allMarriageInfo(const std::vector<MarriageBaseInfo> & val) {
    allMarriageInfo = val;
  }

  void __set_delTime(const int32_t val) {
    delTime = val;
  }

  void __set_msg(const std::string& val) {
    msg = val;
  }

  void __set_gold(const int64_t val) {
    gold = val;
  }

  void __set_getItems(const std::vector<Item> & val) {
    getItems = val;
  }

  void __set_setupItems(const std::vector<MarriageItem> & val) {
    setupItems = val;
  }

  void __set_argPlayer(const MarriagePlayerMsg& val) {
    argPlayer = val;
  }

  void __set_weddingSkillId(const int16_t val) {
    weddingSkillId = val;
  }

  void __set_listVisitHouseInfo(const std::vector<MarriageVisitListBaseInfo> & val) {
    listVisitHouseInfo = val;
  }

  void __set_otherHouseInfo(const MarriageVisitListBaseInfo& val) {
    otherHouseInfo = val;
  }

  bool operator == (const MarriageOpsMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(baseInfo == rhs.baseInfo))
      return false;
    if (!(allMarriageInfo == rhs.allMarriageInfo))
      return false;
    if (!(delTime == rhs.delTime))
      return false;
    if (!(msg == rhs.msg))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(getItems == rhs.getItems))
      return false;
    if (!(setupItems == rhs.setupItems))
      return false;
    if (!(argPlayer == rhs.argPlayer))
      return false;
    if (!(weddingSkillId == rhs.weddingSkillId))
      return false;
    if (!(listVisitHouseInfo == rhs.listVisitHouseInfo))
      return false;
    if (!(otherHouseInfo == rhs.otherHouseInfo))
      return false;
    return true;
  }
  bool operator != (const MarriageOpsMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriageOpsMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriageOpsMsgRet &a, MarriageOpsMsgRet &b);

typedef struct _MarriageUpdateRet__isset {
  _MarriageUpdateRet__isset() : opstype(true), matePlayer(false), status(true), goldPlayer(false) {}
  bool opstype;
  bool matePlayer;
  bool status;
  bool goldPlayer;
} _MarriageUpdateRet__isset;

class MarriageUpdateRet {
 public:

  static const char* ascii_fingerprint; // = "38FC8A5F285FF0DDA20FCD1764099CC1";
  static const uint8_t binary_fingerprint[16]; // = {0x38,0xFC,0x8A,0x5F,0x28,0x5F,0xF0,0xDD,0xA2,0x0F,0xCD,0x17,0x64,0x09,0x9C,0xC1};

  MarriageUpdateRet() : opstype(0), status(0) {
  }

  virtual ~MarriageUpdateRet() throw() {}

  int16_t opstype;
  MarriagePlayerMsg matePlayer;
  int16_t status;
  MarriagePlayerMsg goldPlayer;

  _MarriageUpdateRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_matePlayer(const MarriagePlayerMsg& val) {
    matePlayer = val;
  }

  void __set_status(const int16_t val) {
    status = val;
  }

  void __set_goldPlayer(const MarriagePlayerMsg& val) {
    goldPlayer = val;
  }

  bool operator == (const MarriageUpdateRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(matePlayer == rhs.matePlayer))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(goldPlayer == rhs.goldPlayer))
      return false;
    return true;
  }
  bool operator != (const MarriageUpdateRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MarriageUpdateRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MarriageUpdateRet &a, MarriageUpdateRet &b);

typedef struct _ArenaOpsReq__isset {
  _ArenaOpsReq__isset() : opstype(true), idArg(true), numArg(true), destuid(true) {}
  bool opstype;
  bool idArg;
  bool numArg;
  bool destuid;
} _ArenaOpsReq__isset;

class ArenaOpsReq {
 public:

  static const char* ascii_fingerprint; // = "20DA9587E05B8AE447265A7CDB61F8EB";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xDA,0x95,0x87,0xE0,0x5B,0x8A,0xE4,0x47,0x26,0x5A,0x7C,0xDB,0x61,0xF8,0xEB};

  ArenaOpsReq() : opstype(0), idArg(0LL), numArg(0), destuid(0LL) {
  }

  virtual ~ArenaOpsReq() throw() {}

  int16_t opstype;
  int64_t idArg;
  int32_t numArg;
  int64_t destuid;

  _ArenaOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_idArg(const int64_t val) {
    idArg = val;
  }

  void __set_numArg(const int32_t val) {
    numArg = val;
  }

  void __set_destuid(const int64_t val) {
    destuid = val;
  }

  bool operator == (const ArenaOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(idArg == rhs.idArg))
      return false;
    if (!(numArg == rhs.numArg))
      return false;
    if (!(destuid == rhs.destuid))
      return false;
    return true;
  }
  bool operator != (const ArenaOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArenaOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ArenaOpsReq &a, ArenaOpsReq &b);

typedef struct _ArenaPlayerData__isset {
  _ArenaPlayerData__isset() : uid(true), name(true), job(true), gender(true), level(true), fightPower(true), rank(true) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool fightPower;
  bool rank;
} _ArenaPlayerData__isset;

class ArenaPlayerData {
 public:

  static const char* ascii_fingerprint; // = "2A0E5B517452E50F4858512A70256A34";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x0E,0x5B,0x51,0x74,0x52,0xE5,0x0F,0x48,0x58,0x51,0x2A,0x70,0x25,0x6A,0x34};

  ArenaPlayerData() : uid(0LL), name(""), job(0), gender(0), level(0), fightPower(0), rank(0) {
  }

  virtual ~ArenaPlayerData() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  int32_t fightPower;
  int32_t rank;

  _ArenaPlayerData__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_fightPower(const int32_t val) {
    fightPower = val;
  }

  void __set_rank(const int32_t val) {
    rank = val;
  }

  bool operator == (const ArenaPlayerData & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(fightPower == rhs.fightPower))
      return false;
    if (!(rank == rhs.rank))
      return false;
    return true;
  }
  bool operator != (const ArenaPlayerData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArenaPlayerData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ArenaPlayerData &a, ArenaPlayerData &b);

typedef struct _ArenaScore2Item__isset {
  _ArenaScore2Item__isset() : score(true), item(false) {}
  bool score;
  bool item;
} _ArenaScore2Item__isset;

class ArenaScore2Item {
 public:

  static const char* ascii_fingerprint; // = "13FECAD7482462471BF31A8061B88475";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0xFE,0xCA,0xD7,0x48,0x24,0x62,0x47,0x1B,0xF3,0x1A,0x80,0x61,0xB8,0x84,0x75};

  ArenaScore2Item() : score(0) {
  }

  virtual ~ArenaScore2Item() throw() {}

  int32_t score;
  Item item;

  _ArenaScore2Item__isset __isset;

  void __set_score(const int32_t val) {
    score = val;
  }

  void __set_item(const Item& val) {
    item = val;
  }

  bool operator == (const ArenaScore2Item & rhs) const
  {
    if (!(score == rhs.score))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const ArenaScore2Item &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArenaScore2Item & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ArenaScore2Item &a, ArenaScore2Item &b);

typedef struct _ArenaOpsRet__isset {
  _ArenaOpsRet__isset() : opstype(true), leftChallengeTimes(true), score(true), rank(true), listPlayers(false), listItems(false) {}
  bool opstype;
  bool leftChallengeTimes;
  bool score;
  bool rank;
  bool listPlayers;
  bool listItems;
} _ArenaOpsRet__isset;

class ArenaOpsRet {
 public:

  static const char* ascii_fingerprint; // = "D87C7C1C7BB4408C198A5449A6C5C934";
  static const uint8_t binary_fingerprint[16]; // = {0xD8,0x7C,0x7C,0x1C,0x7B,0xB4,0x40,0x8C,0x19,0x8A,0x54,0x49,0xA6,0xC5,0xC9,0x34};

  ArenaOpsRet() : opstype(0), leftChallengeTimes(0), score(0), rank(0) {
  }

  virtual ~ArenaOpsRet() throw() {}

  int16_t opstype;
  int32_t leftChallengeTimes;
  int32_t score;
  int32_t rank;
  std::vector<ArenaPlayerData>  listPlayers;
  std::vector<ArenaScore2Item>  listItems;

  _ArenaOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_leftChallengeTimes(const int32_t val) {
    leftChallengeTimes = val;
  }

  void __set_score(const int32_t val) {
    score = val;
  }

  void __set_rank(const int32_t val) {
    rank = val;
  }

  void __set_listPlayers(const std::vector<ArenaPlayerData> & val) {
    listPlayers = val;
  }

  void __set_listItems(const std::vector<ArenaScore2Item> & val) {
    listItems = val;
  }

  bool operator == (const ArenaOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(leftChallengeTimes == rhs.leftChallengeTimes))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(rank == rhs.rank))
      return false;
    if (!(listPlayers == rhs.listPlayers))
      return false;
    if (!(listItems == rhs.listItems))
      return false;
    return true;
  }
  bool operator != (const ArenaOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArenaOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ArenaOpsRet &a, ArenaOpsRet &b);

typedef struct _QieCuoReq__isset {
  _QieCuoReq__isset() : opstype(true), uidarg(true) {}
  bool opstype;
  bool uidarg;
} _QieCuoReq__isset;

class QieCuoReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  QieCuoReq() : opstype(0), uidarg(0LL) {
  }

  virtual ~QieCuoReq() throw() {}

  int16_t opstype;
  int64_t uidarg;

  _QieCuoReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uidarg(const int64_t val) {
    uidarg = val;
  }

  bool operator == (const QieCuoReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uidarg == rhs.uidarg))
      return false;
    return true;
  }
  bool operator != (const QieCuoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QieCuoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QieCuoReq &a, QieCuoReq &b);

typedef struct _QieCuoRet__isset {
  _QieCuoRet__isset() : opstype(true), infoPlayer(false), winUid(true) {}
  bool opstype;
  bool infoPlayer;
  bool winUid;
} _QieCuoRet__isset;

class QieCuoRet {
 public:

  static const char* ascii_fingerprint; // = "BB76792ED9AEEFB3608F6A321C7E0260";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x76,0x79,0x2E,0xD9,0xAE,0xEF,0xB3,0x60,0x8F,0x6A,0x32,0x1C,0x7E,0x02,0x60};

  QieCuoRet() : opstype(0), winUid(0LL) {
  }

  virtual ~QieCuoRet() throw() {}

  int16_t opstype;
  BrotherPlayerMsg infoPlayer;
  int64_t winUid;

  _QieCuoRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_infoPlayer(const BrotherPlayerMsg& val) {
    infoPlayer = val;
  }

  void __set_winUid(const int64_t val) {
    winUid = val;
  }

  bool operator == (const QieCuoRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(infoPlayer == rhs.infoPlayer))
      return false;
    if (!(winUid == rhs.winUid))
      return false;
    return true;
  }
  bool operator != (const QieCuoRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QieCuoRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QieCuoRet &a, QieCuoRet &b);

typedef struct _MailOpsReq__isset {
  _MailOpsReq__isset() : opstype(true), mailId(true), sendToUid(false), sendTgtType(false), title(false), msg(false) {}
  bool opstype;
  bool mailId;
  bool sendToUid;
  bool sendTgtType;
  bool title;
  bool msg;
} _MailOpsReq__isset;

class MailOpsReq {
 public:

  static const char* ascii_fingerprint; // = "22E53976F5A5E1DAFC267F06CABE286F";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0xE5,0x39,0x76,0xF5,0xA5,0xE1,0xDA,0xFC,0x26,0x7F,0x06,0xCA,0xBE,0x28,0x6F};

  MailOpsReq() : opstype(0), mailId(0LL), sendToUid(0), sendTgtType((MailMsgType::type)0), title(), msg() {
  }

  virtual ~MailOpsReq() throw() {}

  int16_t opstype;
  int64_t mailId;
  int64_t sendToUid;
  MailMsgType::type sendTgtType;
  std::string title;
  std::string msg;

  _MailOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_mailId(const int64_t val) {
    mailId = val;
  }

  void __set_sendToUid(const int64_t val) {
    sendToUid = val;
  }

  void __set_sendTgtType(const MailMsgType::type val) {
    sendTgtType = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const MailOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(mailId == rhs.mailId))
      return false;
    if (!(sendToUid == rhs.sendToUid))
      return false;
    if (!(sendTgtType == rhs.sendTgtType))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const MailOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailOpsReq &a, MailOpsReq &b);

typedef struct _MailPlayerMsg__isset {
  _MailPlayerMsg__isset() : uid(true), name(true), job(true), gender(true), level(true), online(false) {}
  bool uid;
  bool name;
  bool job;
  bool gender;
  bool level;
  bool online;
} _MailPlayerMsg__isset;

class MailPlayerMsg {
 public:

  static const char* ascii_fingerprint; // = "AA8FBFDE43AA8831121986F0B5BC34BC";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x8F,0xBF,0xDE,0x43,0xAA,0x88,0x31,0x12,0x19,0x86,0xF0,0xB5,0xBC,0x34,0xBC};

  MailPlayerMsg() : uid(0LL), name(""), job(0), gender(0), level(0), online(0) {
  }

  virtual ~MailPlayerMsg() throw() {}

  int64_t uid;
  std::string name;
  int16_t job;
  int16_t gender;
  int32_t level;
  bool online;

  _MailPlayerMsg__isset __isset;

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_gender(const int16_t val) {
    gender = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  bool operator == (const MailPlayerMsg & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(online == rhs.online))
      return false;
    return true;
  }
  bool operator != (const MailPlayerMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailPlayerMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailPlayerMsg &a, MailPlayerMsg &b);

typedef struct _MailAttachData__isset {
  _MailAttachData__isset() : type(false), arg1(false), arg2(false) {}
  bool type;
  bool arg1;
  bool arg2;
} _MailAttachData__isset;

class MailAttachData {
 public:

  static const char* ascii_fingerprint; // = "1AB3A1CF9912FDEF32C4878AE56EE1B0";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0xB3,0xA1,0xCF,0x99,0x12,0xFD,0xEF,0x32,0xC4,0x87,0x8A,0xE5,0x6E,0xE1,0xB0};

  MailAttachData() : type((MailAttachType::type)0), arg1(0), arg2(0) {
  }

  virtual ~MailAttachData() throw() {}

  MailAttachType::type type;
  int64_t arg1;
  int64_t arg2;

  _MailAttachData__isset __isset;

  void __set_type(const MailAttachType::type val) {
    type = val;
  }

  void __set_arg1(const int64_t val) {
    arg1 = val;
  }

  void __set_arg2(const int64_t val) {
    arg2 = val;
  }

  bool operator == (const MailAttachData & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(arg1 == rhs.arg1))
      return false;
    if (!(arg2 == rhs.arg2))
      return false;
    return true;
  }
  bool operator != (const MailAttachData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailAttachData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailAttachData &a, MailAttachData &b);

typedef struct _MailDataNode__isset {
  _MailDataNode__isset() : mailId(true), msgType(false), sender(false), title(true), msg(true), listAttach(false), sendTime(true), status(true) {}
  bool mailId;
  bool msgType;
  bool sender;
  bool title;
  bool msg;
  bool listAttach;
  bool sendTime;
  bool status;
} _MailDataNode__isset;

class MailDataNode {
 public:

  static const char* ascii_fingerprint; // = "E91B62C3B17536E03DE1C28955722AB0";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x1B,0x62,0xC3,0xB1,0x75,0x36,0xE0,0x3D,0xE1,0xC2,0x89,0x55,0x72,0x2A,0xB0};

  MailDataNode() : mailId(0LL), msgType((MailMsgType::type)0), title(""), msg(""), sendTime(0), status((MailStatusType::type)0) {
    status = (MailStatusType::type)0;

  }

  virtual ~MailDataNode() throw() {}

  int64_t mailId;
  MailMsgType::type msgType;
  MailPlayerMsg sender;
  std::string title;
  std::string msg;
  std::vector<MailAttachData>  listAttach;
  int32_t sendTime;
  MailStatusType::type status;

  _MailDataNode__isset __isset;

  void __set_mailId(const int64_t val) {
    mailId = val;
  }

  void __set_msgType(const MailMsgType::type val) {
    msgType = val;
  }

  void __set_sender(const MailPlayerMsg& val) {
    sender = val;
  }

  void __set_title(const std::string& val) {
    title = val;
  }

  void __set_msg(const std::string& val) {
    msg = val;
  }

  void __set_listAttach(const std::vector<MailAttachData> & val) {
    listAttach = val;
  }

  void __set_sendTime(const int32_t val) {
    sendTime = val;
  }

  void __set_status(const MailStatusType::type val) {
    status = val;
  }

  bool operator == (const MailDataNode & rhs) const
  {
    if (!(mailId == rhs.mailId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(sender == rhs.sender))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(msg == rhs.msg))
      return false;
    if (!(listAttach == rhs.listAttach))
      return false;
    if (!(sendTime == rhs.sendTime))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MailDataNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailDataNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailDataNode &a, MailDataNode &b);

typedef struct _MailOpsRet__isset {
  _MailOpsRet__isset() : opstype(true), listAllMaill(false), opMailId(true), listNewMail(false) {}
  bool opstype;
  bool listAllMaill;
  bool opMailId;
  bool listNewMail;
} _MailOpsRet__isset;

class MailOpsRet {
 public:

  static const char* ascii_fingerprint; // = "5773F9B33294C90DA0A0124D420EC87E";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x73,0xF9,0xB3,0x32,0x94,0xC9,0x0D,0xA0,0xA0,0x12,0x4D,0x42,0x0E,0xC8,0x7E};

  MailOpsRet() : opstype(0), opMailId(0LL) {
  }

  virtual ~MailOpsRet() throw() {}

  int16_t opstype;
  std::vector<MailDataNode>  listAllMaill;
  int64_t opMailId;
  std::vector<MailDataNode>  listNewMail;

  _MailOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_listAllMaill(const std::vector<MailDataNode> & val) {
    listAllMaill = val;
  }

  void __set_opMailId(const int64_t val) {
    opMailId = val;
  }

  void __set_listNewMail(const std::vector<MailDataNode> & val) {
    listNewMail = val;
  }

  bool operator == (const MailOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(listAllMaill == rhs.listAllMaill))
      return false;
    if (!(opMailId == rhs.opMailId))
      return false;
    if (!(listNewMail == rhs.listNewMail))
      return false;
    return true;
  }
  bool operator != (const MailOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MailOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MailOpsRet &a, MailOpsRet &b);

typedef struct _AttackModeReq__isset {
  _AttackModeReq__isset() : opstype(true), modeAttack(true) {}
  bool opstype;
  bool modeAttack;
} _AttackModeReq__isset;

class AttackModeReq {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  AttackModeReq() : opstype(0), modeAttack(0) {
  }

  virtual ~AttackModeReq() throw() {}

  int16_t opstype;
  int16_t modeAttack;

  _AttackModeReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_modeAttack(const int16_t val) {
    modeAttack = val;
  }

  bool operator == (const AttackModeReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(modeAttack == rhs.modeAttack))
      return false;
    return true;
  }
  bool operator != (const AttackModeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttackModeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AttackModeReq &a, AttackModeReq &b);

typedef struct _AttackModeRet__isset {
  _AttackModeRet__isset() : opstype(true), modeAttack(true) {}
  bool opstype;
  bool modeAttack;
} _AttackModeRet__isset;

class AttackModeRet {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  AttackModeRet() : opstype(0), modeAttack(0) {
  }

  virtual ~AttackModeRet() throw() {}

  int16_t opstype;
  int16_t modeAttack;

  _AttackModeRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_modeAttack(const int16_t val) {
    modeAttack = val;
  }

  bool operator == (const AttackModeRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(modeAttack == rhs.modeAttack))
      return false;
    return true;
  }
  bool operator != (const AttackModeRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttackModeRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AttackModeRet &a, AttackModeRet &b);

typedef struct _PkSinUpdateRet__isset {
  _PkSinUpdateRet__isset() : opstype(true), pkSinValue(true), uid(true) {}
  bool opstype;
  bool pkSinValue;
  bool uid;
} _PkSinUpdateRet__isset;

class PkSinUpdateRet {
 public:

  static const char* ascii_fingerprint; // = "D1C8F64A72386C4D1ECD0031C48A65ED";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0xC8,0xF6,0x4A,0x72,0x38,0x6C,0x4D,0x1E,0xCD,0x00,0x31,0xC4,0x8A,0x65,0xED};

  PkSinUpdateRet() : opstype(0), pkSinValue(0), uid(0LL) {
  }

  virtual ~PkSinUpdateRet() throw() {}

  int16_t opstype;
  int16_t pkSinValue;
  int64_t uid;

  _PkSinUpdateRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_pkSinValue(const int16_t val) {
    pkSinValue = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const PkSinUpdateRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(pkSinValue == rhs.pkSinValue))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const PkSinUpdateRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PkSinUpdateRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PkSinUpdateRet &a, PkSinUpdateRet &b);

typedef struct _HelpAttackReq__isset {
  _HelpAttackReq__isset() : opstype(true), uidArg(true) {}
  bool opstype;
  bool uidArg;
} _HelpAttackReq__isset;

class HelpAttackReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  HelpAttackReq() : opstype(0), uidArg(0LL) {
  }

  virtual ~HelpAttackReq() throw() {}

  int16_t opstype;
  int64_t uidArg;

  _HelpAttackReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_uidArg(const int64_t val) {
    uidArg = val;
  }

  bool operator == (const HelpAttackReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(uidArg == rhs.uidArg))
      return false;
    return true;
  }
  bool operator != (const HelpAttackReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelpAttackReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HelpAttackReq &a, HelpAttackReq &b);

typedef struct _HelpAttackRet__isset {
  _HelpAttackRet__isset() : opstype(true), infoPlayer(false) {}
  bool opstype;
  bool infoPlayer;
} _HelpAttackRet__isset;

class HelpAttackRet {
 public:

  static const char* ascii_fingerprint; // = "B5711951AC56EA394C013DEE38B0B24B";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x71,0x19,0x51,0xAC,0x56,0xEA,0x39,0x4C,0x01,0x3D,0xEE,0x38,0xB0,0xB2,0x4B};

  HelpAttackRet() : opstype(0) {
  }

  virtual ~HelpAttackRet() throw() {}

  int16_t opstype;
  BrotherPlayerMsg infoPlayer;

  _HelpAttackRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_infoPlayer(const BrotherPlayerMsg& val) {
    infoPlayer = val;
  }

  bool operator == (const HelpAttackRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(infoPlayer == rhs.infoPlayer))
      return false;
    return true;
  }
  bool operator != (const HelpAttackRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelpAttackRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HelpAttackRet &a, HelpAttackRet &b);

typedef struct _RebornRet__isset {
  _RebornRet__isset() : bornPlayerInfo(false) {}
  bool bornPlayerInfo;
} _RebornRet__isset;

class RebornRet {
 public:

  static const char* ascii_fingerprint; // = "81B5431BF2E3C4997A29AB960D3D0FED";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0xB5,0x43,0x1B,0xF2,0xE3,0xC4,0x99,0x7A,0x29,0xAB,0x96,0x0D,0x3D,0x0F,0xED};

  RebornRet() {
  }

  virtual ~RebornRet() throw() {}

  PlayerInfoRet bornPlayerInfo;

  _RebornRet__isset __isset;

  void __set_bornPlayerInfo(const PlayerInfoRet& val) {
    bornPlayerInfo = val;
  }

  bool operator == (const RebornRet & rhs) const
  {
    if (!(bornPlayerInfo == rhs.bornPlayerInfo))
      return false;
    return true;
  }
  bool operator != (const RebornRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RebornRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RebornRet &a, RebornRet &b);

typedef struct _XibaiReq__isset {
  _XibaiReq__isset() : opstype(true) {}
  bool opstype;
} _XibaiReq__isset;

class XibaiReq {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  XibaiReq() : opstype(0) {
  }

  virtual ~XibaiReq() throw() {}

  int16_t opstype;

  _XibaiReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  bool operator == (const XibaiReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    return true;
  }
  bool operator != (const XibaiReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XibaiReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(XibaiReq &a, XibaiReq &b);

typedef struct _XibaiRet__isset {
  _XibaiRet__isset() : opstype(true), costGold(true) {}
  bool opstype;
  bool costGold;
} _XibaiRet__isset;

class XibaiRet {
 public:

  static const char* ascii_fingerprint; // = "0D0E376BC3AE6606497788AA82F73617";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x0E,0x37,0x6B,0xC3,0xAE,0x66,0x06,0x49,0x77,0x88,0xAA,0x82,0xF7,0x36,0x17};

  XibaiRet() : opstype(0), costGold(0) {
  }

  virtual ~XibaiRet() throw() {}

  int16_t opstype;
  int32_t costGold;

  _XibaiRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_costGold(const int32_t val) {
    costGold = val;
  }

  bool operator == (const XibaiRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(costGold == rhs.costGold))
      return false;
    return true;
  }
  bool operator != (const XibaiRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const XibaiRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(XibaiRet &a, XibaiRet &b);

typedef struct _RankOpsReq__isset {
  _RankOpsReq__isset() : opstype(true), ranktype(true) {}
  bool opstype;
  bool ranktype;
} _RankOpsReq__isset;

class RankOpsReq {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  RankOpsReq() : opstype(0), ranktype(0) {
  }

  virtual ~RankOpsReq() throw() {}

  int16_t opstype;
  int16_t ranktype;

  _RankOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_ranktype(const int16_t val) {
    ranktype = val;
  }

  bool operator == (const RankOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(ranktype == rhs.ranktype))
      return false;
    return true;
  }
  bool operator != (const RankOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RankOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RankOpsReq &a, RankOpsReq &b);

typedef struct _RankDataNode__isset {
  _RankDataNode__isset() : rank(true), name(true), uid(true), job(true), level(true), fightpower(true), gold(true), count(true), guild_name(true), guild_id(true) {}
  bool rank;
  bool name;
  bool uid;
  bool job;
  bool level;
  bool fightpower;
  bool gold;
  bool count;
  bool guild_name;
  bool guild_id;
} _RankDataNode__isset;

class RankDataNode {
 public:

  static const char* ascii_fingerprint; // = "D28A235346CAFDF61809941595C05A96";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x8A,0x23,0x53,0x46,0xCA,0xFD,0xF6,0x18,0x09,0x94,0x15,0x95,0xC0,0x5A,0x96};

  RankDataNode() : rank(0), name(""), uid(0LL), job(0), level(0), fightpower(0LL), gold(0LL), count(0), guild_name(""), guild_id(0LL) {
  }

  virtual ~RankDataNode() throw() {}

  int16_t rank;
  std::string name;
  int64_t uid;
  int16_t job;
  int32_t level;
  int64_t fightpower;
  int64_t gold;
  int32_t count;
  std::string guild_name;
  int64_t guild_id;

  _RankDataNode__isset __isset;

  void __set_rank(const int16_t val) {
    rank = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  void __set_job(const int16_t val) {
    job = val;
  }

  void __set_level(const int32_t val) {
    level = val;
  }

  void __set_fightpower(const int64_t val) {
    fightpower = val;
  }

  void __set_gold(const int64_t val) {
    gold = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  void __set_guild_name(const std::string& val) {
    guild_name = val;
  }

  void __set_guild_id(const int64_t val) {
    guild_id = val;
  }

  bool operator == (const RankDataNode & rhs) const
  {
    if (!(rank == rhs.rank))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(job == rhs.job))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(fightpower == rhs.fightpower))
      return false;
    if (!(gold == rhs.gold))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(guild_name == rhs.guild_name))
      return false;
    if (!(guild_id == rhs.guild_id))
      return false;
    return true;
  }
  bool operator != (const RankDataNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RankDataNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RankDataNode &a, RankDataNode &b);

typedef struct _RankOpsRet__isset {
  _RankOpsRet__isset() : opstype(true), ranktype(true), listRank(false) {}
  bool opstype;
  bool ranktype;
  bool listRank;
} _RankOpsRet__isset;

class RankOpsRet {
 public:

  static const char* ascii_fingerprint; // = "9CA6D968CC18090F337C2B11E0D0BB1C";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0xA6,0xD9,0x68,0xCC,0x18,0x09,0x0F,0x33,0x7C,0x2B,0x11,0xE0,0xD0,0xBB,0x1C};

  RankOpsRet() : opstype(0), ranktype(0) {
  }

  virtual ~RankOpsRet() throw() {}

  int16_t opstype;
  int16_t ranktype;
  std::vector<RankDataNode>  listRank;

  _RankOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_ranktype(const int16_t val) {
    ranktype = val;
  }

  void __set_listRank(const std::vector<RankDataNode> & val) {
    listRank = val;
  }

  bool operator == (const RankOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(ranktype == rhs.ranktype))
      return false;
    if (!(listRank == rhs.listRank))
      return false;
    return true;
  }
  bool operator != (const RankOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RankOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RankOpsRet &a, RankOpsRet &b);

typedef struct _HeartBeatReq__isset {
  _HeartBeatReq__isset() : arg(true) {}
  bool arg;
} _HeartBeatReq__isset;

class HeartBeatReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HeartBeatReq() : arg(0) {
  }

  virtual ~HeartBeatReq() throw() {}

  int32_t arg;

  _HeartBeatReq__isset __isset;

  void __set_arg(const int32_t val) {
    arg = val;
  }

  bool operator == (const HeartBeatReq & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const HeartBeatReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeartBeatReq &a, HeartBeatReq &b);

typedef struct _HeartBeatRet__isset {
  _HeartBeatRet__isset() : arg(true) {}
  bool arg;
} _HeartBeatRet__isset;

class HeartBeatRet {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HeartBeatRet() : arg(0) {
  }

  virtual ~HeartBeatRet() throw() {}

  int32_t arg;

  _HeartBeatRet__isset __isset;

  void __set_arg(const int32_t val) {
    arg = val;
  }

  bool operator == (const HeartBeatRet & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const HeartBeatRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HeartBeatRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HeartBeatRet &a, HeartBeatRet &b);

typedef struct _GuildWarOpsReq__isset {
  _GuildWarOpsReq__isset() : opstype(true), guildID(true), guildName(true) {}
  bool opstype;
  bool guildID;
  bool guildName;
} _GuildWarOpsReq__isset;

class GuildWarOpsReq {
 public:

  static const char* ascii_fingerprint; // = "55F2239516C9C08DB41231C56B29843E";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0xF2,0x23,0x95,0x16,0xC9,0xC0,0x8D,0xB4,0x12,0x31,0xC5,0x6B,0x29,0x84,0x3E};

  GuildWarOpsReq() : opstype(0), guildID(0LL), guildName("") {
  }

  virtual ~GuildWarOpsReq() throw() {}

  int16_t opstype;
  int64_t guildID;
  std::string guildName;

  _GuildWarOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_guildID(const int64_t val) {
    guildID = val;
  }

  void __set_guildName(const std::string& val) {
    guildName = val;
  }

  bool operator == (const GuildWarOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(guildID == rhs.guildID))
      return false;
    if (!(guildName == rhs.guildName))
      return false;
    return true;
  }
  bool operator != (const GuildWarOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildWarOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildWarOpsReq &a, GuildWarOpsReq &b);

typedef struct _GuildWarOtherInfo__isset {
  _GuildWarOtherInfo__isset() : tmWarStart(true), warApplyGuild(false), warFightGuild(false) {}
  bool tmWarStart;
  bool warApplyGuild;
  bool warFightGuild;
} _GuildWarOtherInfo__isset;

class GuildWarOtherInfo {
 public:

  static const char* ascii_fingerprint; // = "A79BF4F9EDF5A08D9A78B12DE92B4D82";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x9B,0xF4,0xF9,0xED,0xF5,0xA0,0x8D,0x9A,0x78,0xB1,0x2D,0xE9,0x2B,0x4D,0x82};

  GuildWarOtherInfo() : tmWarStart(0) {
  }

  virtual ~GuildWarOtherInfo() throw() {}

  int32_t tmWarStart;
  GuildInfoMsg warApplyGuild;
  GuildInfoMsg warFightGuild;

  _GuildWarOtherInfo__isset __isset;

  void __set_tmWarStart(const int32_t val) {
    tmWarStart = val;
  }

  void __set_warApplyGuild(const GuildInfoMsg& val) {
    warApplyGuild = val;
  }

  void __set_warFightGuild(const GuildInfoMsg& val) {
    warFightGuild = val;
  }

  bool operator == (const GuildWarOtherInfo & rhs) const
  {
    if (!(tmWarStart == rhs.tmWarStart))
      return false;
    if (!(warApplyGuild == rhs.warApplyGuild))
      return false;
    if (!(warFightGuild == rhs.warFightGuild))
      return false;
    return true;
  }
  bool operator != (const GuildWarOtherInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildWarOtherInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildWarOtherInfo &a, GuildWarOtherInfo &b);

typedef struct _GuildWarOpsRet__isset {
  _GuildWarOpsRet__isset() : opstype(true), tmWarStart(true), warApplyGuild(false), warFightGuild(false), warListInfo(false), winGuildId(true) {}
  bool opstype;
  bool tmWarStart;
  bool warApplyGuild;
  bool warFightGuild;
  bool warListInfo;
  bool winGuildId;
} _GuildWarOpsRet__isset;

class GuildWarOpsRet {
 public:

  static const char* ascii_fingerprint; // = "E26353D57BD4E85F7BED6BAC65CA35D1";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x63,0x53,0xD5,0x7B,0xD4,0xE8,0x5F,0x7B,0xED,0x6B,0xAC,0x65,0xCA,0x35,0xD1};

  GuildWarOpsRet() : opstype(0), tmWarStart(0), winGuildId(0LL) {
  }

  virtual ~GuildWarOpsRet() throw() {}

  int16_t opstype;
  int32_t tmWarStart;
  GuildInfoMsg warApplyGuild;
  GuildInfoMsg warFightGuild;
  std::vector<GuildWarOtherInfo>  warListInfo;
  int64_t winGuildId;

  _GuildWarOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_tmWarStart(const int32_t val) {
    tmWarStart = val;
  }

  void __set_warApplyGuild(const GuildInfoMsg& val) {
    warApplyGuild = val;
  }

  void __set_warFightGuild(const GuildInfoMsg& val) {
    warFightGuild = val;
  }

  void __set_warListInfo(const std::vector<GuildWarOtherInfo> & val) {
    warListInfo = val;
  }

  void __set_winGuildId(const int64_t val) {
    winGuildId = val;
  }

  bool operator == (const GuildWarOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(tmWarStart == rhs.tmWarStart))
      return false;
    if (!(warApplyGuild == rhs.warApplyGuild))
      return false;
    if (!(warFightGuild == rhs.warFightGuild))
      return false;
    if (!(warListInfo == rhs.warListInfo))
      return false;
    if (!(winGuildId == rhs.winGuildId))
      return false;
    return true;
  }
  bool operator != (const GuildWarOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildWarOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildWarOpsRet &a, GuildWarOpsRet &b);

typedef struct _GuildCityWarOpsMsgReq__isset {
  _GuildCityWarOpsMsgReq__isset() : opstype(true) {}
  bool opstype;
} _GuildCityWarOpsMsgReq__isset;

class GuildCityWarOpsMsgReq {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  GuildCityWarOpsMsgReq() : opstype(0) {
  }

  virtual ~GuildCityWarOpsMsgReq() throw() {}

  int16_t opstype;

  _GuildCityWarOpsMsgReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  bool operator == (const GuildCityWarOpsMsgReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    return true;
  }
  bool operator != (const GuildCityWarOpsMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildCityWarOpsMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildCityWarOpsMsgReq &a, GuildCityWarOpsMsgReq &b);

typedef struct _GuildCityWarOpsMsgRet__isset {
  _GuildCityWarOpsMsgRet__isset() : opstype(true), attack_result(true), curApplyList(false), tmStart(true), curMaster(false) {}
  bool opstype;
  bool attack_result;
  bool curApplyList;
  bool tmStart;
  bool curMaster;
} _GuildCityWarOpsMsgRet__isset;

class GuildCityWarOpsMsgRet {
 public:

  static const char* ascii_fingerprint; // = "25BE27070FA03E34FBE9F8765EAB583F";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0xBE,0x27,0x07,0x0F,0xA0,0x3E,0x34,0xFB,0xE9,0xF8,0x76,0x5E,0xAB,0x58,0x3F};

  GuildCityWarOpsMsgRet() : opstype(0), attack_result(0), tmStart(0) {
  }

  virtual ~GuildCityWarOpsMsgRet() throw() {}

  int16_t opstype;
  int16_t attack_result;
  std::vector<GuildInfoMsg>  curApplyList;
  int32_t tmStart;
  GuildInfoMsg curMaster;

  _GuildCityWarOpsMsgRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_attack_result(const int16_t val) {
    attack_result = val;
  }

  void __set_curApplyList(const std::vector<GuildInfoMsg> & val) {
    curApplyList = val;
  }

  void __set_tmStart(const int32_t val) {
    tmStart = val;
  }

  void __set_curMaster(const GuildInfoMsg& val) {
    curMaster = val;
  }

  bool operator == (const GuildCityWarOpsMsgRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(attack_result == rhs.attack_result))
      return false;
    if (!(curApplyList == rhs.curApplyList))
      return false;
    if (!(tmStart == rhs.tmStart))
      return false;
    if (!(curMaster == rhs.curMaster))
      return false;
    return true;
  }
  bool operator != (const GuildCityWarOpsMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GuildCityWarOpsMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GuildCityWarOpsMsgRet &a, GuildCityWarOpsMsgRet &b);

typedef struct _ChangeApprRet__isset {
  _ChangeApprRet__isset() : nameColor(true), xiongJiaCfgId(true), uid(true) {}
  bool nameColor;
  bool xiongJiaCfgId;
  bool uid;
} _ChangeApprRet__isset;

class ChangeApprRet {
 public:

  static const char* ascii_fingerprint; // = "F5482C93CA1806422ACA56B615045E1E";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x48,0x2C,0x93,0xCA,0x18,0x06,0x42,0x2A,0xCA,0x56,0xB6,0x15,0x04,0x5E,0x1E};

  ChangeApprRet() : nameColor(0), xiongJiaCfgId(0), uid(0LL) {
  }

  virtual ~ChangeApprRet() throw() {}

  int32_t nameColor;
  int32_t xiongJiaCfgId;
  int64_t uid;

  _ChangeApprRet__isset __isset;

  void __set_nameColor(const int32_t val) {
    nameColor = val;
  }

  void __set_xiongJiaCfgId(const int32_t val) {
    xiongJiaCfgId = val;
  }

  void __set_uid(const int64_t val) {
    uid = val;
  }

  bool operator == (const ChangeApprRet & rhs) const
  {
    if (!(nameColor == rhs.nameColor))
      return false;
    if (!(xiongJiaCfgId == rhs.xiongJiaCfgId))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const ChangeApprRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeApprRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangeApprRet &a, ChangeApprRet &b);

typedef struct _DailyLoginOpsReq__isset {
  _DailyLoginOpsReq__isset() : opstype(true), reward_id(true) {}
  bool opstype;
  bool reward_id;
} _DailyLoginOpsReq__isset;

class DailyLoginOpsReq {
 public:

  static const char* ascii_fingerprint; // = "C88FB7958D86460D03E699333A272947";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

  DailyLoginOpsReq() : opstype(0), reward_id(0) {
  }

  virtual ~DailyLoginOpsReq() throw() {}

  int16_t opstype;
  int16_t reward_id;

  _DailyLoginOpsReq__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_reward_id(const int16_t val) {
    reward_id = val;
  }

  bool operator == (const DailyLoginOpsReq & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(reward_id == rhs.reward_id))
      return false;
    return true;
  }
  bool operator != (const DailyLoginOpsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DailyLoginOpsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DailyLoginOpsReq &a, DailyLoginOpsReq &b);

typedef struct _DailyLoginInfo__isset {
  _DailyLoginInfo__isset() : seven_login_days(true), seven_login_mask(true), online_time(true), online_reward_mask(true), invite_reward(true) {}
  bool seven_login_days;
  bool seven_login_mask;
  bool online_time;
  bool online_reward_mask;
  bool invite_reward;
} _DailyLoginInfo__isset;

class DailyLoginInfo {
 public:

  static const char* ascii_fingerprint; // = "3AF48A00FA68BE4FE77AAA79C8B19CAD";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0xF4,0x8A,0x00,0xFA,0x68,0xBE,0x4F,0xE7,0x7A,0xAA,0x79,0xC8,0xB1,0x9C,0xAD};

  DailyLoginInfo() : seven_login_days(0), seven_login_mask(0), online_time(0), online_reward_mask(0), invite_reward(0) {
  }

  virtual ~DailyLoginInfo() throw() {}

  int16_t seven_login_days;
  int32_t seven_login_mask;
  int32_t online_time;
  int32_t online_reward_mask;
  int16_t invite_reward;

  _DailyLoginInfo__isset __isset;

  void __set_seven_login_days(const int16_t val) {
    seven_login_days = val;
  }

  void __set_seven_login_mask(const int32_t val) {
    seven_login_mask = val;
  }

  void __set_online_time(const int32_t val) {
    online_time = val;
  }

  void __set_online_reward_mask(const int32_t val) {
    online_reward_mask = val;
  }

  void __set_invite_reward(const int16_t val) {
    invite_reward = val;
  }

  bool operator == (const DailyLoginInfo & rhs) const
  {
    if (!(seven_login_days == rhs.seven_login_days))
      return false;
    if (!(seven_login_mask == rhs.seven_login_mask))
      return false;
    if (!(online_time == rhs.online_time))
      return false;
    if (!(online_reward_mask == rhs.online_reward_mask))
      return false;
    if (!(invite_reward == rhs.invite_reward))
      return false;
    return true;
  }
  bool operator != (const DailyLoginInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DailyLoginInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DailyLoginInfo &a, DailyLoginInfo &b);

typedef struct _DailyLoginOpsRet__isset {
  _DailyLoginOpsRet__isset() : opstype(true), dailyInfo(false), items(false), gold(true) {}
  bool opstype;
  bool dailyInfo;
  bool items;
  bool gold;
} _DailyLoginOpsRet__isset;

class DailyLoginOpsRet {
 public:

  static const char* ascii_fingerprint; // = "EEE5F211280BEE68757CBC92C745A3C0";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xE5,0xF2,0x11,0x28,0x0B,0xEE,0x68,0x75,0x7C,0xBC,0x92,0xC7,0x45,0xA3,0xC0};

  DailyLoginOpsRet() : opstype(0), gold(0) {
  }

  virtual ~DailyLoginOpsRet() throw() {}

  int16_t opstype;
  DailyLoginInfo dailyInfo;
  std::vector<Item>  items;
  int32_t gold;

  _DailyLoginOpsRet__isset __isset;

  void __set_opstype(const int16_t val) {
    opstype = val;
  }

  void __set_dailyInfo(const DailyLoginInfo& val) {
    dailyInfo = val;
  }

  void __set_items(const std::vector<Item> & val) {
    items = val;
  }

  void __set_gold(const int32_t val) {
    gold = val;
  }

  bool operator == (const DailyLoginOpsRet & rhs) const
  {
    if (!(opstype == rhs.opstype))
      return false;
    if (!(dailyInfo == rhs.dailyInfo))
      return false;
    if (!(items == rhs.items))
      return false;
    if (!(gold == rhs.gold))
      return false;
    return true;
  }
  bool operator != (const DailyLoginOpsRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DailyLoginOpsRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DailyLoginOpsRet &a, DailyLoginOpsRet &b);

} // namespace

#endif
