/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ffrpc_msg_TYPES_H
#define ffrpc_msg_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ff {

typedef struct _SessionOfflineReq__isset {
  _SessionOfflineReq__isset() : sessionId(true) {}
  bool sessionId;
} _SessionOfflineReq__isset;

class SessionOfflineReq {
 public:

  static const char* ascii_fingerprint; // = "7CBAC864381682B525334E49955F454B";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0xBA,0xC8,0x64,0x38,0x16,0x82,0xB5,0x25,0x33,0x4E,0x49,0x95,0x5F,0x45,0x4B};

  SessionOfflineReq() : sessionId(0LL) {
  }

  virtual ~SessionOfflineReq() throw() {}

  int64_t sessionId;

  _SessionOfflineReq__isset __isset;

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  bool operator == (const SessionOfflineReq & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const SessionOfflineReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionOfflineReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SessionOfflineReq &a, SessionOfflineReq &b);

typedef struct _RouteLogicMsgReq__isset {
  _RouteLogicMsgReq__isset() : sessionId(true), cmd(true), body(false), sessionIp(false) {}
  bool sessionId;
  bool cmd;
  bool body;
  bool sessionIp;
} _RouteLogicMsgReq__isset;

class RouteLogicMsgReq {
 public:

  static const char* ascii_fingerprint; // = "EADC45C9A213F80E462BAA7CE9FA080F";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0xDC,0x45,0xC9,0xA2,0x13,0xF8,0x0E,0x46,0x2B,0xAA,0x7C,0xE9,0xFA,0x08,0x0F};

  RouteLogicMsgReq() : sessionId(0LL), cmd(0), body(), sessionIp() {
  }

  virtual ~RouteLogicMsgReq() throw() {}

  int64_t sessionId;
  int16_t cmd;
  std::string body;
  std::string sessionIp;

  _RouteLogicMsgReq__isset __isset;

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  void __set_cmd(const int16_t val) {
    cmd = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  void __set_sessionIp(const std::string& val) {
    sessionIp = val;
  }

  bool operator == (const RouteLogicMsgReq & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(body == rhs.body))
      return false;
    if (!(sessionIp == rhs.sessionIp))
      return false;
    return true;
  }
  bool operator != (const RouteLogicMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RouteLogicMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RouteLogicMsgReq &a, RouteLogicMsgReq &b);

typedef struct _GateChangeLogicNodeReq__isset {
  _GateChangeLogicNodeReq__isset() : sessionId(true), allocWorker(false), extraData(false) {}
  bool sessionId;
  bool allocWorker;
  bool extraData;
} _GateChangeLogicNodeReq__isset;

class GateChangeLogicNodeReq {
 public:

  static const char* ascii_fingerprint; // = "BC9C141275D96A1BDFC4A1F500B2DCBE";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

  GateChangeLogicNodeReq() : sessionId(0LL), allocWorker(), extraData() {
  }

  virtual ~GateChangeLogicNodeReq() throw() {}

  int64_t sessionId;
  std::string allocWorker;
  std::string extraData;

  _GateChangeLogicNodeReq__isset __isset;

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  void __set_allocWorker(const std::string& val) {
    allocWorker = val;
  }

  void __set_extraData(const std::string& val) {
    extraData = val;
  }

  bool operator == (const GateChangeLogicNodeReq & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(allocWorker == rhs.allocWorker))
      return false;
    if (!(extraData == rhs.extraData))
      return false;
    return true;
  }
  bool operator != (const GateChangeLogicNodeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateChangeLogicNodeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateChangeLogicNodeReq &a, GateChangeLogicNodeReq &b);

typedef struct _GateCloseSessionReq__isset {
  _GateCloseSessionReq__isset() : sessionId(true) {}
  bool sessionId;
} _GateCloseSessionReq__isset;

class GateCloseSessionReq {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  GateCloseSessionReq() : sessionId(0LL) {
  }

  virtual ~GateCloseSessionReq() throw() {}

  int64_t sessionId;

  _GateCloseSessionReq__isset __isset;

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  bool operator == (const GateCloseSessionReq & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const GateCloseSessionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateCloseSessionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateCloseSessionReq &a, GateCloseSessionReq &b);

typedef struct _GateRouteMsgToSessionReq__isset {
  _GateRouteMsgToSessionReq__isset() : sessionId(true), cmd(true), body(false) {}
  bool sessionId;
  bool cmd;
  bool body;
} _GateRouteMsgToSessionReq__isset;

class GateRouteMsgToSessionReq {
 public:

  static const char* ascii_fingerprint; // = "0F4880829CCE5EA99C09EDF6EED29938";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0x48,0x80,0x82,0x9C,0xCE,0x5E,0xA9,0x9C,0x09,0xED,0xF6,0xEE,0xD2,0x99,0x38};

  GateRouteMsgToSessionReq() : cmd(0), body() {

  }

  virtual ~GateRouteMsgToSessionReq() throw() {}

  std::vector<int64_t>  sessionId;
  int16_t cmd;
  std::string body;

  _GateRouteMsgToSessionReq__isset __isset;

  void __set_sessionId(const std::vector<int64_t> & val) {
    sessionId = val;
  }

  void __set_cmd(const int16_t val) {
    cmd = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const GateRouteMsgToSessionReq & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const GateRouteMsgToSessionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateRouteMsgToSessionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateRouteMsgToSessionReq &a, GateRouteMsgToSessionReq &b);

typedef struct _GateBroadcastMsgToSessionReq__isset {
  _GateBroadcastMsgToSessionReq__isset() : cmd(true), body(false) {}
  bool cmd;
  bool body;
} _GateBroadcastMsgToSessionReq__isset;

class GateBroadcastMsgToSessionReq {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  GateBroadcastMsgToSessionReq() : cmd(0), body() {
  }

  virtual ~GateBroadcastMsgToSessionReq() throw() {}

  int16_t cmd;
  std::string body;

  _GateBroadcastMsgToSessionReq__isset __isset;

  void __set_cmd(const int16_t val) {
    cmd = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const GateBroadcastMsgToSessionReq & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const GateBroadcastMsgToSessionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GateBroadcastMsgToSessionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GateBroadcastMsgToSessionReq &a, GateBroadcastMsgToSessionReq &b);

typedef struct _WorkerCallMsgReq__isset {
  _WorkerCallMsgReq__isset() : cmd(true), body(false) {}
  bool cmd;
  bool body;
} _WorkerCallMsgReq__isset;

class WorkerCallMsgReq {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  WorkerCallMsgReq() : cmd(0), body() {
  }

  virtual ~WorkerCallMsgReq() throw() {}

  int16_t cmd;
  std::string body;

  _WorkerCallMsgReq__isset __isset;

  void __set_cmd(const int16_t val) {
    cmd = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const WorkerCallMsgReq & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const WorkerCallMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerCallMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WorkerCallMsgReq &a, WorkerCallMsgReq &b);

typedef struct _WorkerCallMsgRet__isset {
  _WorkerCallMsgRet__isset() : err(false), msgType(false), body(false) {}
  bool err;
  bool msgType;
  bool body;
} _WorkerCallMsgRet__isset;

class WorkerCallMsgRet {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  WorkerCallMsgRet() : err(), msgType(), body() {
  }

  virtual ~WorkerCallMsgRet() throw() {}

  std::string err;
  std::string msgType;
  std::string body;

  _WorkerCallMsgRet__isset __isset;

  void __set_err(const std::string& val) {
    err = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  bool operator == (const WorkerCallMsgRet & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(body == rhs.body))
      return false;
    return true;
  }
  bool operator != (const WorkerCallMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkerCallMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WorkerCallMsgRet &a, WorkerCallMsgRet &b);

typedef struct _BrokerRouteMsgReq__isset {
  _BrokerRouteMsgReq__isset() : destServiceName(false), destMsgName(false), destNodeId(false), fromNodeId(false), callbackId(false), body(false), errinfo(false) {}
  bool destServiceName;
  bool destMsgName;
  bool destNodeId;
  bool fromNodeId;
  bool callbackId;
  bool body;
  bool errinfo;
} _BrokerRouteMsgReq__isset;

class BrokerRouteMsgReq {
 public:

  static const char* ascii_fingerprint; // = "C07CD6450B7CF81ECAF7242A818797B7";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x7C,0xD6,0x45,0x0B,0x7C,0xF8,0x1E,0xCA,0xF7,0x24,0x2A,0x81,0x87,0x97,0xB7};

  BrokerRouteMsgReq() : destServiceName(), destMsgName(), destNodeId(0), fromNodeId(0), callbackId(0), body(), errinfo() {
  }

  virtual ~BrokerRouteMsgReq() throw() {}

  std::string destServiceName;
  std::string destMsgName;
  int64_t destNodeId;
  int64_t fromNodeId;
  int64_t callbackId;
  std::string body;
  std::string errinfo;

  _BrokerRouteMsgReq__isset __isset;

  void __set_destServiceName(const std::string& val) {
    destServiceName = val;
  }

  void __set_destMsgName(const std::string& val) {
    destMsgName = val;
  }

  void __set_destNodeId(const int64_t val) {
    destNodeId = val;
  }

  void __set_fromNodeId(const int64_t val) {
    fromNodeId = val;
  }

  void __set_callbackId(const int64_t val) {
    callbackId = val;
  }

  void __set_body(const std::string& val) {
    body = val;
  }

  void __set_errinfo(const std::string& val) {
    errinfo = val;
  }

  bool operator == (const BrokerRouteMsgReq & rhs) const
  {
    if (!(destServiceName == rhs.destServiceName))
      return false;
    if (!(destMsgName == rhs.destMsgName))
      return false;
    if (!(destNodeId == rhs.destNodeId))
      return false;
    if (!(fromNodeId == rhs.fromNodeId))
      return false;
    if (!(callbackId == rhs.callbackId))
      return false;
    if (!(body == rhs.body))
      return false;
    if (!(errinfo == rhs.errinfo))
      return false;
    return true;
  }
  bool operator != (const BrokerRouteMsgReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrokerRouteMsgReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BrokerRouteMsgReq &a, BrokerRouteMsgReq &b);

typedef struct _RegisterToBrokerReq__isset {
  _RegisterToBrokerReq__isset() : nodeType(false), strServiceName(false) {}
  bool nodeType;
  bool strServiceName;
} _RegisterToBrokerReq__isset;

class RegisterToBrokerReq {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  RegisterToBrokerReq() : nodeType(0), strServiceName() {
  }

  virtual ~RegisterToBrokerReq() throw() {}

  int32_t nodeType;
  std::string strServiceName;

  _RegisterToBrokerReq__isset __isset;

  void __set_nodeType(const int32_t val) {
    nodeType = val;
  }

  void __set_strServiceName(const std::string& val) {
    strServiceName = val;
  }

  bool operator == (const RegisterToBrokerReq & rhs) const
  {
    if (!(nodeType == rhs.nodeType))
      return false;
    if (!(strServiceName == rhs.strServiceName))
      return false;
    return true;
  }
  bool operator != (const RegisterToBrokerReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterToBrokerReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RegisterToBrokerReq &a, RegisterToBrokerReq &b);

typedef struct _RegisterToBrokerRet__isset {
  _RegisterToBrokerRet__isset() : registerFlag(false), nodeId(false), service2nodeId(false) {}
  bool registerFlag;
  bool nodeId;
  bool service2nodeId;
} _RegisterToBrokerRet__isset;

class RegisterToBrokerRet {
 public:

  static const char* ascii_fingerprint; // = "1F41639F8135007E546B5DA3F7363917";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x41,0x63,0x9F,0x81,0x35,0x00,0x7E,0x54,0x6B,0x5D,0xA3,0xF7,0x36,0x39,0x17};

  RegisterToBrokerRet() : registerFlag(0), nodeId(0) {
  }

  virtual ~RegisterToBrokerRet() throw() {}

  int16_t registerFlag;
  int64_t nodeId;
  std::map<std::string, int64_t>  service2nodeId;

  _RegisterToBrokerRet__isset __isset;

  void __set_registerFlag(const int16_t val) {
    registerFlag = val;
  }

  void __set_nodeId(const int64_t val) {
    nodeId = val;
  }

  void __set_service2nodeId(const std::map<std::string, int64_t> & val) {
    service2nodeId = val;
  }

  bool operator == (const RegisterToBrokerRet & rhs) const
  {
    if (!(registerFlag == rhs.registerFlag))
      return false;
    if (!(nodeId == rhs.nodeId))
      return false;
    if (!(service2nodeId == rhs.service2nodeId))
      return false;
    return true;
  }
  bool operator != (const RegisterToBrokerRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterToBrokerRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RegisterToBrokerRet &a, RegisterToBrokerRet &b);


class EmptyMsgRet {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  EmptyMsgRet() {
  }

  virtual ~EmptyMsgRet() throw() {}


  bool operator == (const EmptyMsgRet & /* rhs */) const
  {
    return true;
  }
  bool operator != (const EmptyMsgRet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmptyMsgRet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EmptyMsgRet &a, EmptyMsgRet &b);

typedef struct _SessionEnterWorkerReq__isset {
  _SessionEnterWorkerReq__isset() : sessionId(false), sessionIp(false), fromGate(false), fromWorker(false), toWorker(false), extraData(false) {}
  bool sessionId;
  bool sessionIp;
  bool fromGate;
  bool fromWorker;
  bool toWorker;
  bool extraData;
} _SessionEnterWorkerReq__isset;

class SessionEnterWorkerReq {
 public:

  static const char* ascii_fingerprint; // = "1F10F993631B3ABD721D79EE58C2056E";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x10,0xF9,0x93,0x63,0x1B,0x3A,0xBD,0x72,0x1D,0x79,0xEE,0x58,0xC2,0x05,0x6E};

  SessionEnterWorkerReq() : sessionId(0), sessionIp(), fromGate(), fromWorker(), toWorker(), extraData() {
  }

  virtual ~SessionEnterWorkerReq() throw() {}

  int64_t sessionId;
  std::string sessionIp;
  std::string fromGate;
  std::string fromWorker;
  std::string toWorker;
  std::string extraData;

  _SessionEnterWorkerReq__isset __isset;

  void __set_sessionId(const int64_t val) {
    sessionId = val;
  }

  void __set_sessionIp(const std::string& val) {
    sessionIp = val;
  }

  void __set_fromGate(const std::string& val) {
    fromGate = val;
  }

  void __set_fromWorker(const std::string& val) {
    fromWorker = val;
  }

  void __set_toWorker(const std::string& val) {
    toWorker = val;
  }

  void __set_extraData(const std::string& val) {
    extraData = val;
  }

  bool operator == (const SessionEnterWorkerReq & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(sessionIp == rhs.sessionIp))
      return false;
    if (!(fromGate == rhs.fromGate))
      return false;
    if (!(fromWorker == rhs.fromWorker))
      return false;
    if (!(toWorker == rhs.toWorker))
      return false;
    if (!(extraData == rhs.extraData))
      return false;
    return true;
  }
  bool operator != (const SessionEnterWorkerReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionEnterWorkerReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SessionEnterWorkerReq &a, SessionEnterWorkerReq &b);

} // namespace

#endif
